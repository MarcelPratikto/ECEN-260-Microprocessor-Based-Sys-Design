
Lab8_PartD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000510c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08005294  08005294  00015294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080052d4  080052d4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080052d4  080052d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052d8  080052d8  000152d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e8  2000000c  080052e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001f4  080052e8  000201f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f6b0  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020f6  00000000  00000000  0002f72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00031828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  00032810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027214  00000000  00000000  00033476  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010df6  00000000  00000000  0005a68a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc997  00000000  00000000  0006b480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000043b8  00000000  00000000  00167e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0016c1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800527c 	.word	0x0800527c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800527c 	.word	0x0800527c

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fdc2 	bl	8000d54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f822 	bl	8000218 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80001d4:	f000 f871 	bl	80002ba <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d8:	f000 fa8e 	bl	80006f8 <MX_GPIO_Init>
  MX_TIM16_Init();
 80001dc:	f000 fa64 	bl	80006a8 <MX_TIM16_Init>
  MX_ADC1_Init();
 80001e0:	f000 f896 	bl	8000310 <MX_ADC1_Init>
  MX_ADC2_Init();
 80001e4:	f000 f90a 	bl	80003fc <MX_ADC2_Init>
  MX_ADC3_Init();
 80001e8:	f000 f96c 	bl	80004c4 <MX_ADC3_Init>
  MX_TIM3_Init();
 80001ec:	f000 f9ce 	bl	800058c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim16); // Start Timer16
 80001f0:	4807      	ldr	r0, [pc, #28]	; (8000210 <main+0x48>)
 80001f2:	f003 fe61 	bl	8003eb8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1); // start Timer3 PWM on Channel 1
 80001f6:	2100      	movs	r1, #0
 80001f8:	4806      	ldr	r0, [pc, #24]	; (8000214 <main+0x4c>)
 80001fa:	f003 ff2f 	bl	800405c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); // start Timer3 PWM on Channel 2
 80001fe:	2104      	movs	r1, #4
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <main+0x4c>)
 8000202:	f003 ff2b 	bl	800405c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3); // start Timer3 PWM on Channel 3
 8000206:	2108      	movs	r1, #8
 8000208:	4802      	ldr	r0, [pc, #8]	; (8000214 <main+0x4c>)
 800020a:	f003 ff27 	bl	800405c <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800020e:	e7fe      	b.n	800020e <main+0x46>
 8000210:	200001a0 	.word	0x200001a0
 8000214:	20000154 	.word	0x20000154

08000218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b096      	sub	sp, #88	; 0x58
 800021c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021e:	f107 0314 	add.w	r3, r7, #20
 8000222:	2244      	movs	r2, #68	; 0x44
 8000224:	2100      	movs	r1, #0
 8000226:	4618      	mov	r0, r3
 8000228:	f004 fffc 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022c:	463b      	mov	r3, r7
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]
 8000238:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800023a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023e:	f002 fb09 	bl	8002854 <HAL_PWREx_ControlVoltageScaling>
 8000242:	4603      	mov	r3, r0
 8000244:	2b00      	cmp	r3, #0
 8000246:	d001      	beq.n	800024c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000248:	f000 fba6 	bl	8000998 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800024c:	2302      	movs	r3, #2
 800024e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000250:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000254:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000256:	2310      	movs	r3, #16
 8000258:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025a:	2302      	movs	r3, #2
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800025e:	2302      	movs	r3, #2
 8000260:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000262:	2301      	movs	r3, #1
 8000264:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000266:	230a      	movs	r3, #10
 8000268:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800026a:	2307      	movs	r3, #7
 800026c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800026e:	2302      	movs	r3, #2
 8000270:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000272:	2302      	movs	r3, #2
 8000274:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000276:	f107 0314 	add.w	r3, r7, #20
 800027a:	4618      	mov	r0, r3
 800027c:	f002 fb40 	bl	8002900 <HAL_RCC_OscConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000286:	f000 fb87 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028a:	230f      	movs	r3, #15
 800028c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028e:	2303      	movs	r3, #3
 8000290:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000292:	2300      	movs	r3, #0
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800029a:	2300      	movs	r3, #0
 800029c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	2104      	movs	r1, #4
 80002a2:	4618      	mov	r0, r3
 80002a4:	f002 ff08 	bl	80030b8 <HAL_RCC_ClockConfig>
 80002a8:	4603      	mov	r3, r0
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d001      	beq.n	80002b2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80002ae:	f000 fb73 	bl	8000998 <Error_Handler>
  }
}
 80002b2:	bf00      	nop
 80002b4:	3758      	adds	r7, #88	; 0x58
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}

080002ba <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80002ba:	b580      	push	{r7, lr}
 80002bc:	b0a2      	sub	sp, #136	; 0x88
 80002be:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002c0:	463b      	mov	r3, r7
 80002c2:	2288      	movs	r2, #136	; 0x88
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f004 ffac 	bl	8005224 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80002d0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80002d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80002d6:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 80002d8:	2302      	movs	r3, #2
 80002da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80002dc:	2301      	movs	r3, #1
 80002de:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 80002e0:	2308      	movs	r3, #8
 80002e2:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80002e4:	2307      	movs	r3, #7
 80002e6:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80002e8:	2302      	movs	r3, #2
 80002ea:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80002ec:	2302      	movs	r3, #2
 80002ee:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80002f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80002f4:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002f6:	463b      	mov	r3, r7
 80002f8:	4618      	mov	r0, r3
 80002fa:	f003 f8c9 	bl	8003490 <HAL_RCCEx_PeriphCLKConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <PeriphCommonClock_Config+0x4e>
  {
    Error_Handler();
 8000304:	f000 fb48 	bl	8000998 <Error_Handler>
  }
}
 8000308:	bf00      	nop
 800030a:	3788      	adds	r7, #136	; 0x88
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}

08000310 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b08a      	sub	sp, #40	; 0x28
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000316:	f107 031c 	add.w	r3, r7, #28
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2200      	movs	r2, #0
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	605a      	str	r2, [r3, #4]
 800032a:	609a      	str	r2, [r3, #8]
 800032c:	60da      	str	r2, [r3, #12]
 800032e:	611a      	str	r2, [r3, #16]
 8000330:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000332:	4b2f      	ldr	r3, [pc, #188]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000334:	4a2f      	ldr	r2, [pc, #188]	; (80003f4 <MX_ADC1_Init+0xe4>)
 8000336:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000338:	4b2d      	ldr	r3, [pc, #180]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800033e:	4b2c      	ldr	r3, [pc, #176]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000340:	2200      	movs	r2, #0
 8000342:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000346:	2200      	movs	r2, #0
 8000348:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800034a:	4b29      	ldr	r3, [pc, #164]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800034c:	2200      	movs	r2, #0
 800034e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000350:	4b27      	ldr	r3, [pc, #156]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000352:	2204      	movs	r2, #4
 8000354:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000356:	4b26      	ldr	r3, [pc, #152]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000358:	2200      	movs	r2, #0
 800035a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800035c:	4b24      	ldr	r3, [pc, #144]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800035e:	2200      	movs	r2, #0
 8000360:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000362:	4b23      	ldr	r3, [pc, #140]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000364:	2201      	movs	r2, #1
 8000366:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000368:	4b21      	ldr	r3, [pc, #132]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800036a:	2200      	movs	r2, #0
 800036c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000372:	2200      	movs	r2, #0
 8000374:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000376:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000378:	2200      	movs	r2, #0
 800037a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800037c:	4b1c      	ldr	r3, [pc, #112]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800037e:	2200      	movs	r2, #0
 8000380:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000384:	4b1a      	ldr	r3, [pc, #104]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000386:	2200      	movs	r2, #0
 8000388:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800038a:	4b19      	ldr	r3, [pc, #100]	; (80003f0 <MX_ADC1_Init+0xe0>)
 800038c:	2200      	movs	r2, #0
 800038e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <MX_ADC1_Init+0xe0>)
 8000394:	f000 ff3e 	bl	8001214 <HAL_ADC_Init>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800039e:	f000 fafb 	bl	8000998 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003a6:	f107 031c 	add.w	r3, r7, #28
 80003aa:	4619      	mov	r1, r3
 80003ac:	4810      	ldr	r0, [pc, #64]	; (80003f0 <MX_ADC1_Init+0xe0>)
 80003ae:	f001 febf 	bl	8002130 <HAL_ADCEx_MultiModeConfigChannel>
 80003b2:	4603      	mov	r3, r0
 80003b4:	2b00      	cmp	r3, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80003b8:	f000 faee 	bl	8000998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80003bc:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <MX_ADC1_Init+0xe8>)
 80003be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003c0:	2306      	movs	r3, #6
 80003c2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003c8:	237f      	movs	r3, #127	; 0x7f
 80003ca:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80003cc:	2304      	movs	r3, #4
 80003ce:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80003d0:	2300      	movs	r3, #0
 80003d2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	4619      	mov	r1, r3
 80003d8:	4805      	ldr	r0, [pc, #20]	; (80003f0 <MX_ADC1_Init+0xe0>)
 80003da:	f001 fa0b 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80003e4:	f000 fad8 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003e8:	bf00      	nop
 80003ea:	3728      	adds	r7, #40	; 0x28
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	20000028 	.word	0x20000028
 80003f4:	50040000 	.word	0x50040000
 80003f8:	14f00020 	.word	0x14f00020

080003fc <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000402:	463b      	mov	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000412:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000414:	4a29      	ldr	r2, [pc, #164]	; (80004bc <MX_ADC2_Init+0xc0>)
 8000416:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000418:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800041a:	2200      	movs	r2, #0
 800041c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800041e:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000424:	4b24      	ldr	r3, [pc, #144]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800042a:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000430:	4b21      	ldr	r3, [pc, #132]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000432:	2204      	movs	r2, #4
 8000434:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000436:	4b20      	ldr	r3, [pc, #128]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000438:	2200      	movs	r2, #0
 800043a:	761a      	strb	r2, [r3, #24]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800043c:	4b1e      	ldr	r3, [pc, #120]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800043e:	2200      	movs	r2, #0
 8000440:	765a      	strb	r2, [r3, #25]
  hadc2.Init.NbrOfConversion = 1;
 8000442:	4b1d      	ldr	r3, [pc, #116]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000444:	2201      	movs	r2, #1
 8000446:	61da      	str	r2, [r3, #28]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800044a:	2200      	movs	r2, #0
 800044c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000450:	4b19      	ldr	r3, [pc, #100]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000452:	2200      	movs	r2, #0
 8000454:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000456:	4b18      	ldr	r3, [pc, #96]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000458:	2200      	movs	r2, #0
 800045a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800045c:	4b16      	ldr	r3, [pc, #88]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800045e:	2200      	movs	r2, #0
 8000460:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000464:	4b14      	ldr	r3, [pc, #80]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000466:	2200      	movs	r2, #0
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 800046a:	4b13      	ldr	r3, [pc, #76]	; (80004b8 <MX_ADC2_Init+0xbc>)
 800046c:	2200      	movs	r2, #0
 800046e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000472:	4811      	ldr	r0, [pc, #68]	; (80004b8 <MX_ADC2_Init+0xbc>)
 8000474:	f000 fece 	bl	8001214 <HAL_ADC_Init>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <MX_ADC2_Init+0x86>
  {
    Error_Handler();
 800047e:	f000 fa8b 	bl	8000998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000482:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <MX_ADC2_Init+0xc4>)
 8000484:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000486:	2306      	movs	r3, #6
 8000488:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800048e:	237f      	movs	r3, #127	; 0x7f
 8000490:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000492:	2304      	movs	r3, #4
 8000494:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000496:	2300      	movs	r3, #0
 8000498:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800049a:	463b      	mov	r3, r7
 800049c:	4619      	mov	r1, r3
 800049e:	4806      	ldr	r0, [pc, #24]	; (80004b8 <MX_ADC2_Init+0xbc>)
 80004a0:	f001 f9a8 	bl	80017f4 <HAL_ADC_ConfigChannel>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80004aa:	f000 fa75 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80004ae:	bf00      	nop
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	2000008c 	.word	0x2000008c
 80004bc:	50040100 	.word	0x50040100
 80004c0:	19200040 	.word	0x19200040

080004c4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ca:	463b      	mov	r3, r7
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]
 80004d2:	609a      	str	r2, [r3, #8]
 80004d4:	60da      	str	r2, [r3, #12]
 80004d6:	611a      	str	r2, [r3, #16]
 80004d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80004da:	4b29      	ldr	r3, [pc, #164]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004dc:	4a29      	ldr	r2, [pc, #164]	; (8000584 <MX_ADC3_Init+0xc0>)
 80004de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80004e0:	4b27      	ldr	r3, [pc, #156]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80004e6:	4b26      	ldr	r3, [pc, #152]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004ec:	4b24      	ldr	r3, [pc, #144]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004f2:	4b23      	ldr	r3, [pc, #140]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004f8:	4b21      	ldr	r3, [pc, #132]	; (8000580 <MX_ADC3_Init+0xbc>)
 80004fa:	2204      	movs	r2, #4
 80004fc:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000500:	2200      	movs	r2, #0
 8000502:	761a      	strb	r2, [r3, #24]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000504:	4b1e      	ldr	r3, [pc, #120]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000506:	2200      	movs	r2, #0
 8000508:	765a      	strb	r2, [r3, #25]
  hadc3.Init.NbrOfConversion = 1;
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_ADC3_Init+0xbc>)
 800050c:	2201      	movs	r2, #1
 800050e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000510:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000512:	2200      	movs	r2, #0
 8000514:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000518:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_ADC3_Init+0xbc>)
 800051a:	2200      	movs	r2, #0
 800051c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b18      	ldr	r3, [pc, #96]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000524:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800052c:	4b14      	ldr	r3, [pc, #80]	; (8000580 <MX_ADC3_Init+0xbc>)
 800052e:	2200      	movs	r2, #0
 8000530:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000532:	4b13      	ldr	r3, [pc, #76]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000534:	2200      	movs	r2, #0
 8000536:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800053a:	4811      	ldr	r0, [pc, #68]	; (8000580 <MX_ADC3_Init+0xbc>)
 800053c:	f000 fe6a 	bl	8001214 <HAL_ADC_Init>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <MX_ADC3_Init+0x86>
  {
    Error_Handler();
 8000546:	f000 fa27 	bl	8000998 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_ADC3_Init+0xc4>)
 800054c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800054e:	2306      	movs	r3, #6
 8000550:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000556:	237f      	movs	r3, #127	; 0x7f
 8000558:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800055a:	2304      	movs	r3, #4
 800055c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000562:	463b      	mov	r3, r7
 8000564:	4619      	mov	r1, r3
 8000566:	4806      	ldr	r0, [pc, #24]	; (8000580 <MX_ADC3_Init+0xbc>)
 8000568:	f001 f944 	bl	80017f4 <HAL_ADC_ConfigChannel>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8000572:	f000 fa11 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000576:	bf00      	nop
 8000578:	3718      	adds	r7, #24
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	200000f0 	.word	0x200000f0
 8000584:	50040200 	.word	0x50040200
 8000588:	04300002 	.word	0x04300002

0800058c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08e      	sub	sp, #56	; 0x38
 8000590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a0:	f107 031c 	add.w	r3, r7, #28
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ac:	463b      	mov	r3, r7
 80005ae:	2200      	movs	r2, #0
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	605a      	str	r2, [r3, #4]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	60da      	str	r2, [r3, #12]
 80005b8:	611a      	str	r2, [r3, #16]
 80005ba:	615a      	str	r2, [r3, #20]
 80005bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005be:	4b38      	ldr	r3, [pc, #224]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005c0:	4a38      	ldr	r2, [pc, #224]	; (80006a4 <MX_TIM3_Init+0x118>)
 80005c2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80005c4:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005c6:	2201      	movs	r2, #1
 80005c8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ca:	4b35      	ldr	r3, [pc, #212]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 39999;
 80005d0:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005d2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 80005d6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d8:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005da:	2200      	movs	r2, #0
 80005dc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005de:	4b30      	ldr	r3, [pc, #192]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e4:	482e      	ldr	r0, [pc, #184]	; (80006a0 <MX_TIM3_Init+0x114>)
 80005e6:	f003 fc0f 	bl	8003e08 <HAL_TIM_Base_Init>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80005f0:	f000 f9d2 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005fe:	4619      	mov	r1, r3
 8000600:	4827      	ldr	r0, [pc, #156]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000602:	f004 f847 	bl	8004694 <HAL_TIM_ConfigClockSource>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800060c:	f000 f9c4 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000610:	4823      	ldr	r0, [pc, #140]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000612:	f003 fcc1 	bl	8003f98 <HAL_TIM_PWM_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 800061c:	f000 f9bc 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000624:	2300      	movs	r3, #0
 8000626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000628:	f107 031c 	add.w	r3, r7, #28
 800062c:	4619      	mov	r1, r3
 800062e:	481c      	ldr	r0, [pc, #112]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000630:	f004 fd52 	bl	80050d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800063a:	f000 f9ad 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800063e:	2360      	movs	r3, #96	; 0x60
 8000640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000646:	2300      	movs	r3, #0
 8000648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064a:	2300      	movs	r3, #0
 800064c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800064e:	463b      	mov	r3, r7
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	4812      	ldr	r0, [pc, #72]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000656:	f003 ff09 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000660:	f000 f99a 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2204      	movs	r2, #4
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM3_Init+0x114>)
 800066c:	f003 fefe 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000676:	f000 f98f 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2208      	movs	r2, #8
 800067e:	4619      	mov	r1, r3
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000682:	f003 fef3 	bl	800446c <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800068c:	f000 f984 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <MX_TIM3_Init+0x114>)
 8000692:	f000 fa9b 	bl	8000bcc <HAL_TIM_MspPostInit>

}
 8000696:	bf00      	nop
 8000698:	3738      	adds	r7, #56	; 0x38
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000154 	.word	0x20000154
 80006a4:	40000400 	.word	0x40000400

080006a8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_TIM16_Init+0x4c>)
 80006b0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 7999;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006b4:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80006b8:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 80006c0:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006c6:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c8:	4b09      	ldr	r3, [pc, #36]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006ce:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_TIM16_Init+0x48>)
 80006dc:	f003 fb94 	bl	8003e08 <HAL_TIM_Base_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80006e6:	f000 f957 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200001a0 	.word	0x200001a0
 80006f4:	40014400 	.word	0x40014400

080006f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b08a      	sub	sp, #40	; 0x28
 80006fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fe:	f107 0314 	add.w	r3, r7, #20
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	4b2f      	ldr	r3, [pc, #188]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	4a2e      	ldr	r2, [pc, #184]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000714:	f043 0304 	orr.w	r3, r3, #4
 8000718:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071a:	4b2c      	ldr	r3, [pc, #176]	; (80007cc <MX_GPIO_Init+0xd4>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	f003 0304 	and.w	r3, r3, #4
 8000722:	613b      	str	r3, [r7, #16]
 8000724:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a28      	ldr	r2, [pc, #160]	; (80007cc <MX_GPIO_Init+0xd4>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b26      	ldr	r3, [pc, #152]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b23      	ldr	r3, [pc, #140]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a22      	ldr	r2, [pc, #136]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b20      	ldr	r3, [pc, #128]	; (80007cc <MX_GPIO_Init+0xd4>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000756:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a1c      	ldr	r2, [pc, #112]	; (80007cc <MX_GPIO_Init+0xd4>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_GPIO_Init+0xd4>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f002 f846 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4813      	ldr	r0, [pc, #76]	; (80007d0 <MX_GPIO_Init+0xd8>)
 8000782:	f002 f841 	bl	8002808 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000786:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	2301      	movs	r3, #1
 800078e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000794:	2300      	movs	r3, #0
 8000796:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	4619      	mov	r1, r3
 800079e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a2:	f001 fe87 	bl	80024b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007a6:	2320      	movs	r3, #32
 80007a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007aa:	2301      	movs	r3, #1
 80007ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0xd8>)
 80007be:	f001 fe79 	bl	80024b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c2:	bf00      	nop
 80007c4:	3728      	adds	r7, #40	; 0x28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08e      	sub	sp, #56	; 0x38
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 // Check which version of the timer triggered this callback and toggle LED
 if (htim == &htim16)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4a68      	ldr	r2, [pc, #416]	; (8000980 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	f040 80c8 	bne.w	8000976 <HAL_TIM_PeriodElapsedCallback+0x1a2>
 {
	 int PWM_PERIOD = 40000;
 80007e6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80007ea:	637b      	str	r3, [r7, #52]	; 0x34
	 int ADC_RANGE = 4096; // 2^12 (12-bit resolution)
 80007ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f0:	633b      	str	r3, [r7, #48]	; 0x30
	 // Start ADC Conversions
	 HAL_ADC_Start(&hadc1);
 80007f2:	4864      	ldr	r0, [pc, #400]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 80007f4:	f000 fe5e 	bl	80014b4 <HAL_ADC_Start>
	 HAL_ADC_Start(&hadc2);
 80007f8:	4863      	ldr	r0, [pc, #396]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80007fa:	f000 fe5b 	bl	80014b4 <HAL_ADC_Start>
	 HAL_ADC_Start(&hadc3);
 80007fe:	4863      	ldr	r0, [pc, #396]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000800:	f000 fe58 	bl	80014b4 <HAL_ADC_Start>
	 // Wait for ADC conversions to complete
	 HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000804:	f04f 31ff 	mov.w	r1, #4294967295
 8000808:	485e      	ldr	r0, [pc, #376]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800080a:	f000 ff0d 	bl	8001628 <HAL_ADC_PollForConversion>
	 HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 800080e:	f04f 31ff 	mov.w	r1, #4294967295
 8000812:	485d      	ldr	r0, [pc, #372]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000814:	f000 ff08 	bl	8001628 <HAL_ADC_PollForConversion>
	 HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	485b      	ldr	r0, [pc, #364]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800081e:	f000 ff03 	bl	8001628 <HAL_ADC_PollForConversion>
	 // Read ADC values
	 uint16_t knob_measurement = HAL_ADC_GetValue(&hadc1);
 8000822:	4858      	ldr	r0, [pc, #352]	; (8000984 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000824:	f000 ffd8 	bl	80017d8 <HAL_ADC_GetValue>
 8000828:	4603      	mov	r3, r0
 800082a:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 uint16_t xjoy_measurement = HAL_ADC_GetValue(&hadc2);
 800082c:	4856      	ldr	r0, [pc, #344]	; (8000988 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800082e:	f000 ffd3 	bl	80017d8 <HAL_ADC_GetValue>
 8000832:	4603      	mov	r3, r0
 8000834:	85bb      	strh	r3, [r7, #44]	; 0x2c
	 uint16_t yjoy_measurement = HAL_ADC_GetValue(&hadc3);
 8000836:	4855      	ldr	r0, [pc, #340]	; (800098c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000838:	f000 ffce 	bl	80017d8 <HAL_ADC_GetValue>
 800083c:	4603      	mov	r3, r0
 800083e:	857b      	strh	r3, [r7, #42]	; 0x2a
	 // Convert ADC levels to a fraction of total
	 float knob_value = ((float) knob_measurement) / ADC_RANGE;
 8000840:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8000842:	ee07 3a90 	vmov	s15, r3
 8000846:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800084a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800084c:	ee07 3a90 	vmov	s15, r3
 8000850:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000858:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	 float xjoy_value = ((float) xjoy_measurement) / ADC_RANGE;
 800085c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800085e:	ee07 3a90 	vmov	s15, r3
 8000862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000868:	ee07 3a90 	vmov	s15, r3
 800086c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000874:	edc7 7a08 	vstr	s15, [r7, #32]
	 float yjoy_value = ((float) yjoy_measurement) / ADC_RANGE;
 8000878:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800087a:	ee07 3a90 	vmov	s15, r3
 800087e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800088c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000890:	edc7 7a07 	vstr	s15, [r7, #28]
	 // Write the PWM duty cycle values for the tri-color RGB LED
	 TIM3->CCR1 = (int) (knob_value * PWM_PERIOD); // red
 8000894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000896:	ee07 3a90 	vmov	s15, r3
 800089a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800089e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008aa:	4b39      	ldr	r3, [pc, #228]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80008ac:	ee17 2a90 	vmov	r2, s15
 80008b0:	635a      	str	r2, [r3, #52]	; 0x34
	 TIM3->CCR2 = (int) (xjoy_value * PWM_PERIOD); // green
 80008b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008b4:	ee07 3a90 	vmov	s15, r3
 80008b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008bc:	edd7 7a08 	vldr	s15, [r7, #32]
 80008c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008c8:	4b31      	ldr	r3, [pc, #196]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80008ca:	ee17 2a90 	vmov	r2, s15
 80008ce:	639a      	str	r2, [r3, #56]	; 0x38
	 TIM3->CCR3 = (int) (yjoy_value * PWM_PERIOD); // blue
 80008d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	edd7 7a07 	vldr	s15, [r7, #28]
 80008de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80008e8:	ee17 2a90 	vmov	r2, s15
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
	 // most-significant bits of the knob measurement
	 // PA10:	bit 11
	 // PB5:	bit 10
	 // PA8:	bit 9
	 // 1110 0000 0000
	 int bits = knob_measurement >> 9;
 80008ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80008f0:	0a5b      	lsrs	r3, r3, #9
 80008f2:	b29b      	uxth	r3, r3
 80008f4:	61bb      	str	r3, [r7, #24]
	 int bit11 = (bits & 0b100) >> 2;
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	109b      	asrs	r3, r3, #2
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	617b      	str	r3, [r7, #20]
	 int bit10 = (bits & 0b010) >> 1;
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	105b      	asrs	r3, r3, #1
 8000904:	f003 0301 	and.w	r3, r3, #1
 8000908:	613b      	str	r3, [r7, #16]
	 int bit9 = (bits & 0b001) >> 0;
 800090a:	69bb      	ldr	r3, [r7, #24]
 800090c:	f003 0301 	and.w	r3, r3, #1
 8000910:	60fb      	str	r3, [r7, #12]

	 if (bit11){
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d007      	beq.n	8000928 <HAL_TIM_PeriodElapsedCallback+0x154>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000918:	2201      	movs	r2, #1
 800091a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f001 ff71 	bl	8002808 <HAL_GPIO_WritePin>
 8000926:	e006      	b.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x162>
	 } else {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000928:	2200      	movs	r2, #0
 800092a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800092e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000932:	f001 ff69 	bl	8002808 <HAL_GPIO_WritePin>
	 }

	 if (bit10){
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	2b00      	cmp	r3, #0
 800093a:	d005      	beq.n	8000948 <HAL_TIM_PeriodElapsedCallback+0x174>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800093c:	2201      	movs	r2, #1
 800093e:	2120      	movs	r1, #32
 8000940:	4814      	ldr	r0, [pc, #80]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000942:	f001 ff61 	bl	8002808 <HAL_GPIO_WritePin>
 8000946:	e004      	b.n	8000952 <HAL_TIM_PeriodElapsedCallback+0x17e>
	 } else {
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000948:	2200      	movs	r2, #0
 800094a:	2120      	movs	r1, #32
 800094c:	4811      	ldr	r0, [pc, #68]	; (8000994 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800094e:	f001 ff5b 	bl	8002808 <HAL_GPIO_WritePin>
	 }

	 if (bit9){
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d007      	beq.n	8000968 <HAL_TIM_PeriodElapsedCallback+0x194>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800095e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000962:	f001 ff51 	bl	8002808 <HAL_GPIO_WritePin>
	 } else {
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
	 }
 }
}
 8000966:	e006      	b.n	8000976 <HAL_TIM_PeriodElapsedCallback+0x1a2>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800096e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000972:	f001 ff49 	bl	8002808 <HAL_GPIO_WritePin>
}
 8000976:	bf00      	nop
 8000978:	3738      	adds	r7, #56	; 0x38
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200001a0 	.word	0x200001a0
 8000984:	20000028 	.word	0x20000028
 8000988:	2000008c 	.word	0x2000008c
 800098c:	200000f0 	.word	0x200000f0
 8000990:	40000400 	.word	0x40000400
 8000994:	48000400 	.word	0x48000400

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009aa:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <HAL_MspInit+0x44>)
 80009ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ae:	4a0e      	ldr	r2, [pc, #56]	; (80009e8 <HAL_MspInit+0x44>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6613      	str	r3, [r2, #96]	; 0x60
 80009b6:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <HAL_MspInit+0x44>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <HAL_MspInit+0x44>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009cc:	6593      	str	r3, [r2, #88]	; 0x58
 80009ce:	4b06      	ldr	r3, [pc, #24]	; (80009e8 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40021000 	.word	0x40021000

080009ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	; 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a4d      	ldr	r2, [pc, #308]	; (8000b40 <HAL_ADC_MspInit+0x154>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d12e      	bne.n	8000a6c <HAL_ADC_MspInit+0x80>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a0e:	4b4d      	ldr	r3, [pc, #308]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	3301      	adds	r3, #1
 8000a14:	4a4b      	ldr	r2, [pc, #300]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a16:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a18:	4b4a      	ldr	r3, [pc, #296]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d10b      	bne.n	8000a38 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a20:	4b49      	ldr	r3, [pc, #292]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a24:	4a48      	ldr	r2, [pc, #288]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a26:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2c:	4b46      	ldr	r3, [pc, #280]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a34:	623b      	str	r3, [r7, #32]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b43      	ldr	r3, [pc, #268]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3c:	4a42      	ldr	r2, [pc, #264]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a44:	4b40      	ldr	r3, [pc, #256]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	61fb      	str	r3, [r7, #28]
 8000a4e:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a50:	2303      	movs	r3, #3
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a54:	230b      	movs	r3, #11
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a66:	f001 fd25 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000a6a:	e065      	b.n	8000b38 <HAL_ADC_MspInit+0x14c>
  else if(hadc->Instance==ADC2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a36      	ldr	r2, [pc, #216]	; (8000b4c <HAL_ADC_MspInit+0x160>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d12e      	bne.n	8000ad4 <HAL_ADC_MspInit+0xe8>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a31      	ldr	r2, [pc, #196]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000a80:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10b      	bne.n	8000aa0 <HAL_ADC_MspInit+0xb4>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000a88:	4b2f      	ldr	r3, [pc, #188]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8c:	4a2e      	ldr	r2, [pc, #184]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a8e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a94:	4b2c      	ldr	r3, [pc, #176]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa0:	4b29      	ldr	r3, [pc, #164]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa4:	4a28      	ldr	r2, [pc, #160]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000aa6:	f043 0301 	orr.w	r3, r3, #1
 8000aaa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aac:	4b26      	ldr	r3, [pc, #152]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab0:	f003 0301 	and.w	r3, r3, #1
 8000ab4:	617b      	str	r3, [r7, #20]
 8000ab6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000abc:	230b      	movs	r3, #11
 8000abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f001 fcf1 	bl	80024b4 <HAL_GPIO_Init>
}
 8000ad2:	e031      	b.n	8000b38 <HAL_ADC_MspInit+0x14c>
  else if(hadc->Instance==ADC3)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a1d      	ldr	r2, [pc, #116]	; (8000b50 <HAL_ADC_MspInit+0x164>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_ADC_MspInit+0x14c>
    HAL_RCC_ADC_CLK_ENABLED++;
 8000ade:	4b19      	ldr	r3, [pc, #100]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000ae6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC_CLK_ENABLED==1){
 8000ae8:	4b16      	ldr	r3, [pc, #88]	; (8000b44 <HAL_ADC_MspInit+0x158>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d10b      	bne.n	8000b08 <HAL_ADC_MspInit+0x11c>
      __HAL_RCC_ADC_CLK_ENABLE();
 8000af0:	4b15      	ldr	r3, [pc, #84]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a14      	ldr	r2, [pc, #80]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000af6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0c:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000b0e:	f043 0304 	orr.w	r3, r3, #4
 8000b12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_ADC_MspInit+0x15c>)
 8000b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b18:	f003 0304 	and.w	r3, r3, #4
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b20:	2301      	movs	r3, #1
 8000b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b24:	230b      	movs	r3, #11
 8000b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b30:	4619      	mov	r1, r3
 8000b32:	4808      	ldr	r0, [pc, #32]	; (8000b54 <HAL_ADC_MspInit+0x168>)
 8000b34:	f001 fcbe 	bl	80024b4 <HAL_GPIO_Init>
}
 8000b38:	bf00      	nop
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	50040000 	.word	0x50040000
 8000b44:	200001ec 	.word	0x200001ec
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	50040100 	.word	0x50040100
 8000b50:	50040200 	.word	0x50040200
 8000b54:	48000800 	.word	0x48000800

08000b58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	; (8000bc0 <HAL_TIM_Base_MspInit+0x68>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d10c      	bne.n	8000b84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b6a:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b70:	f043 0302 	orr.w	r3, r3, #2
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 0302 	and.w	r3, r3, #2
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000b82:	e018      	b.n	8000bb6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM16)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a0f      	ldr	r2, [pc, #60]	; (8000bc8 <HAL_TIM_Base_MspInit+0x70>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d113      	bne.n	8000bb6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b92:	4a0c      	ldr	r2, [pc, #48]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b98:	6613      	str	r3, [r2, #96]	; 0x60
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <HAL_TIM_Base_MspInit+0x6c>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	2100      	movs	r1, #0
 8000baa:	2019      	movs	r0, #25
 8000bac:	f001 fc4b 	bl	8002446 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000bb0:	2019      	movs	r0, #25
 8000bb2:	f001 fc64 	bl	800247e <HAL_NVIC_EnableIRQ>
}
 8000bb6:	bf00      	nop
 8000bb8:	3710      	adds	r7, #16
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	40014400 	.word	0x40014400

08000bcc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08a      	sub	sp, #40	; 0x28
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0314 	add.w	r3, r7, #20
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <HAL_TIM_MspPostInit+0x9c>)
 8000bea:	4293      	cmp	r3, r2
 8000bec:	d138      	bne.n	8000c60 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a18      	ldr	r2, [pc, #96]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <HAL_TIM_MspPostInit+0xa0>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0302 	and.w	r3, r3, #2
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c1e:	23c0      	movs	r3, #192	; 0xc0
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3c:	f001 fc3a 	bl	80024b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c40:	2301      	movs	r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c50:	2302      	movs	r3, #2
 8000c52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0314 	add.w	r3, r7, #20
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4805      	ldr	r0, [pc, #20]	; (8000c70 <HAL_TIM_MspPostInit+0xa4>)
 8000c5c:	f001 fc2a 	bl	80024b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000c60:	bf00      	nop
 8000c62:	3728      	adds	r7, #40	; 0x28
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	40021000 	.word	0x40021000
 8000c70:	48000400 	.word	0x48000400

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <NMI_Handler+0x4>

08000c7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c7e:	e7fe      	b.n	8000c7e <HardFault_Handler+0x4>

08000c80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c84:	e7fe      	b.n	8000c84 <MemManage_Handler+0x4>

08000c86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c86:	b480      	push	{r7}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8a:	e7fe      	b.n	8000c8a <BusFault_Handler+0x4>

08000c8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c90:	e7fe      	b.n	8000c90 <UsageFault_Handler+0x4>

08000c92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c92:	b480      	push	{r7}
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr

08000cae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc0:	f000 f8a4 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000ccc:	4802      	ldr	r0, [pc, #8]	; (8000cd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000cce:	f003 facb 	bl	8004268 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200001a0 	.word	0x200001a0

08000cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce0:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <SystemInit+0x20>)
 8000ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ce6:	4a05      	ldr	r2, [pc, #20]	; (8000cfc <SystemInit+0x20>)
 8000ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d38 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d04:	f7ff ffea 	bl	8000cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d08:	480c      	ldr	r0, [pc, #48]	; (8000d3c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d0a:	490d      	ldr	r1, [pc, #52]	; (8000d40 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d0c:	4a0d      	ldr	r2, [pc, #52]	; (8000d44 <LoopForever+0xe>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d10:	e002      	b.n	8000d18 <LoopCopyDataInit>

08000d12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d16:	3304      	adds	r3, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d1c:	d3f9      	bcc.n	8000d12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d20:	4c0a      	ldr	r4, [pc, #40]	; (8000d4c <LoopForever+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d24:	e001      	b.n	8000d2a <LoopFillZerobss>

08000d26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d28:	3204      	adds	r2, #4

08000d2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d2c:	d3fb      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d2e:	f004 fa81 	bl	8005234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d32:	f7ff fa49 	bl	80001c8 <main>

08000d36 <LoopForever>:

LoopForever:
    b LoopForever
 8000d36:	e7fe      	b.n	8000d36 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d38:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d40:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d44:	080052dc 	.word	0x080052dc
  ldr r2, =_sbss
 8000d48:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d4c:	200001f4 	.word	0x200001f4

08000d50 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d50:	e7fe      	b.n	8000d50 <ADC1_2_IRQHandler>
	...

08000d54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	; (8000d90 <HAL_Init+0x3c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a0b      	ldr	r2, [pc, #44]	; (8000d90 <HAL_Init+0x3c>)
 8000d64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d68:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6a:	2003      	movs	r0, #3
 8000d6c:	f001 fb60 	bl	8002430 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d70:	2000      	movs	r0, #0
 8000d72:	f000 f80f 	bl	8000d94 <HAL_InitTick>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d002      	beq.n	8000d82 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	71fb      	strb	r3, [r7, #7]
 8000d80:	e001      	b.n	8000d86 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d82:	f7ff fe0f 	bl	80009a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d86:	79fb      	ldrb	r3, [r7, #7]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40022000 	.word	0x40022000

08000d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da0:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <HAL_InitTick+0x6c>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000da8:	4b16      	ldr	r3, [pc, #88]	; (8000e04 <HAL_InitTick+0x70>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <HAL_InitTick+0x6c>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fb6b 	bl	800249a <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d10f      	bne.n	8000dea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2b0f      	cmp	r3, #15
 8000dce:	d809      	bhi.n	8000de4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6879      	ldr	r1, [r7, #4]
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f001 fb35 	bl	8002446 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_InitTick+0x74>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6013      	str	r3, [r2, #0]
 8000de2:	e007      	b.n	8000df4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000de4:	2301      	movs	r3, #1
 8000de6:	73fb      	strb	r3, [r7, #15]
 8000de8:	e004      	b.n	8000df4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	73fb      	strb	r3, [r7, #15]
 8000dee:	e001      	b.n	8000df4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	2301      	movs	r3, #1
 8000df2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000008 	.word	0x20000008
 8000e04:	20000000 	.word	0x20000000
 8000e08:	20000004 	.word	0x20000004

08000e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e10:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_IncTick+0x20>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <HAL_IncTick+0x24>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <HAL_IncTick+0x24>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	20000008 	.word	0x20000008
 8000e30:	200001f0 	.word	0x200001f0

08000e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return uwTick;
 8000e38:	4b03      	ldr	r3, [pc, #12]	; (8000e48 <HAL_GetTick+0x14>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	200001f0 	.word	0x200001f0

08000e4c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	431a      	orrs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	609a      	str	r2, [r3, #8]
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr

08000e72 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e72:	b480      	push	{r7}
 8000e74:	b083      	sub	sp, #12
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689b      	ldr	r3, [r3, #8]
 8000e80:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	431a      	orrs	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b087      	sub	sp, #28
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	3360      	adds	r3, #96	; 0x60
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	4413      	add	r3, r2
 8000ece:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <LL_ADC_SetOffset+0x44>)
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	687a      	ldr	r2, [r7, #4]
 8000eda:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8000eec:	bf00      	nop
 8000eee:	371c      	adds	r7, #28
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	03fff000 	.word	0x03fff000

08000efc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3360      	adds	r3, #96	; 0x60
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	4413      	add	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f26:	4770      	bx	lr

08000f28 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3360      	adds	r3, #96	; 0x60
 8000f38:	461a      	mov	r2, r3
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	431a      	orrs	r2, r3
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8000f52:	bf00      	nop
 8000f54:	371c      	adds	r7, #28
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b083      	sub	sp, #12
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b087      	sub	sp, #28
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3330      	adds	r3, #48	; 0x30
 8000f94:	461a      	mov	r2, r3
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	0a1b      	lsrs	r3, r3, #8
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	f003 030c 	and.w	r3, r3, #12
 8000fa0:	4413      	add	r3, r2
 8000fa2:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	681a      	ldr	r2, [r3, #0]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	f003 031f 	and.w	r3, r3, #31
 8000fae:	211f      	movs	r1, #31
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	0e9b      	lsrs	r3, r3, #26
 8000fbc:	f003 011f 	and.w	r1, r3, #31
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	f003 031f 	and.w	r3, r3, #31
 8000fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000fd0:	bf00      	nop
 8000fd2:	371c      	adds	r7, #28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b087      	sub	sp, #28
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	3314      	adds	r3, #20
 8000fec:	461a      	mov	r2, r3
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	0e5b      	lsrs	r3, r3, #25
 8000ff2:	009b      	lsls	r3, r3, #2
 8000ff4:	f003 0304 	and.w	r3, r3, #4
 8000ff8:	4413      	add	r3, r2
 8000ffa:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	0d1b      	lsrs	r3, r3, #20
 8001004:	f003 031f 	and.w	r3, r3, #31
 8001008:	2107      	movs	r1, #7
 800100a:	fa01 f303 	lsl.w	r3, r1, r3
 800100e:	43db      	mvns	r3, r3
 8001010:	401a      	ands	r2, r3
 8001012:	68bb      	ldr	r3, [r7, #8]
 8001014:	0d1b      	lsrs	r3, r3, #20
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	6879      	ldr	r1, [r7, #4]
 800101c:	fa01 f303 	lsl.w	r3, r1, r3
 8001020:	431a      	orrs	r2, r3
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001026:	bf00      	nop
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
	...

08001034 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f003 0318 	and.w	r3, r3, #24
 8001056:	4908      	ldr	r1, [pc, #32]	; (8001078 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001058:	40d9      	lsrs	r1, r3
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	400b      	ands	r3, r1
 800105e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001062:	431a      	orrs	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800106a:	bf00      	nop
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	0007ffff 	.word	0x0007ffff

0800107c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 031f 	and.w	r3, r3, #31
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80010c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c8:	687a      	ldr	r2, [r7, #4]
 80010ca:	6093      	str	r3, [r2, #8]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80010e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80010ec:	d101      	bne.n	80010f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80010ee:	2301      	movs	r3, #1
 80010f0:	e000      	b.n	80010f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80010f2:	2300      	movs	r3, #0
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001114:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001138:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800113c:	d101      	bne.n	8001142 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800113e:	2301      	movs	r3, #1
 8001140:	e000      	b.n	8001144 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001160:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001164:	f043 0201 	orr.w	r2, r3, #1
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <LL_ADC_IsEnabled+0x18>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <LL_ADC_IsEnabled+0x1a>
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800119e:	b480      	push	{r7}
 80011a0:	b083      	sub	sp, #12
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80011ae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011b2:	f043 0204 	orr.w	r2, r3, #4
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d101      	bne.n	80011de <LL_ADC_REG_IsConversionOngoing+0x18>
 80011da:	2301      	movs	r3, #1
 80011dc:	e000      	b.n	80011e0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr

080011ec <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 0308 	and.w	r3, r3, #8
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d101      	bne.n	8001204 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001200:	2301      	movs	r3, #1
 8001202:	e000      	b.n	8001206 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b089      	sub	sp, #36	; 0x24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e130      	b.n	8001490 <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001238:	2b00      	cmp	r3, #0
 800123a:	d109      	bne.n	8001250 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff fbd5 	bl	80009ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff ff3f 	bl	80010d8 <LL_ADC_IsDeepPowerDownEnabled>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d004      	beq.n	800126a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff25 	bl	80010b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f7ff ff5a 	bl	8001128 <LL_ADC_IsInternalRegulatorEnabled>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d115      	bne.n	80012a6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff ff3e 	bl	8001100 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001284:	4b84      	ldr	r3, [pc, #528]	; (8001498 <HAL_ADC_Init+0x284>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	4a84      	ldr	r2, [pc, #528]	; (800149c <HAL_ADC_Init+0x288>)
 800128c:	fba2 2303 	umull	r2, r3, r2, r3
 8001290:	099b      	lsrs	r3, r3, #6
 8001292:	3301      	adds	r3, #1
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001298:	e002      	b.n	80012a0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	3b01      	subs	r3, #1
 800129e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f9      	bne.n	800129a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff ff3c 	bl	8001128 <LL_ADC_IsInternalRegulatorEnabled>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012ba:	f043 0210 	orr.w	r2, r3, #16
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	f043 0201 	orr.w	r2, r3, #1
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ff75 	bl	80011c6 <LL_ADC_REG_IsConversionOngoing>
 80012dc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e2:	f003 0310 	and.w	r3, r3, #16
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f040 80c9 	bne.w	800147e <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f040 80c5 	bne.w	800147e <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80012fc:	f043 0202 	orr.w	r2, r3, #2
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff35 	bl	8001178 <LL_ADC_IsEnabled>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d115      	bne.n	8001340 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001314:	4862      	ldr	r0, [pc, #392]	; (80014a0 <HAL_ADC_Init+0x28c>)
 8001316:	f7ff ff2f 	bl	8001178 <LL_ADC_IsEnabled>
 800131a:	4604      	mov	r4, r0
 800131c:	4861      	ldr	r0, [pc, #388]	; (80014a4 <HAL_ADC_Init+0x290>)
 800131e:	f7ff ff2b 	bl	8001178 <LL_ADC_IsEnabled>
 8001322:	4603      	mov	r3, r0
 8001324:	431c      	orrs	r4, r3
 8001326:	4860      	ldr	r0, [pc, #384]	; (80014a8 <HAL_ADC_Init+0x294>)
 8001328:	f7ff ff26 	bl	8001178 <LL_ADC_IsEnabled>
 800132c:	4603      	mov	r3, r0
 800132e:	4323      	orrs	r3, r4
 8001330:	2b00      	cmp	r3, #0
 8001332:	d105      	bne.n	8001340 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	4619      	mov	r1, r3
 800133a:	485c      	ldr	r0, [pc, #368]	; (80014ac <HAL_ADC_Init+0x298>)
 800133c:	f7ff fd86 	bl	8000e4c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e5b      	ldrb	r3, [r3, #25]
 8001344:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800134a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001350:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001356:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001360:	4313      	orrs	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d106      	bne.n	800137c <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	3b01      	subs	r3, #1
 8001374:	045b      	lsls	r3, r3, #17
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001388:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	4b44      	ldr	r3, [pc, #272]	; (80014b0 <HAL_ADC_Init+0x29c>)
 80013a0:	4013      	ands	r3, r2
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	69b9      	ldr	r1, [r7, #24]
 80013a8:	430b      	orrs	r3, r1
 80013aa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff1b 	bl	80011ec <LL_ADC_INJ_IsConversionOngoing>
 80013b6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d13d      	bne.n	800143a <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d13a      	bne.n	800143a <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013c8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80013d0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80013e0:	f023 0302 	bic.w	r3, r3, #2
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	6812      	ldr	r2, [r2, #0]
 80013e8:	69b9      	ldr	r1, [r7, #24]
 80013ea:	430b      	orrs	r3, r1
 80013ec:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d118      	bne.n	800142a <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	691b      	ldr	r3, [r3, #16]
 80013fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001402:	f023 0304 	bic.w	r3, r3, #4
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800140a:	687a      	ldr	r2, [r7, #4]
 800140c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800140e:	4311      	orrs	r1, r2
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001414:	4311      	orrs	r1, r2
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800141a:	430a      	orrs	r2, r1
 800141c:	431a      	orrs	r2, r3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f042 0201 	orr.w	r2, r2, #1
 8001426:	611a      	str	r2, [r3, #16]
 8001428:	e007      	b.n	800143a <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	691a      	ldr	r2, [r3, #16]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0201 	bic.w	r2, r2, #1
 8001438:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d10c      	bne.n	800145c <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001448:	f023 010f 	bic.w	r1, r3, #15
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	1e5a      	subs	r2, r3, #1
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	430a      	orrs	r2, r1
 8001458:	631a      	str	r2, [r3, #48]	; 0x30
 800145a:	e007      	b.n	800146c <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f022 020f 	bic.w	r2, r2, #15
 800146a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001470:	f023 0303 	bic.w	r3, r3, #3
 8001474:	f043 0201 	orr.w	r2, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	655a      	str	r2, [r3, #84]	; 0x54
 800147c:	e007      	b.n	800148e <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f043 0210 	orr.w	r2, r3, #16
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800148e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001490:	4618      	mov	r0, r3
 8001492:	3724      	adds	r7, #36	; 0x24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}
 8001498:	20000000 	.word	0x20000000
 800149c:	053e2d63 	.word	0x053e2d63
 80014a0:	50040000 	.word	0x50040000
 80014a4:	50040100 	.word	0x50040100
 80014a8:	50040200 	.word	0x50040200
 80014ac:	50040300 	.word	0x50040300
 80014b0:	fff0c007 	.word	0xfff0c007

080014b4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014bc:	4857      	ldr	r0, [pc, #348]	; (800161c <HAL_ADC_Start+0x168>)
 80014be:	f7ff fddd 	bl	800107c <LL_ADC_GetMultimode>
 80014c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fe7c 	bl	80011c6 <LL_ADC_REG_IsConversionOngoing>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 809c 	bne.w	800160e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <HAL_ADC_Start+0x30>
 80014e0:	2302      	movs	r3, #2
 80014e2:	e097      	b.n	8001614 <HAL_ADC_Start+0x160>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f000 fd73 	bl	8001fd8 <ADC_Enable>
 80014f2:	4603      	mov	r3, r0
 80014f4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80014f6:	7dfb      	ldrb	r3, [r7, #23]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8083 	bne.w	8001604 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001506:	f023 0301 	bic.w	r3, r3, #1
 800150a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a42      	ldr	r2, [pc, #264]	; (8001620 <HAL_ADC_Start+0x16c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d002      	beq.n	8001522 <HAL_ADC_Start+0x6e>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	e000      	b.n	8001524 <HAL_ADC_Start+0x70>
 8001522:	4b40      	ldr	r3, [pc, #256]	; (8001624 <HAL_ADC_Start+0x170>)
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	4293      	cmp	r3, r2
 800152a:	d002      	beq.n	8001532 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d105      	bne.n	800153e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001542:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001546:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800154a:	d106      	bne.n	800155a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001550:	f023 0206 	bic.w	r2, r3, #6
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	659a      	str	r2, [r3, #88]	; 0x58
 8001558:	e002      	b.n	8001560 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2200      	movs	r2, #0
 800155e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	221c      	movs	r2, #28
 8001566:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2a      	ldr	r2, [pc, #168]	; (8001620 <HAL_ADC_Start+0x16c>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d002      	beq.n	8001580 <HAL_ADC_Start+0xcc>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	e000      	b.n	8001582 <HAL_ADC_Start+0xce>
 8001580:	4b28      	ldr	r3, [pc, #160]	; (8001624 <HAL_ADC_Start+0x170>)
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	4293      	cmp	r3, r2
 8001588:	d008      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	2b05      	cmp	r3, #5
 8001594:	d002      	beq.n	800159c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d114      	bne.n	80015c6 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fded 	bl	800119e <LL_ADC_REG_StartConversion>
 80015c4:	e025      	b.n	8001612 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a12      	ldr	r2, [pc, #72]	; (8001620 <HAL_ADC_Start+0x16c>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d002      	beq.n	80015e2 <HAL_ADC_Start+0x12e>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	e000      	b.n	80015e4 <HAL_ADC_Start+0x130>
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <HAL_ADC_Start+0x170>)
 80015e4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00f      	beq.n	8001612 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	655a      	str	r2, [r3, #84]	; 0x54
 8001602:	e006      	b.n	8001612 <HAL_ADC_Start+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800160c:	e001      	b.n	8001612 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800160e:	2302      	movs	r3, #2
 8001610:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001612:	7dfb      	ldrb	r3, [r7, #23]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	50040300 	.word	0x50040300
 8001620:	50040100 	.word	0x50040100
 8001624:	50040000 	.word	0x50040000

08001628 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001632:	4866      	ldr	r0, [pc, #408]	; (80017cc <HAL_ADC_PollForConversion+0x1a4>)
 8001634:	f7ff fd22 	bl	800107c <LL_ADC_GetMultimode>
 8001638:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	2b08      	cmp	r3, #8
 8001640:	d102      	bne.n	8001648 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001642:	2308      	movs	r3, #8
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e02a      	b.n	800169e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d005      	beq.n	800165a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	2b05      	cmp	r3, #5
 8001652:	d002      	beq.n	800165a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	2b09      	cmp	r3, #9
 8001658:	d111      	bne.n	800167e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0301 	and.w	r3, r3, #1
 8001664:	2b00      	cmp	r3, #0
 8001666:	d007      	beq.n	8001678 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800166c:	f043 0220 	orr.w	r2, r3, #32
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0a4      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001678:	2304      	movs	r3, #4
 800167a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800167c:	e00f      	b.n	800169e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800167e:	4853      	ldr	r0, [pc, #332]	; (80017cc <HAL_ADC_PollForConversion+0x1a4>)
 8001680:	f7ff fd0a 	bl	8001098 <LL_ADC_GetMultiDMATransfer>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d007      	beq.n	800169a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f043 0220 	orr.w	r2, r3, #32
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e093      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800169a:	2304      	movs	r3, #4
 800169c:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800169e:	f7ff fbc9 	bl	8000e34 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016a4:	e021      	b.n	80016ea <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d01d      	beq.n	80016ea <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80016ae:	f7ff fbc1 	bl	8000e34 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d302      	bcc.n	80016c4 <HAL_ADC_PollForConversion+0x9c>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d112      	bne.n	80016ea <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	4013      	ands	r3, r2
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d10b      	bne.n	80016ea <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f043 0204 	orr.w	r2, r3, #4
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e06b      	b.n	80017c2 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0d6      	beq.n	80016a6 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff fc28 	bl	8000f5e <LL_ADC_REG_IsTriggerSourceSWStart>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01c      	beq.n	800174e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	7e5b      	ldrb	r3, [r3, #25]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d118      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b08      	cmp	r3, #8
 8001728:	d111      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d105      	bne.n	800174e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001746:	f043 0201 	orr.w	r2, r3, #1
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a1f      	ldr	r2, [pc, #124]	; (80017d0 <HAL_ADC_PollForConversion+0x1a8>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d002      	beq.n	800175e <HAL_ADC_PollForConversion+0x136>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	e000      	b.n	8001760 <HAL_ADC_PollForConversion+0x138>
 800175e:	4b1d      	ldr	r3, [pc, #116]	; (80017d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	4293      	cmp	r3, r2
 8001766:	d008      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d002      	beq.n	800177a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	2b09      	cmp	r3, #9
 8001778:	d104      	bne.n	8001784 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e00c      	b.n	800179e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a11      	ldr	r2, [pc, #68]	; (80017d0 <HAL_ADC_PollForConversion+0x1a8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d002      	beq.n	8001794 <HAL_ADC_PollForConversion+0x16c>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	e000      	b.n	8001796 <HAL_ADC_PollForConversion+0x16e>
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <HAL_ADC_PollForConversion+0x1ac>)
 8001796:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	68db      	ldr	r3, [r3, #12]
 800179c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d104      	bne.n	80017ae <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2208      	movs	r2, #8
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e008      	b.n	80017c0 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d103      	bne.n	80017c0 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	220c      	movs	r2, #12
 80017be:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3720      	adds	r7, #32
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	50040300 	.word	0x50040300
 80017d0:	50040100 	.word	0x50040100
 80017d4:	50040000 	.word	0x50040000

080017d8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
	...

080017f4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b0b6      	sub	sp, #216	; 0xd8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_ConfigChannel+0x22>
 8001812:	2302      	movs	r3, #2
 8001814:	e3c9      	b.n	8001faa <HAL_ADC_ConfigChannel+0x7b6>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff fccf 	bl	80011c6 <LL_ADC_REG_IsConversionOngoing>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f040 83aa 	bne.w	8001f84 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	2b05      	cmp	r3, #5
 800183e:	d824      	bhi.n	800188a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	3b02      	subs	r3, #2
 8001846:	2b03      	cmp	r3, #3
 8001848:	d81b      	bhi.n	8001882 <HAL_ADC_ConfigChannel+0x8e>
 800184a:	a201      	add	r2, pc, #4	; (adr r2, 8001850 <HAL_ADC_ConfigChannel+0x5c>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001861 	.word	0x08001861
 8001854:	08001869 	.word	0x08001869
 8001858:	08001871 	.word	0x08001871
 800185c:	08001879 	.word	0x08001879
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001860:	230c      	movs	r3, #12
 8001862:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001866:	e010      	b.n	800188a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001868:	2312      	movs	r3, #18
 800186a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800186e:	e00c      	b.n	800188a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001870:	2318      	movs	r3, #24
 8001872:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001876:	e008      	b.n	800188a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001880:	e003      	b.n	800188a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001882:	2306      	movs	r3, #6
 8001884:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001888:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6818      	ldr	r0, [r3, #0]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001898:	f7ff fb74 	bl	8000f84 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fc90 	bl	80011c6 <LL_ADC_REG_IsConversionOngoing>
 80018a6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff fc9c 	bl	80011ec <LL_ADC_INJ_IsConversionOngoing>
 80018b4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80018b8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 81a4 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80018c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 819f 	bne.w	8001c0a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6818      	ldr	r0, [r3, #0]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	6819      	ldr	r1, [r3, #0]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	461a      	mov	r2, r3
 80018da:	f7ff fb7f 	bl	8000fdc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68db      	ldr	r3, [r3, #12]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0303 	and.w	r3, r3, #3
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	2b04      	cmp	r3, #4
 80018fe:	d00a      	beq.n	8001916 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6818      	ldr	r0, [r3, #0]
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6919      	ldr	r1, [r3, #16]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001910:	f7ff fad0 	bl	8000eb4 <LL_ADC_SetOffset>
 8001914:	e179      	b.n	8001c0a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2100      	movs	r1, #0
 800191c:	4618      	mov	r0, r3
 800191e:	f7ff faed 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001922:	4603      	mov	r3, r0
 8001924:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10a      	bne.n	8001942 <HAL_ADC_ConfigChannel+0x14e>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff fae2 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	0e9b      	lsrs	r3, r3, #26
 800193c:	f003 021f 	and.w	r2, r3, #31
 8001940:	e01e      	b.n	8001980 <HAL_ADC_ConfigChannel+0x18c>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff fad7 	bl	8000efc <LL_ADC_GetOffsetChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001954:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001958:	fa93 f3a3 	rbit	r3, r3
 800195c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001960:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001964:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001968:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800196c:	2b00      	cmp	r3, #0
 800196e:	d101      	bne.n	8001974 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001970:	2320      	movs	r3, #32
 8001972:	e004      	b.n	800197e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001974:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001978:	fab3 f383 	clz	r3, r3
 800197c:	b2db      	uxtb	r3, r3
 800197e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001988:	2b00      	cmp	r3, #0
 800198a:	d105      	bne.n	8001998 <HAL_ADC_ConfigChannel+0x1a4>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	0e9b      	lsrs	r3, r3, #26
 8001992:	f003 031f 	and.w	r3, r3, #31
 8001996:	e018      	b.n	80019ca <HAL_ADC_ConfigChannel+0x1d6>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019a4:	fa93 f3a3 	rbit	r3, r3
 80019a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80019ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80019b4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80019bc:	2320      	movs	r3, #32
 80019be:	e004      	b.n	80019ca <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80019c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d106      	bne.n	80019dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2200      	movs	r2, #0
 80019d4:	2100      	movs	r1, #0
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff faa6 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2101      	movs	r1, #1
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7ff fa8a 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80019e8:	4603      	mov	r3, r0
 80019ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d10a      	bne.n	8001a08 <HAL_ADC_ConfigChannel+0x214>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2101      	movs	r1, #1
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa7f 	bl	8000efc <LL_ADC_GetOffsetChannel>
 80019fe:	4603      	mov	r3, r0
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 021f 	and.w	r2, r3, #31
 8001a06:	e01e      	b.n	8001a46 <HAL_ADC_ConfigChannel+0x252>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2101      	movs	r1, #1
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fa74 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001a26:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001a2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001a36:	2320      	movs	r3, #32
 8001a38:	e004      	b.n	8001a44 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001a3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a3e:	fab3 f383 	clz	r3, r3
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d105      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x26a>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	0e9b      	lsrs	r3, r3, #26
 8001a58:	f003 031f 	and.w	r3, r3, #31
 8001a5c:	e018      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x29c>
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a6a:	fa93 f3a3 	rbit	r3, r3
 8001a6e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001a72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001a76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001a7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001a82:	2320      	movs	r3, #32
 8001a84:	e004      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001a86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d106      	bne.n	8001aa2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f7ff fa43 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fa27 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10a      	bne.n	8001ace <HAL_ADC_ConfigChannel+0x2da>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2102      	movs	r1, #2
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fa1c 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	0e9b      	lsrs	r3, r3, #26
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	e01e      	b.n	8001b0c <HAL_ADC_ConfigChannel+0x318>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2102      	movs	r1, #2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa11 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001af0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001af4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001afc:	2320      	movs	r3, #32
 8001afe:	e004      	b.n	8001b0a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001b04:	fab3 f383 	clz	r3, r3
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d105      	bne.n	8001b24 <HAL_ADC_ConfigChannel+0x330>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	0e9b      	lsrs	r3, r3, #26
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	e014      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x35a>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001b2c:	fa93 f3a3 	rbit	r3, r3
 8001b30:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001b32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001b38:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d101      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001b40:	2320      	movs	r3, #32
 8001b42:	e004      	b.n	8001b4e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001b44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b48:	fab3 f383 	clz	r3, r3
 8001b4c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d106      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2102      	movs	r1, #2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff f9e4 	bl	8000f28 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2103      	movs	r1, #3
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff f9c8 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10a      	bne.n	8001b8c <HAL_ADC_ConfigChannel+0x398>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2103      	movs	r1, #3
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7ff f9bd 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001b82:	4603      	mov	r3, r0
 8001b84:	0e9b      	lsrs	r3, r3, #26
 8001b86:	f003 021f 	and.w	r2, r3, #31
 8001b8a:	e017      	b.n	8001bbc <HAL_ADC_ConfigChannel+0x3c8>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2103      	movs	r1, #3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff f9b2 	bl	8000efc <LL_ADC_GetOffsetChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001b9e:	fa93 f3a3 	rbit	r3, r3
 8001ba2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ba4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ba6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ba8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	e003      	b.n	8001bba <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_ADC_ConfigChannel+0x3e0>
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	0e9b      	lsrs	r3, r3, #26
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	e011      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x404>
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001bdc:	fa93 f3a3 	rbit	r3, r3
 8001be0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001bec:	2320      	movs	r3, #32
 8001bee:	e003      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001bf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf2:	fab3 f383 	clz	r3, r3
 8001bf6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d106      	bne.n	8001c0a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2200      	movs	r2, #0
 8001c02:	2103      	movs	r1, #3
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f98f 	bl	8000f28 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fab2 	bl	8001178 <LL_ADC_IsEnabled>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f040 8140 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	6819      	ldr	r1, [r3, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	461a      	mov	r2, r3
 8001c2a:	f7ff fa03 	bl	8001034 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	4a8f      	ldr	r2, [pc, #572]	; (8001e70 <HAL_ADC_ConfigChannel+0x67c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	f040 8131 	bne.w	8001e9c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10b      	bne.n	8001c62 <HAL_ADC_ConfigChannel+0x46e>
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	0e9b      	lsrs	r3, r3, #26
 8001c50:	3301      	adds	r3, #1
 8001c52:	f003 031f 	and.w	r3, r3, #31
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	bf94      	ite	ls
 8001c5a:	2301      	movls	r3, #1
 8001c5c:	2300      	movhi	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	e019      	b.n	8001c96 <HAL_ADC_ConfigChannel+0x4a2>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c6a:	fa93 f3a3 	rbit	r3, r3
 8001c6e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c72:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001c74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001c7a:	2320      	movs	r3, #32
 8001c7c:	e003      	b.n	8001c86 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c80:	fab3 f383 	clz	r3, r3
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3301      	adds	r3, #1
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	2b09      	cmp	r3, #9
 8001c8e:	bf94      	ite	ls
 8001c90:	2301      	movls	r3, #1
 8001c92:	2300      	movhi	r3, #0
 8001c94:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d079      	beq.n	8001d8e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d107      	bne.n	8001cb6 <HAL_ADC_ConfigChannel+0x4c2>
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	0e9b      	lsrs	r3, r3, #26
 8001cac:	3301      	adds	r3, #1
 8001cae:	069b      	lsls	r3, r3, #26
 8001cb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001cb4:	e015      	b.n	8001ce2 <HAL_ADC_ConfigChannel+0x4ee>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	3301      	adds	r3, #1
 8001cdc:	069b      	lsls	r3, r3, #26
 8001cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_ConfigChannel+0x50e>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	0e9b      	lsrs	r3, r3, #26
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	f003 031f 	and.w	r3, r3, #31
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001d00:	e017      	b.n	8001d32 <HAL_ADC_ConfigChannel+0x53e>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d0a:	fa93 f3a3 	rbit	r3, r3
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d12:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001d1a:	2320      	movs	r3, #32
 8001d1c:	e003      	b.n	8001d26 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d20:	fab3 f383 	clz	r3, r3
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	3301      	adds	r3, #1
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	ea42 0103 	orr.w	r1, r2, r3
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d10a      	bne.n	8001d58 <HAL_ADC_ConfigChannel+0x564>
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	0e9b      	lsrs	r3, r3, #26
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f003 021f 	and.w	r2, r3, #31
 8001d4e:	4613      	mov	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	4413      	add	r3, r2
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	e018      	b.n	8001d8a <HAL_ADC_ConfigChannel+0x596>
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d60:	fa93 f3a3 	rbit	r3, r3
 8001d64:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001d70:	2320      	movs	r3, #32
 8001d72:	e003      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f003 021f 	and.w	r2, r3, #31
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d8a:	430b      	orrs	r3, r1
 8001d8c:	e081      	b.n	8001e92 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x5b6>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	0e9b      	lsrs	r3, r3, #26
 8001da0:	3301      	adds	r3, #1
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001da8:	e015      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x5e2>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001db2:	fa93 f3a3 	rbit	r3, r3
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8001dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d101      	bne.n	8001dc6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8001dc2:	2320      	movs	r3, #32
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	fab3 f383 	clz	r3, r3
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	3301      	adds	r3, #1
 8001dd0:	069b      	lsls	r3, r3, #26
 8001dd2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d109      	bne.n	8001df6 <HAL_ADC_ConfigChannel+0x602>
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	0e9b      	lsrs	r3, r3, #26
 8001de8:	3301      	adds	r3, #1
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	e017      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x632>
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	61bb      	str	r3, [r7, #24]
  return result;
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001e08:	6a3b      	ldr	r3, [r7, #32]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d101      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8001e0e:	2320      	movs	r3, #32
 8001e10:	e003      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8001e12:	6a3b      	ldr	r3, [r7, #32]
 8001e14:	fab3 f383 	clz	r3, r3
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	f003 031f 	and.w	r3, r3, #31
 8001e20:	2101      	movs	r1, #1
 8001e22:	fa01 f303 	lsl.w	r3, r1, r3
 8001e26:	ea42 0103 	orr.w	r1, r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d10d      	bne.n	8001e52 <HAL_ADC_ConfigChannel+0x65e>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	0e9b      	lsrs	r3, r3, #26
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	f003 021f 	and.w	r2, r3, #31
 8001e42:	4613      	mov	r3, r2
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	4413      	add	r3, r2
 8001e48:	3b1e      	subs	r3, #30
 8001e4a:	051b      	lsls	r3, r3, #20
 8001e4c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e50:	e01e      	b.n	8001e90 <HAL_ADC_ConfigChannel+0x69c>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	fa93 f3a3 	rbit	r3, r3
 8001e5e:	60fb      	str	r3, [r7, #12]
  return result;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d104      	bne.n	8001e74 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8001e6a:	2320      	movs	r3, #32
 8001e6c:	e006      	b.n	8001e7c <HAL_ADC_ConfigChannel+0x688>
 8001e6e:	bf00      	nop
 8001e70:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	fab3 f383 	clz	r3, r3
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	f003 021f 	and.w	r2, r3, #31
 8001e82:	4613      	mov	r3, r2
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	4413      	add	r3, r2
 8001e88:	3b1e      	subs	r3, #30
 8001e8a:	051b      	lsls	r3, r3, #20
 8001e8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e96:	4619      	mov	r1, r3
 8001e98:	f7ff f8a0 	bl	8000fdc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_ADC_ConfigChannel+0x7c0>)
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d07a      	beq.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001ea8:	4843      	ldr	r0, [pc, #268]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001eaa:	f7fe fff5 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 8001eae:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a41      	ldr	r2, [pc, #260]	; (8001fbc <HAL_ADC_ConfigChannel+0x7c8>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d12c      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001ebc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d126      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a3c      	ldr	r2, [pc, #240]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d004      	beq.n	8001edc <HAL_ADC_ConfigChannel+0x6e8>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3b      	ldr	r2, [pc, #236]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d15d      	bne.n	8001f98 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001edc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4834      	ldr	r0, [pc, #208]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001ee8:	f7fe ffc3 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001eec:	4b36      	ldr	r3, [pc, #216]	; (8001fc8 <HAL_ADC_ConfigChannel+0x7d4>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	099b      	lsrs	r3, r3, #6
 8001ef2:	4a36      	ldr	r2, [pc, #216]	; (8001fcc <HAL_ADC_ConfigChannel+0x7d8>)
 8001ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ef8:	099b      	lsrs	r3, r3, #6
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	4613      	mov	r3, r2
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f06:	e002      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d1f9      	bne.n	8001f08 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f14:	e040      	b.n	8001f98 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_ADC_ConfigChannel+0x7dc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d118      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d112      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_ADC_ConfigChannel+0x74c>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a22      	ldr	r2, [pc, #136]	; (8001fc4 <HAL_ADC_ConfigChannel+0x7d0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d12d      	bne.n	8001f9c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481b      	ldr	r0, [pc, #108]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f4c:	f7fe ff91 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f50:	e024      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a1f      	ldr	r2, [pc, #124]	; (8001fd4 <HAL_ADC_ConfigChannel+0x7e0>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d120      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d11a      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a14      	ldr	r2, [pc, #80]	; (8001fc0 <HAL_ADC_ConfigChannel+0x7cc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d115      	bne.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001f76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480e      	ldr	r0, [pc, #56]	; (8001fb8 <HAL_ADC_ConfigChannel+0x7c4>)
 8001f7e:	f7fe ff78 	bl	8000e72 <LL_ADC_SetCommonPathInternalCh>
 8001f82:	e00c      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	f043 0220 	orr.w	r2, r3, #32
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8001f96:	e002      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f98:	bf00      	nop
 8001f9a:	e000      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8001fa6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	37d8      	adds	r7, #216	; 0xd8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	80080000 	.word	0x80080000
 8001fb8:	50040300 	.word	0x50040300
 8001fbc:	c7520000 	.word	0xc7520000
 8001fc0:	50040000 	.word	0x50040000
 8001fc4:	50040200 	.word	0x50040200
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	053e2d63 	.word	0x053e2d63
 8001fd0:	cb840000 	.word	0xcb840000
 8001fd4:	80000001 	.word	0x80000001

08001fd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff f8c5 	bl	8001178 <LL_ADC_IsEnabled>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d169      	bne.n	80020c8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	689a      	ldr	r2, [r3, #8]
 8001ffa:	4b36      	ldr	r3, [pc, #216]	; (80020d4 <ADC_Enable+0xfc>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d00d      	beq.n	800201e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002006:	f043 0210 	orr.w	r2, r3, #16
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f043 0201 	orr.w	r2, r3, #1
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e055      	b.n	80020ca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff f894 	bl	8001150 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002028:	482b      	ldr	r0, [pc, #172]	; (80020d8 <ADC_Enable+0x100>)
 800202a:	f7fe ff35 	bl	8000e98 <LL_ADC_GetCommonPathInternalCh>
 800202e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002030:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002034:	2b00      	cmp	r3, #0
 8002036:	d013      	beq.n	8002060 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <ADC_Enable+0x104>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	099b      	lsrs	r3, r3, #6
 800203e:	4a28      	ldr	r2, [pc, #160]	; (80020e0 <ADC_Enable+0x108>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	099b      	lsrs	r3, r3, #6
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	4613      	mov	r3, r2
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	4413      	add	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002052:	e002      	b.n	800205a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	3b01      	subs	r3, #1
 8002058:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1f9      	bne.n	8002054 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002060:	f7fe fee8 	bl	8000e34 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002066:	e028      	b.n	80020ba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f883 	bl	8001178 <LL_ADC_IsEnabled>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d104      	bne.n	8002082 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7ff f867 	bl	8001150 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002082:	f7fe fed7 	bl	8000e34 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d914      	bls.n	80020ba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b01      	cmp	r3, #1
 800209c:	d00d      	beq.n	80020ba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f043 0210 	orr.w	r2, r3, #16
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e007      	b.n	80020ca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d1cf      	bne.n	8002068 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	8000003f 	.word	0x8000003f
 80020d8:	50040300 	.word	0x50040300
 80020dc:	20000000 	.word	0x20000000
 80020e0:	053e2d63 	.word	0x053e2d63

080020e4 <LL_ADC_IsEnabled>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	f003 0301 	and.w	r3, r3, #1
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d101      	bne.n	80020fc <LL_ADC_IsEnabled+0x18>
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <LL_ADC_IsEnabled+0x1a>
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	4618      	mov	r0, r3
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <LL_ADC_REG_IsConversionOngoing>:
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b04      	cmp	r3, #4
 800211c:	d101      	bne.n	8002122 <LL_ADC_REG_IsConversionOngoing+0x18>
 800211e:	2301      	movs	r3, #1
 8002120:	e000      	b.n	8002124 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b09f      	sub	sp, #124	; 0x7c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800214a:	2302      	movs	r3, #2
 800214c:	e093      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002156:	2300      	movs	r3, #0
 8002158:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800215a:	2300      	movs	r3, #0
 800215c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a47      	ldr	r2, [pc, #284]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d102      	bne.n	800216e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002168:	4b46      	ldr	r3, [pc, #280]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	e001      	b.n	8002172 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10b      	bne.n	8002190 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800217c:	f043 0220 	orr.w	r2, r3, #32
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e072      	b.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffb9 	bl	800210a <LL_ADC_REG_IsConversionOngoing>
 8002198:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff ffb3 	bl	800210a <LL_ADC_REG_IsConversionOngoing>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d154      	bne.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80021aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d151      	bne.n	8002254 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80021b0:	4b35      	ldr	r3, [pc, #212]	; (8002288 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80021b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d02c      	beq.n	8002216 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80021bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021ce:	035b      	lsls	r3, r3, #13
 80021d0:	430b      	orrs	r3, r1
 80021d2:	431a      	orrs	r2, r3
 80021d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021d8:	4829      	ldr	r0, [pc, #164]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80021da:	f7ff ff83 	bl	80020e4 <LL_ADC_IsEnabled>
 80021de:	4604      	mov	r4, r0
 80021e0:	4828      	ldr	r0, [pc, #160]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80021e2:	f7ff ff7f 	bl	80020e4 <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	431c      	orrs	r4, r3
 80021ea:	4828      	ldr	r0, [pc, #160]	; (800228c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80021ec:	f7ff ff7a 	bl	80020e4 <LL_ADC_IsEnabled>
 80021f0:	4603      	mov	r3, r0
 80021f2:	4323      	orrs	r3, r4
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d137      	bne.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80021f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002200:	f023 030f 	bic.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	6811      	ldr	r1, [r2, #0]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	6892      	ldr	r2, [r2, #8]
 800220c:	430a      	orrs	r2, r1
 800220e:	431a      	orrs	r2, r3
 8002210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002212:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002214:	e028      	b.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800221e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002220:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002222:	4817      	ldr	r0, [pc, #92]	; (8002280 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002224:	f7ff ff5e 	bl	80020e4 <LL_ADC_IsEnabled>
 8002228:	4604      	mov	r4, r0
 800222a:	4816      	ldr	r0, [pc, #88]	; (8002284 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800222c:	f7ff ff5a 	bl	80020e4 <LL_ADC_IsEnabled>
 8002230:	4603      	mov	r3, r0
 8002232:	431c      	orrs	r4, r3
 8002234:	4815      	ldr	r0, [pc, #84]	; (800228c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002236:	f7ff ff55 	bl	80020e4 <LL_ADC_IsEnabled>
 800223a:	4603      	mov	r3, r0
 800223c:	4323      	orrs	r3, r4
 800223e:	2b00      	cmp	r3, #0
 8002240:	d112      	bne.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002242:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800224a:	f023 030f 	bic.w	r3, r3, #15
 800224e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002250:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002252:	e009      	b.n	8002268 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0220 	orr.w	r2, r3, #32
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002266:	e000      	b.n	800226a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002268:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002272:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002276:	4618      	mov	r0, r3
 8002278:	377c      	adds	r7, #124	; 0x7c
 800227a:	46bd      	mov	sp, r7
 800227c:	bd90      	pop	{r4, r7, pc}
 800227e:	bf00      	nop
 8002280:	50040000 	.word	0x50040000
 8002284:	50040100 	.word	0x50040100
 8002288:	50040300 	.word	0x50040300
 800228c:	50040200 	.word	0x50040200

08002290 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022a2:	68db      	ldr	r3, [r3, #12]
 80022a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022ac:	4013      	ands	r3, r2
 80022ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80022bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022c2:	4a04      	ldr	r2, [pc, #16]	; (80022d4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	60d3      	str	r3, [r2, #12]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	e000ed00 	.word	0xe000ed00

080022d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022dc:	4b04      	ldr	r3, [pc, #16]	; (80022f0 <__NVIC_GetPriorityGrouping+0x18>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0a1b      	lsrs	r3, r3, #8
 80022e2:	f003 0307 	and.w	r3, r3, #7
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	2b00      	cmp	r3, #0
 8002304:	db0b      	blt.n	800231e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	f003 021f 	and.w	r2, r3, #31
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <__NVIC_EnableIRQ+0x38>)
 800230e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	2001      	movs	r0, #1
 8002316:	fa00 f202 	lsl.w	r2, r0, r2
 800231a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	e000e100 	.word	0xe000e100

08002330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	4603      	mov	r3, r0
 8002338:	6039      	str	r1, [r7, #0]
 800233a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002340:	2b00      	cmp	r3, #0
 8002342:	db0a      	blt.n	800235a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	b2da      	uxtb	r2, r3
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <__NVIC_SetPriority+0x4c>)
 800234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234e:	0112      	lsls	r2, r2, #4
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	440b      	add	r3, r1
 8002354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002358:	e00a      	b.n	8002370 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	b2da      	uxtb	r2, r3
 800235e:	4908      	ldr	r1, [pc, #32]	; (8002380 <__NVIC_SetPriority+0x50>)
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	f003 030f 	and.w	r3, r3, #15
 8002366:	3b04      	subs	r3, #4
 8002368:	0112      	lsls	r2, r2, #4
 800236a:	b2d2      	uxtb	r2, r2
 800236c:	440b      	add	r3, r1
 800236e:	761a      	strb	r2, [r3, #24]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr
 800237c:	e000e100 	.word	0xe000e100
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	f1c3 0307 	rsb	r3, r3, #7
 800239e:	2b04      	cmp	r3, #4
 80023a0:	bf28      	it	cs
 80023a2:	2304      	movcs	r3, #4
 80023a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	3304      	adds	r3, #4
 80023aa:	2b06      	cmp	r3, #6
 80023ac:	d902      	bls.n	80023b4 <NVIC_EncodePriority+0x30>
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	3b03      	subs	r3, #3
 80023b2:	e000      	b.n	80023b6 <NVIC_EncodePriority+0x32>
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b8:	f04f 32ff 	mov.w	r2, #4294967295
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	fa02 f303 	lsl.w	r3, r2, r3
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	401a      	ands	r2, r3
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	43d9      	mvns	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023dc:	4313      	orrs	r3, r2
         );
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3724      	adds	r7, #36	; 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
	...

080023ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fc:	d301      	bcc.n	8002402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023fe:	2301      	movs	r3, #1
 8002400:	e00f      	b.n	8002422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002402:	4a0a      	ldr	r2, [pc, #40]	; (800242c <SysTick_Config+0x40>)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3b01      	subs	r3, #1
 8002408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800240a:	210f      	movs	r1, #15
 800240c:	f04f 30ff 	mov.w	r0, #4294967295
 8002410:	f7ff ff8e 	bl	8002330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002414:	4b05      	ldr	r3, [pc, #20]	; (800242c <SysTick_Config+0x40>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800241a:	4b04      	ldr	r3, [pc, #16]	; (800242c <SysTick_Config+0x40>)
 800241c:	2207      	movs	r2, #7
 800241e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	e000e010 	.word	0xe000e010

08002430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f7ff ff29 	bl	8002290 <__NVIC_SetPriorityGrouping>
}
 800243e:	bf00      	nop
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	b086      	sub	sp, #24
 800244a:	af00      	add	r7, sp, #0
 800244c:	4603      	mov	r3, r0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002454:	2300      	movs	r3, #0
 8002456:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002458:	f7ff ff3e 	bl	80022d8 <__NVIC_GetPriorityGrouping>
 800245c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68b9      	ldr	r1, [r7, #8]
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7ff ff8e 	bl	8002384 <NVIC_EncodePriority>
 8002468:	4602      	mov	r2, r0
 800246a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800246e:	4611      	mov	r1, r2
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff ff5d 	bl	8002330 <__NVIC_SetPriority>
}
 8002476:	bf00      	nop
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b082      	sub	sp, #8
 8002482:	af00      	add	r7, sp, #0
 8002484:	4603      	mov	r3, r0
 8002486:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff31 	bl	80022f4 <__NVIC_EnableIRQ>
}
 8002492:	bf00      	nop
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff ffa2 	bl	80023ec <SysTick_Config>
 80024a8:	4603      	mov	r3, r0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b087      	sub	sp, #28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80024be:	2300      	movs	r3, #0
 80024c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c2:	e17f      	b.n	80027c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	2101      	movs	r1, #1
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	fa01 f303 	lsl.w	r3, r1, r3
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8171 	beq.w	80027be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d005      	beq.n	80024f4 <HAL_GPIO_Init+0x40>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d130      	bne.n	8002556 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	693a      	ldr	r2, [r7, #16]
 8002522:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800252a:	2201      	movs	r2, #1
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	fa02 f303 	lsl.w	r3, r2, r3
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 0201 	and.w	r2, r3, #1
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	fa02 f303 	lsl.w	r3, r2, r3
 800254a:	693a      	ldr	r2, [r7, #16]
 800254c:	4313      	orrs	r3, r2
 800254e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	693a      	ldr	r2, [r7, #16]
 8002554:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b03      	cmp	r3, #3
 8002560:	d118      	bne.n	8002594 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002566:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002568:	2201      	movs	r2, #1
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4013      	ands	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	08db      	lsrs	r3, r3, #3
 800257e:	f003 0201 	and.w	r2, r3, #1
 8002582:	697b      	ldr	r3, [r7, #20]
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	693a      	ldr	r2, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	2b03      	cmp	r3, #3
 800259e:	d017      	beq.n	80025d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	2203      	movs	r2, #3
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	43db      	mvns	r3, r3
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	4013      	ands	r3, r2
 80025b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	005b      	lsls	r3, r3, #1
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d123      	bne.n	8002624 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	08da      	lsrs	r2, r3, #3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3208      	adds	r2, #8
 80025e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	220f      	movs	r2, #15
 80025f4:	fa02 f303 	lsl.w	r3, r2, r3
 80025f8:	43db      	mvns	r3, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4013      	ands	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	691a      	ldr	r2, [r3, #16]
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0307 	and.w	r3, r3, #7
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fa02 f303 	lsl.w	r3, r2, r3
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	08da      	lsrs	r2, r3, #3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	3208      	adds	r2, #8
 800261e:	6939      	ldr	r1, [r7, #16]
 8002620:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	2203      	movs	r2, #3
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4013      	ands	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f003 0203 	and.w	r2, r3, #3
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4313      	orrs	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 80ac 	beq.w	80027be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002666:	4b5f      	ldr	r3, [pc, #380]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	4a5e      	ldr	r2, [pc, #376]	; (80027e4 <HAL_GPIO_Init+0x330>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6613      	str	r3, [r2, #96]	; 0x60
 8002672:	4b5c      	ldr	r3, [pc, #368]	; (80027e4 <HAL_GPIO_Init+0x330>)
 8002674:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800267e:	4a5a      	ldr	r2, [pc, #360]	; (80027e8 <HAL_GPIO_Init+0x334>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3302      	adds	r3, #2
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	220f      	movs	r2, #15
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43db      	mvns	r3, r3
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4013      	ands	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026a8:	d025      	beq.n	80026f6 <HAL_GPIO_Init+0x242>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a4f      	ldr	r2, [pc, #316]	; (80027ec <HAL_GPIO_Init+0x338>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d01f      	beq.n	80026f2 <HAL_GPIO_Init+0x23e>
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_GPIO_Init+0x33c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d019      	beq.n	80026ee <HAL_GPIO_Init+0x23a>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_GPIO_Init+0x340>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d013      	beq.n	80026ea <HAL_GPIO_Init+0x236>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <HAL_GPIO_Init+0x344>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00d      	beq.n	80026e6 <HAL_GPIO_Init+0x232>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4b      	ldr	r2, [pc, #300]	; (80027fc <HAL_GPIO_Init+0x348>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d007      	beq.n	80026e2 <HAL_GPIO_Init+0x22e>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4a      	ldr	r2, [pc, #296]	; (8002800 <HAL_GPIO_Init+0x34c>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d101      	bne.n	80026de <HAL_GPIO_Init+0x22a>
 80026da:	2306      	movs	r3, #6
 80026dc:	e00c      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026de:	2307      	movs	r3, #7
 80026e0:	e00a      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026e2:	2305      	movs	r3, #5
 80026e4:	e008      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026e6:	2304      	movs	r3, #4
 80026e8:	e006      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026ea:	2303      	movs	r3, #3
 80026ec:	e004      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026ee:	2302      	movs	r3, #2
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_GPIO_Init+0x244>
 80026f6:	2300      	movs	r3, #0
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	f002 0203 	and.w	r2, r2, #3
 80026fe:	0092      	lsls	r2, r2, #2
 8002700:	4093      	lsls	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002708:	4937      	ldr	r1, [pc, #220]	; (80027e8 <HAL_GPIO_Init+0x334>)
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	089b      	lsrs	r3, r3, #2
 800270e:	3302      	adds	r3, #2
 8002710:	693a      	ldr	r2, [r7, #16]
 8002712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002716:	4b3b      	ldr	r3, [pc, #236]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	43db      	mvns	r3, r3
 8002720:	693a      	ldr	r2, [r7, #16]
 8002722:	4013      	ands	r3, r2
 8002724:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800273a:	4a32      	ldr	r2, [pc, #200]	; (8002804 <HAL_GPIO_Init+0x350>)
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002740:	4b30      	ldr	r3, [pc, #192]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	43db      	mvns	r3, r3
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002764:	4a27      	ldr	r2, [pc, #156]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800276a:	4b26      	ldr	r3, [pc, #152]	; (8002804 <HAL_GPIO_Init+0x350>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	43db      	mvns	r3, r3
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d003      	beq.n	800278e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002786:	693a      	ldr	r2, [r7, #16]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4313      	orrs	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800278e:	4a1d      	ldr	r2, [pc, #116]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <HAL_GPIO_Init+0x350>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	43db      	mvns	r3, r3
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	4013      	ands	r3, r2
 80027a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <HAL_GPIO_Init+0x350>)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	fa22 f303 	lsr.w	r3, r2, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f47f ae78 	bne.w	80024c4 <HAL_GPIO_Init+0x10>
  }
}
 80027d4:	bf00      	nop
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40010000 	.word	0x40010000
 80027ec:	48000400 	.word	0x48000400
 80027f0:	48000800 	.word	0x48000800
 80027f4:	48000c00 	.word	0x48000c00
 80027f8:	48001000 	.word	0x48001000
 80027fc:	48001400 	.word	0x48001400
 8002800:	48001800 	.word	0x48001800
 8002804:	40010400 	.word	0x40010400

08002808 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	807b      	strh	r3, [r7, #2]
 8002814:	4613      	mov	r3, r2
 8002816:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002818:	787b      	ldrb	r3, [r7, #1]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800281e:	887a      	ldrh	r2, [r7, #2]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002824:	e002      	b.n	800282c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002826:	887a      	ldrh	r2, [r7, #2]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002838:	b480      	push	{r7}
 800283a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800283c:	4b04      	ldr	r3, [pc, #16]	; (8002850 <HAL_PWREx_GetVoltageRange+0x18>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002844:	4618      	mov	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40007000 	.word	0x40007000

08002854 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002862:	d130      	bne.n	80028c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002864:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800286c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002870:	d038      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002872:	4b20      	ldr	r3, [pc, #128]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800287a:	4a1e      	ldr	r2, [pc, #120]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800287c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002880:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002882:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2232      	movs	r2, #50	; 0x32
 8002888:	fb02 f303 	mul.w	r3, r2, r3
 800288c:	4a1b      	ldr	r2, [pc, #108]	; (80028fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0c9b      	lsrs	r3, r3, #18
 8002894:	3301      	adds	r3, #1
 8002896:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002898:	e002      	b.n	80028a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3b01      	subs	r3, #1
 800289e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028a0:	4b14      	ldr	r3, [pc, #80]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028ac:	d102      	bne.n	80028b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1f2      	bne.n	800289a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80028b4:	4b0f      	ldr	r3, [pc, #60]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d110      	bne.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e00f      	b.n	80028e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80028c6:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d2:	d007      	beq.n	80028e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028dc:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	40007000 	.word	0x40007000
 80028f8:	20000000 	.word	0x20000000
 80028fc:	431bde83 	.word	0x431bde83

08002900 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e3ca      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002912:	4b97      	ldr	r3, [pc, #604]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 030c 	and.w	r3, r3, #12
 800291a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800291c:	4b94      	ldr	r3, [pc, #592]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0310 	and.w	r3, r3, #16
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80e4 	beq.w	8002afc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_RCC_OscConfig+0x4a>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b0c      	cmp	r3, #12
 800293e:	f040 808b 	bne.w	8002a58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2b01      	cmp	r3, #1
 8002946:	f040 8087 	bne.w	8002a58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800294a:	4b89      	ldr	r3, [pc, #548]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d005      	beq.n	8002962 <HAL_RCC_OscConfig+0x62>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e3a2      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1a      	ldr	r2, [r3, #32]
 8002966:	4b82      	ldr	r3, [pc, #520]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d004      	beq.n	800297c <HAL_RCC_OscConfig+0x7c>
 8002972:	4b7f      	ldr	r3, [pc, #508]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800297a:	e005      	b.n	8002988 <HAL_RCC_OscConfig+0x88>
 800297c:	4b7c      	ldr	r3, [pc, #496]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 800297e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002988:	4293      	cmp	r3, r2
 800298a:	d223      	bcs.n	80029d4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fd1d 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e383      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a0:	4b73      	ldr	r3, [pc, #460]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a72      	ldr	r2, [pc, #456]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029a6:	f043 0308 	orr.w	r3, r3, #8
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	4b70      	ldr	r3, [pc, #448]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	496d      	ldr	r1, [pc, #436]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029be:	4b6c      	ldr	r3, [pc, #432]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	021b      	lsls	r3, r3, #8
 80029cc:	4968      	ldr	r1, [pc, #416]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	604b      	str	r3, [r1, #4]
 80029d2:	e025      	b.n	8002a20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029d4:	4b66      	ldr	r3, [pc, #408]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a65      	ldr	r2, [pc, #404]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029da:	f043 0308 	orr.w	r3, r3, #8
 80029de:	6013      	str	r3, [r2, #0]
 80029e0:	4b63      	ldr	r3, [pc, #396]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a1b      	ldr	r3, [r3, #32]
 80029ec:	4960      	ldr	r1, [pc, #384]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029f2:	4b5f      	ldr	r3, [pc, #380]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	69db      	ldr	r3, [r3, #28]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	495b      	ldr	r1, [pc, #364]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d109      	bne.n	8002a20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fcdd 	bl	80033d0 <RCC_SetFlashLatencyFromMSIRange>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e343      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a20:	f000 fc4a 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8002a24:	4602      	mov	r2, r0
 8002a26:	4b52      	ldr	r3, [pc, #328]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	091b      	lsrs	r3, r3, #4
 8002a2c:	f003 030f 	and.w	r3, r3, #15
 8002a30:	4950      	ldr	r1, [pc, #320]	; (8002b74 <HAL_RCC_OscConfig+0x274>)
 8002a32:	5ccb      	ldrb	r3, [r1, r3]
 8002a34:	f003 031f 	and.w	r3, r3, #31
 8002a38:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3c:	4a4e      	ldr	r2, [pc, #312]	; (8002b78 <HAL_RCC_OscConfig+0x278>)
 8002a3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a40:	4b4e      	ldr	r3, [pc, #312]	; (8002b7c <HAL_RCC_OscConfig+0x27c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f9a5 	bl	8000d94 <HAL_InitTick>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d052      	beq.n	8002afa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	e327      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d032      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002a60:	4b43      	ldr	r3, [pc, #268]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a42      	ldr	r2, [pc, #264]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a66:	f043 0301 	orr.w	r3, r3, #1
 8002a6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe f9e2 	bl	8000e34 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a74:	f7fe f9de 	bl	8000e34 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e310      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a86:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0f0      	beq.n	8002a74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a36      	ldr	r2, [pc, #216]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002a98:	f043 0308 	orr.w	r3, r3, #8
 8002a9c:	6013      	str	r3, [r2, #0]
 8002a9e:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	4931      	ldr	r1, [pc, #196]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ab0:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	492c      	ldr	r1, [pc, #176]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]
 8002ac4:	e01a      	b.n	8002afc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a29      	ldr	r2, [pc, #164]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002ad2:	f7fe f9af 	bl	8000e34 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ada:	f7fe f9ab 	bl	8000e34 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e2dd      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002aec:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0302 	and.w	r3, r3, #2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d1f0      	bne.n	8002ada <HAL_RCC_OscConfig+0x1da>
 8002af8:	e000      	b.n	8002afc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002afa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d074      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	2b08      	cmp	r3, #8
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x21a>
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d10e      	bne.n	8002b32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d064      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d160      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e2ba      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x24a>
 8002b3c:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e026      	b.n	8002b98 <HAL_RCC_OscConfig+0x298>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b52:	d115      	bne.n	8002b80 <HAL_RCC_OscConfig+0x280>
 8002b54:	4b06      	ldr	r3, [pc, #24]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a05      	ldr	r2, [pc, #20]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b5e:	6013      	str	r3, [r2, #0]
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a02      	ldr	r2, [pc, #8]	; (8002b70 <HAL_RCC_OscConfig+0x270>)
 8002b66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b6a:	6013      	str	r3, [r2, #0]
 8002b6c:	e014      	b.n	8002b98 <HAL_RCC_OscConfig+0x298>
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	08005294 	.word	0x08005294
 8002b78:	20000000 	.word	0x20000000
 8002b7c:	20000004 	.word	0x20000004
 8002b80:	4ba0      	ldr	r3, [pc, #640]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a9f      	ldr	r2, [pc, #636]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b9d      	ldr	r3, [pc, #628]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a9c      	ldr	r2, [pc, #624]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba0:	f7fe f948 	bl	8000e34 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7fe f944 	bl	8000e34 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e276      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bba:	4b92      	ldr	r3, [pc, #584]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0x2a8>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe f934 	bl	8000e34 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7fe f930 	bl	8000e34 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	; 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e262      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002be2:	4b88      	ldr	r3, [pc, #544]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x2d0>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d060      	beq.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_OscConfig+0x310>
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d119      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d116      	bne.n	8002c3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c10:	4b7c      	ldr	r3, [pc, #496]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d005      	beq.n	8002c28 <HAL_RCC_OscConfig+0x328>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d101      	bne.n	8002c28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e23f      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c28:	4b76      	ldr	r3, [pc, #472]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	691b      	ldr	r3, [r3, #16]
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	4973      	ldr	r1, [pc, #460]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c3c:	e040      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d023      	beq.n	8002c8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c46:	4b6f      	ldr	r3, [pc, #444]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6e      	ldr	r2, [pc, #440]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c52:	f7fe f8ef 	bl	8000e34 <HAL_GetTick>
 8002c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c58:	e008      	b.n	8002c6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c5a:	f7fe f8eb 	bl	8000e34 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e21d      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c6c:	4b65      	ldr	r3, [pc, #404]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d0f0      	beq.n	8002c5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	495f      	ldr	r1, [pc, #380]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
 8002c8c:	e018      	b.n	8002cc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c8e:	4b5d      	ldr	r3, [pc, #372]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a5c      	ldr	r2, [pc, #368]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fe f8cb 	bl	8000e34 <HAL_GetTick>
 8002c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ca0:	e008      	b.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca2:	f7fe f8c7 	bl	8000e34 <HAL_GetTick>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	1ad3      	subs	r3, r2, r3
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d901      	bls.n	8002cb4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e1f9      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cb4:	4b53      	ldr	r3, [pc, #332]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f0      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d03c      	beq.n	8002d46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d01c      	beq.n	8002d0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd4:	4b4b      	ldr	r3, [pc, #300]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002cda:	4a4a      	ldr	r2, [pc, #296]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce4:	f7fe f8a6 	bl	8000e34 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cec:	f7fe f8a2 	bl	8000e34 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e1d4      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cfe:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d0ef      	beq.n	8002cec <HAL_RCC_OscConfig+0x3ec>
 8002d0c:	e01b      	b.n	8002d46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d0e:	4b3d      	ldr	r3, [pc, #244]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d14:	4a3b      	ldr	r2, [pc, #236]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d16:	f023 0301 	bic.w	r3, r3, #1
 8002d1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d1e:	f7fe f889 	bl	8000e34 <HAL_GetTick>
 8002d22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d24:	e008      	b.n	8002d38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d26:	f7fe f885 	bl	8000e34 <HAL_GetTick>
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d901      	bls.n	8002d38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d34:	2303      	movs	r3, #3
 8002d36:	e1b7      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d38:	4b32      	ldr	r3, [pc, #200]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1ef      	bne.n	8002d26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0304 	and.w	r3, r3, #4
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f000 80a6 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d54:	2300      	movs	r3, #0
 8002d56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002d58:	4b2a      	ldr	r3, [pc, #168]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d10d      	bne.n	8002d80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d64:	4b27      	ldr	r3, [pc, #156]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d68:	4a26      	ldr	r2, [pc, #152]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d70:	4b24      	ldr	r3, [pc, #144]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d118      	bne.n	8002dbe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d98:	f7fe f84c 	bl	8000e34 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	e008      	b.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe f848 	bl	8000e34 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e17a      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002db2:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x508>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d108      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x4d8>
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002dd6:	e029      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	d115      	bne.n	8002e0c <HAL_RCC_OscConfig+0x50c>
 8002de0:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002de8:	f043 0304 	orr.w	r3, r3, #4
 8002dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df6:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <HAL_RCC_OscConfig+0x504>)
 8002df8:	f043 0301 	orr.w	r3, r3, #1
 8002dfc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e00:	e014      	b.n	8002e2c <HAL_RCC_OscConfig+0x52c>
 8002e02:	bf00      	nop
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40007000 	.word	0x40007000
 8002e0c:	4b9c      	ldr	r3, [pc, #624]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e12:	4a9b      	ldr	r2, [pc, #620]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e1c:	4b98      	ldr	r3, [pc, #608]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e22:	4a97      	ldr	r2, [pc, #604]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e24:	f023 0304 	bic.w	r3, r3, #4
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d016      	beq.n	8002e62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e34:	f7fd fffe 	bl	8000e34 <HAL_GetTick>
 8002e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3a:	e00a      	b.n	8002e52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3c:	f7fd fffa 	bl	8000e34 <HAL_GetTick>
 8002e40:	4602      	mov	r2, r0
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e12a      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	4b8b      	ldr	r3, [pc, #556]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0ed      	beq.n	8002e3c <HAL_RCC_OscConfig+0x53c>
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e62:	f7fd ffe7 	bl	8000e34 <HAL_GetTick>
 8002e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e68:	e00a      	b.n	8002e80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6a:	f7fd ffe3 	bl	8000e34 <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e113      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e80:	4b7f      	ldr	r3, [pc, #508]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ed      	bne.n	8002e6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e8e:	7ffb      	ldrb	r3, [r7, #31]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b7a      	ldr	r3, [pc, #488]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e98:	4a79      	ldr	r2, [pc, #484]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80fe 	beq.w	80030a6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	f040 80d0 	bne.w	8003054 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002eb4:	4b72      	ldr	r3, [pc, #456]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d130      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d127      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d11f      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ef4:	2a07      	cmp	r2, #7
 8002ef6:	bf14      	ite	ne
 8002ef8:	2201      	movne	r2, #1
 8002efa:	2200      	moveq	r2, #0
 8002efc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d113      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d06e      	beq.n	8003008 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b0c      	cmp	r3, #12
 8002f2e:	d069      	beq.n	8003004 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0ad      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002f4c:	4b4c      	ldr	r3, [pc, #304]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a4b      	ldr	r2, [pc, #300]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f56:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f58:	f7fd ff6c 	bl	8000e34 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f60:	f7fd ff68 	bl	8000e34 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e09a      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f72:	4b43      	ldr	r3, [pc, #268]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d1f0      	bne.n	8002f60 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7e:	4b40      	ldr	r3, [pc, #256]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	4b40      	ldr	r3, [pc, #256]	; (8003084 <HAL_RCC_OscConfig+0x784>)
 8002f84:	4013      	ands	r3, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002f8e:	3a01      	subs	r2, #1
 8002f90:	0112      	lsls	r2, r2, #4
 8002f92:	4311      	orrs	r1, r2
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f98:	0212      	lsls	r2, r2, #8
 8002f9a:	4311      	orrs	r1, r2
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002fa0:	0852      	lsrs	r2, r2, #1
 8002fa2:	3a01      	subs	r2, #1
 8002fa4:	0552      	lsls	r2, r2, #21
 8002fa6:	4311      	orrs	r1, r2
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002fac:	0852      	lsrs	r2, r2, #1
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	0652      	lsls	r2, r2, #25
 8002fb2:	4311      	orrs	r1, r2
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002fb8:	0912      	lsrs	r2, r2, #4
 8002fba:	0452      	lsls	r2, r2, #17
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4930      	ldr	r1, [pc, #192]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002fc4:	4b2e      	ldr	r3, [pc, #184]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a2d      	ldr	r2, [pc, #180]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fd0:	4b2b      	ldr	r3, [pc, #172]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	4a2a      	ldr	r2, [pc, #168]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fda:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002fdc:	f7fd ff2a 	bl	8000e34 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe4:	f7fd ff26 	bl	8000e34 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e058      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ff6:	4b22      	ldr	r3, [pc, #136]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003002:	e050      	b.n	80030a6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e04f      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003008:	4b1d      	ldr	r3, [pc, #116]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d148      	bne.n	80030a6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003014:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 800301a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800301e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003020:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4a16      	ldr	r2, [pc, #88]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8003026:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800302a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800302c:	f7fd ff02 	bl	8000e34 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003034:	f7fd fefe 	bl	8000e34 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e030      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003046:	4b0e      	ldr	r3, [pc, #56]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x734>
 8003052:	e028      	b.n	80030a6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d023      	beq.n	80030a2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a08      	ldr	r2, [pc, #32]	; (8003080 <HAL_RCC_OscConfig+0x780>)
 8003060:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003066:	f7fd fee5 	bl	8000e34 <HAL_GetTick>
 800306a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800306c:	e00c      	b.n	8003088 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800306e:	f7fd fee1 	bl	8000e34 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d905      	bls.n	8003088 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e013      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
 8003080:	40021000 	.word	0x40021000
 8003084:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003088:	4b09      	ldr	r3, [pc, #36]	; (80030b0 <HAL_RCC_OscConfig+0x7b0>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d1ec      	bne.n	800306e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_OscConfig+0x7b0>)
 8003096:	68da      	ldr	r2, [r3, #12]
 8003098:	4905      	ldr	r1, [pc, #20]	; (80030b0 <HAL_RCC_OscConfig+0x7b0>)
 800309a:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_RCC_OscConfig+0x7b4>)
 800309c:	4013      	ands	r3, r2
 800309e:	60cb      	str	r3, [r1, #12]
 80030a0:	e001      	b.n	80030a6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e000      	b.n	80030a8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3720      	adds	r7, #32
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	feeefffc 	.word	0xfeeefffc

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0e7      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b75      	ldr	r3, [pc, #468]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d910      	bls.n	80030fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b72      	ldr	r3, [pc, #456]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 0207 	bic.w	r2, r3, #7
 80030e2:	4970      	ldr	r1, [pc, #448]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b6e      	ldr	r3, [pc, #440]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d001      	beq.n	80030fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0cf      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d010      	beq.n	800312a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	4b66      	ldr	r3, [pc, #408]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003114:	429a      	cmp	r2, r3
 8003116:	d908      	bls.n	800312a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003118:	4b63      	ldr	r3, [pc, #396]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	4960      	ldr	r1, [pc, #384]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d04c      	beq.n	80031d0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d107      	bne.n	800314e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800313e:	4b5a      	ldr	r3, [pc, #360]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d121      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e0a6      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003156:	4b54      	ldr	r3, [pc, #336]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d115      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e09a      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d107      	bne.n	800317e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800316e:	4b4e      	ldr	r3, [pc, #312]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e08e      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e086      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800318e:	4b46      	ldr	r3, [pc, #280]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f023 0203 	bic.w	r2, r3, #3
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	4943      	ldr	r1, [pc, #268]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800319c:	4313      	orrs	r3, r2
 800319e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031a0:	f7fd fe48 	bl	8000e34 <HAL_GetTick>
 80031a4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031a6:	e00a      	b.n	80031be <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031a8:	f7fd fe44 	bl	8000e34 <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e06e      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031be:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 020c 	and.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d1eb      	bne.n	80031a8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d010      	beq.n	80031fe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d208      	bcs.n	80031fe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	492b      	ldr	r1, [pc, #172]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031fe:	4b29      	ldr	r3, [pc, #164]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	d210      	bcs.n	800322e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800320c:	4b25      	ldr	r3, [pc, #148]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 0207 	bic.w	r2, r3, #7
 8003214:	4923      	ldr	r1, [pc, #140]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	4313      	orrs	r3, r2
 800321a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCC_ClockConfig+0x1ec>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	429a      	cmp	r2, r3
 8003228:	d001      	beq.n	800322e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e036      	b.n	800329c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b00      	cmp	r3, #0
 8003238:	d008      	beq.n	800324c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800323a:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	4918      	ldr	r1, [pc, #96]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d009      	beq.n	800326c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003258:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	4910      	ldr	r1, [pc, #64]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800326c:	f000 f824 	bl	80032b8 <HAL_RCC_GetSysClockFreq>
 8003270:	4602      	mov	r2, r0
 8003272:	4b0d      	ldr	r3, [pc, #52]	; (80032a8 <HAL_RCC_ClockConfig+0x1f0>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	f003 030f 	and.w	r3, r3, #15
 800327c:	490b      	ldr	r1, [pc, #44]	; (80032ac <HAL_RCC_ClockConfig+0x1f4>)
 800327e:	5ccb      	ldrb	r3, [r1, r3]
 8003280:	f003 031f 	and.w	r3, r3, #31
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a09      	ldr	r2, [pc, #36]	; (80032b0 <HAL_RCC_ClockConfig+0x1f8>)
 800328a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <HAL_RCC_ClockConfig+0x1fc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f7fd fd7f 	bl	8000d94 <HAL_InitTick>
 8003296:	4603      	mov	r3, r0
 8003298:	72fb      	strb	r3, [r7, #11]

  return status;
 800329a:	7afb      	ldrb	r3, [r7, #11]
}
 800329c:	4618      	mov	r0, r3
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40022000 	.word	0x40022000
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08005294 	.word	0x08005294
 80032b0:	20000000 	.word	0x20000000
 80032b4:	20000004 	.word	0x20000004

080032b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b089      	sub	sp, #36	; 0x24
 80032bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	2300      	movs	r3, #0
 80032c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0303 	and.w	r3, r3, #3
 80032d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_GetSysClockFreq+0x34>
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d121      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d11e      	bne.n	800332a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80032ec:	4b34      	ldr	r3, [pc, #208]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0308 	and.w	r3, r3, #8
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d107      	bne.n	8003308 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80032f8:	4b31      	ldr	r3, [pc, #196]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80032fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	f003 030f 	and.w	r3, r3, #15
 8003304:	61fb      	str	r3, [r7, #28]
 8003306:	e005      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003308:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800331c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d10d      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003328:	e00a      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	2b04      	cmp	r3, #4
 800332e:	d102      	bne.n	8003336 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003330:	4b25      	ldr	r3, [pc, #148]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003332:	61bb      	str	r3, [r7, #24]
 8003334:	e004      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d101      	bne.n	8003340 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800333c:	4b23      	ldr	r3, [pc, #140]	; (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 800333e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d134      	bne.n	80033b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003346:	4b1e      	ldr	r3, [pc, #120]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003348:	68db      	ldr	r3, [r3, #12]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0xa6>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d003      	beq.n	8003364 <HAL_RCC_GetSysClockFreq+0xac>
 800335c:	e005      	b.n	800336a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800335e:	4b1a      	ldr	r3, [pc, #104]	; (80033c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003360:	617b      	str	r3, [r7, #20]
      break;
 8003362:	e005      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003364:	4b19      	ldr	r3, [pc, #100]	; (80033cc <HAL_RCC_GetSysClockFreq+0x114>)
 8003366:	617b      	str	r3, [r7, #20]
      break;
 8003368:	e002      	b.n	8003370 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800336a:	69fb      	ldr	r3, [r7, #28]
 800336c:	617b      	str	r3, [r7, #20]
      break;
 800336e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003370:	4b13      	ldr	r3, [pc, #76]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	3301      	adds	r3, #1
 800337c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800337e:	4b10      	ldr	r3, [pc, #64]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	0a1b      	lsrs	r3, r3, #8
 8003384:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	fb03 f202 	mul.w	r2, r3, r2
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	fbb2 f3f3 	udiv	r3, r2, r3
 8003394:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003398:	68db      	ldr	r3, [r3, #12]
 800339a:	0e5b      	lsrs	r3, r3, #25
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	3301      	adds	r3, #1
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80033b0:	69bb      	ldr	r3, [r7, #24]
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40021000 	.word	0x40021000
 80033c4:	080052a4 	.word	0x080052a4
 80033c8:	00f42400 	.word	0x00f42400
 80033cc:	007a1200 	.word	0x007a1200

080033d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033dc:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d003      	beq.n	80033f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033e8:	f7ff fa26 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 80033ec:	6178      	str	r0, [r7, #20]
 80033ee:	e014      	b.n	800341a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033f4:	4a24      	ldr	r2, [pc, #144]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fa:	6593      	str	r3, [r2, #88]	; 0x58
 80033fc:	4b22      	ldr	r3, [pc, #136]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003400:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003404:	60fb      	str	r3, [r7, #12]
 8003406:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003408:	f7ff fa16 	bl	8002838 <HAL_PWREx_GetVoltageRange>
 800340c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	4a1d      	ldr	r2, [pc, #116]	; (8003488 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003418:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003420:	d10b      	bne.n	800343a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b80      	cmp	r3, #128	; 0x80
 8003426:	d919      	bls.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2ba0      	cmp	r3, #160	; 0xa0
 800342c:	d902      	bls.n	8003434 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800342e:	2302      	movs	r3, #2
 8003430:	613b      	str	r3, [r7, #16]
 8003432:	e013      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003434:	2301      	movs	r3, #1
 8003436:	613b      	str	r3, [r7, #16]
 8003438:	e010      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b80      	cmp	r3, #128	; 0x80
 800343e:	d902      	bls.n	8003446 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003440:	2303      	movs	r3, #3
 8003442:	613b      	str	r3, [r7, #16]
 8003444:	e00a      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2b80      	cmp	r3, #128	; 0x80
 800344a:	d102      	bne.n	8003452 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800344c:	2302      	movs	r3, #2
 800344e:	613b      	str	r3, [r7, #16]
 8003450:	e004      	b.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2b70      	cmp	r3, #112	; 0x70
 8003456:	d101      	bne.n	800345c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003458:	2301      	movs	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800345c:	4b0b      	ldr	r3, [pc, #44]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 0207 	bic.w	r2, r3, #7
 8003464:	4909      	ldr	r1, [pc, #36]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800346c:	4b07      	ldr	r3, [pc, #28]	; (800348c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	429a      	cmp	r2, r3
 8003478:	d001      	beq.n	800347e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40021000 	.word	0x40021000
 800348c:	40022000 	.word	0x40022000

08003490 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003498:	2300      	movs	r3, #0
 800349a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800349c:	2300      	movs	r3, #0
 800349e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d041      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034b4:	d02a      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80034ba:	d824      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c0:	d008      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80034c6:	d81e      	bhi.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034d0:	d010      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d2:	e018      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d4:	4b86      	ldr	r3, [pc, #536]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d6:	68db      	ldr	r3, [r3, #12]
 80034d8:	4a85      	ldr	r2, [pc, #532]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e0:	e015      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3304      	adds	r3, #4
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fabb 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f2:	e00c      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3320      	adds	r3, #32
 80034f8:	2100      	movs	r1, #0
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fba6 	bl	8003c4c <RCCEx_PLLSAI2_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	74fb      	strb	r3, [r7, #19]
      break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800350c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800350e:	7cfb      	ldrb	r3, [r7, #19]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003514:	4b76      	ldr	r3, [pc, #472]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800351a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003522:	4973      	ldr	r1, [pc, #460]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003524:	4313      	orrs	r3, r2
 8003526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800352a:	e001      	b.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	7cfb      	ldrb	r3, [r7, #19]
 800352e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d041      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003544:	d02a      	beq.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003546:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800354a:	d824      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800354c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003550:	d008      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003556:	d81e      	bhi.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d010      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003562:	e018      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003564:	4b62      	ldr	r3, [pc, #392]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4a61      	ldr	r2, [pc, #388]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800356e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003570:	e015      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	3304      	adds	r3, #4
 8003576:	2100      	movs	r1, #0
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fa73 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 800357e:	4603      	mov	r3, r0
 8003580:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003582:	e00c      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3320      	adds	r3, #32
 8003588:	2100      	movs	r1, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fb5e 	bl	8003c4c <RCCEx_PLLSAI2_Config>
 8003590:	4603      	mov	r3, r0
 8003592:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003594:	e003      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	74fb      	strb	r3, [r7, #19]
      break;
 800359a:	e000      	b.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800359c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800359e:	7cfb      	ldrb	r3, [r7, #19]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a4:	4b52      	ldr	r3, [pc, #328]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035b2:	494f      	ldr	r1, [pc, #316]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80035ba:	e001      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80a0 	beq.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035ce:	2300      	movs	r3, #0
 80035d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d2:	4b47      	ldr	r3, [pc, #284]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035de:	2301      	movs	r3, #1
 80035e0:	e000      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035e2:	2300      	movs	r3, #0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e8:	4b41      	ldr	r3, [pc, #260]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ec:	4a40      	ldr	r2, [pc, #256]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6593      	str	r3, [r2, #88]	; 0x58
 80035f4:	4b3e      	ldr	r3, [pc, #248]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fc:	60bb      	str	r3, [r7, #8]
 80035fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003600:	2301      	movs	r3, #1
 8003602:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003604:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800360e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003610:	f7fd fc10 	bl	8000e34 <HAL_GetTick>
 8003614:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003616:	e009      	b.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003618:	f7fd fc0c 	bl	8000e34 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d902      	bls.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	74fb      	strb	r3, [r7, #19]
        break;
 800362a:	e005      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800362c:	4b31      	ldr	r3, [pc, #196]	; (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003634:	2b00      	cmp	r3, #0
 8003636:	d0ef      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003638:	7cfb      	ldrb	r3, [r7, #19]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d15c      	bne.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800363e:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003648:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d01f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	d019      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003666:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003668:	4b21      	ldr	r3, [pc, #132]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366e:	4a20      	ldr	r2, [pc, #128]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003678:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003684:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003688:	4a19      	ldr	r2, [pc, #100]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d016      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369a:	f7fd fbcb 	bl	8000e34 <HAL_GetTick>
 800369e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a0:	e00b      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a2:	f7fd fbc7 	bl	8000e34 <HAL_GetTick>
 80036a6:	4602      	mov	r2, r0
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d902      	bls.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	74fb      	strb	r3, [r7, #19]
            break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0ec      	beq.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036c8:	7cfb      	ldrb	r3, [r7, #19]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ce:	4b08      	ldr	r3, [pc, #32]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80036de:	4904      	ldr	r1, [pc, #16]	; (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e0:	4313      	orrs	r3, r2
 80036e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80036e6:	e009      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036e8:	7cfb      	ldrb	r3, [r7, #19]
 80036ea:	74bb      	strb	r3, [r7, #18]
 80036ec:	e006      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036ee:	bf00      	nop
 80036f0:	40021000 	.word	0x40021000
 80036f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f8:	7cfb      	ldrb	r3, [r7, #19]
 80036fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036fc:	7c7b      	ldrb	r3, [r7, #17]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b9e      	ldr	r3, [pc, #632]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a9d      	ldr	r2, [pc, #628]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800370c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00a      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371a:	4b98      	ldr	r3, [pc, #608]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003720:	f023 0203 	bic.w	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	4994      	ldr	r1, [pc, #592]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	4313      	orrs	r3, r2
 800372c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800373c:	4b8f      	ldr	r3, [pc, #572]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003742:	f023 020c 	bic.w	r2, r3, #12
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374a:	498c      	ldr	r1, [pc, #560]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	4313      	orrs	r3, r2
 800374e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00a      	beq.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800375e:	4b87      	ldr	r3, [pc, #540]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376c:	4983      	ldr	r1, [pc, #524]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	4313      	orrs	r3, r2
 8003770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0308 	and.w	r3, r3, #8
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003780:	4b7e      	ldr	r3, [pc, #504]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003786:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378e:	497b      	ldr	r1, [pc, #492]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003790:	4313      	orrs	r3, r2
 8003792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0310 	and.w	r3, r3, #16
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00a      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	4972      	ldr	r1, [pc, #456]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d00a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c4:	4b6d      	ldr	r3, [pc, #436]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037d2:	496a      	ldr	r1, [pc, #424]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037e6:	4b65      	ldr	r3, [pc, #404]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f4:	4961      	ldr	r1, [pc, #388]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f6:	4313      	orrs	r3, r2
 80037f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00a      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003808:	4b5c      	ldr	r3, [pc, #368]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800380e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003816:	4959      	ldr	r1, [pc, #356]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003818:	4313      	orrs	r3, r2
 800381a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00a      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382a:	4b54      	ldr	r3, [pc, #336]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003830:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003838:	4950      	ldr	r1, [pc, #320]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383a:	4313      	orrs	r3, r2
 800383c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00a      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800384c:	4b4b      	ldr	r3, [pc, #300]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003852:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800385a:	4948      	ldr	r1, [pc, #288]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	4313      	orrs	r3, r2
 800385e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800386e:	4b43      	ldr	r3, [pc, #268]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003870:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387c:	493f      	ldr	r1, [pc, #252]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800388c:	2b00      	cmp	r3, #0
 800388e:	d028      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003890:	4b3a      	ldr	r3, [pc, #232]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003896:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800389e:	4937      	ldr	r1, [pc, #220]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038ae:	d106      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a31      	ldr	r2, [pc, #196]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ba:	60d3      	str	r3, [r2, #12]
 80038bc:	e011      	b.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c6:	d10c      	bne.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3304      	adds	r3, #4
 80038cc:	2101      	movs	r1, #1
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 f8c8 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80038d4:	4603      	mov	r3, r0
 80038d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038d8:	7cfb      	ldrb	r3, [r7, #19]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038de:	7cfb      	ldrb	r3, [r7, #19]
 80038e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d028      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038ee:	4b23      	ldr	r3, [pc, #140]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	491f      	ldr	r1, [pc, #124]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800390c:	d106      	bne.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800390e:	4b1b      	ldr	r3, [pc, #108]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	4a1a      	ldr	r2, [pc, #104]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	e011      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003920:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003924:	d10c      	bne.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3304      	adds	r3, #4
 800392a:	2101      	movs	r1, #1
 800392c:	4618      	mov	r0, r3
 800392e:	f000 f899 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 8003932:	4603      	mov	r3, r0
 8003934:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003936:	7cfb      	ldrb	r3, [r7, #19]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800393c:	7cfb      	ldrb	r3, [r7, #19]
 800393e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800395a:	4908      	ldr	r1, [pc, #32]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800395c:	4313      	orrs	r3, r2
 800395e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800396a:	d109      	bne.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800396c:	4b03      	ldr	r3, [pc, #12]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	4a02      	ldr	r2, [pc, #8]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003976:	60d3      	str	r3, [r2, #12]
 8003978:	e014      	b.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003988:	d10c      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3304      	adds	r3, #4
 800398e:	2101      	movs	r1, #1
 8003990:	4618      	mov	r0, r3
 8003992:	f000 f867 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 8003996:	4603      	mov	r3, r0
 8003998:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399a:	7cfb      	ldrb	r3, [r7, #19]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039a0:	7cfb      	ldrb	r3, [r7, #19]
 80039a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02f      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b0:	4b2b      	ldr	r3, [pc, #172]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039be:	4928      	ldr	r1, [pc, #160]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ce:	d10d      	bne.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	3304      	adds	r3, #4
 80039d4:	2102      	movs	r1, #2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f844 	bl	8003a64 <RCCEx_PLLSAI1_Config>
 80039dc:	4603      	mov	r3, r0
 80039de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e0:	7cfb      	ldrb	r3, [r7, #19]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039e6:	7cfb      	ldrb	r3, [r7, #19]
 80039e8:	74bb      	strb	r3, [r7, #18]
 80039ea:	e011      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3320      	adds	r3, #32
 80039fa:	2102      	movs	r1, #2
 80039fc:	4618      	mov	r0, r3
 80039fe:	f000 f925 	bl	8003c4c <RCCEx_PLLSAI2_Config>
 8003a02:	4603      	mov	r3, r0
 8003a04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a06:	7cfb      	ldrb	r3, [r7, #19]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a0c:	7cfb      	ldrb	r3, [r7, #19]
 8003a0e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a1c:	4b10      	ldr	r3, [pc, #64]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a22:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a2a:	490d      	ldr	r1, [pc, #52]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a3e:	4b08      	ldr	r3, [pc, #32]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a44:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a4e:	4904      	ldr	r1, [pc, #16]	; (8003a60 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a56:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40021000 	.word	0x40021000

08003a64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a72:	4b75      	ldr	r3, [pc, #468]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f003 0303 	and.w	r3, r3, #3
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d018      	beq.n	8003ab0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a7e:	4b72      	ldr	r3, [pc, #456]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	f003 0203 	and.w	r2, r3, #3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
       ||
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a96:	4b6c      	ldr	r3, [pc, #432]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	091b      	lsrs	r3, r3, #4
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d047      	beq.n	8003b3a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	73fb      	strb	r3, [r7, #15]
 8003aae:	e044      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b03      	cmp	r3, #3
 8003ab6:	d018      	beq.n	8003aea <RCCEx_PLLSAI1_Config+0x86>
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d825      	bhi.n	8003b08 <RCCEx_PLLSAI1_Config+0xa4>
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d002      	beq.n	8003ac6 <RCCEx_PLLSAI1_Config+0x62>
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d009      	beq.n	8003ad8 <RCCEx_PLLSAI1_Config+0x74>
 8003ac4:	e020      	b.n	8003b08 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ac6:	4b60      	ldr	r3, [pc, #384]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d11d      	bne.n	8003b0e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ad6:	e01a      	b.n	8003b0e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003ad8:	4b5b      	ldr	r3, [pc, #364]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d116      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ae8:	e013      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aea:	4b57      	ldr	r3, [pc, #348]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10f      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003af6:	4b54      	ldr	r3, [pc, #336]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d109      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b06:	e006      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8003b0c:	e004      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b0e:	bf00      	nop
 8003b10:	e002      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e000      	b.n	8003b18 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b18:	7bfb      	ldrb	r3, [r7, #15]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10d      	bne.n	8003b3a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6819      	ldr	r1, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	430b      	orrs	r3, r1
 8003b34:	4944      	ldr	r1, [pc, #272]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d17d      	bne.n	8003c3c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b40:	4b41      	ldr	r3, [pc, #260]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a40      	ldr	r2, [pc, #256]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b46:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b4c:	f7fd f972 	bl	8000e34 <HAL_GetTick>
 8003b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b52:	e009      	b.n	8003b68 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b54:	f7fd f96e 	bl	8000e34 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d902      	bls.n	8003b68 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	73fb      	strb	r3, [r7, #15]
        break;
 8003b66:	e005      	b.n	8003b74 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b68:	4b37      	ldr	r3, [pc, #220]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1ef      	bne.n	8003b54 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d160      	bne.n	8003c3c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d111      	bne.n	8003ba4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6892      	ldr	r2, [r2, #8]
 8003b90:	0211      	lsls	r1, r2, #8
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	68d2      	ldr	r2, [r2, #12]
 8003b96:	0912      	lsrs	r2, r2, #4
 8003b98:	0452      	lsls	r2, r2, #17
 8003b9a:	430a      	orrs	r2, r1
 8003b9c:	492a      	ldr	r1, [pc, #168]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
 8003ba2:	e027      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	2b01      	cmp	r3, #1
 8003ba8:	d112      	bne.n	8003bd0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003baa:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003bb2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6892      	ldr	r2, [r2, #8]
 8003bba:	0211      	lsls	r1, r2, #8
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	6912      	ldr	r2, [r2, #16]
 8003bc0:	0852      	lsrs	r2, r2, #1
 8003bc2:	3a01      	subs	r2, #1
 8003bc4:	0552      	lsls	r2, r2, #21
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	491f      	ldr	r1, [pc, #124]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]
 8003bce:	e011      	b.n	8003bf4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003bd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6892      	ldr	r2, [r2, #8]
 8003be0:	0211      	lsls	r1, r2, #8
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	6952      	ldr	r2, [r2, #20]
 8003be6:	0852      	lsrs	r2, r2, #1
 8003be8:	3a01      	subs	r2, #1
 8003bea:	0652      	lsls	r2, r2, #25
 8003bec:	430a      	orrs	r2, r1
 8003bee:	4916      	ldr	r1, [pc, #88]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bf4:	4b14      	ldr	r3, [pc, #80]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a13      	ldr	r2, [pc, #76]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bfe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd f918 	bl	8000e34 <HAL_GetTick>
 8003c04:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c06:	e009      	b.n	8003c1c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c08:	f7fd f914 	bl	8000e34 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d902      	bls.n	8003c1c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	73fb      	strb	r3, [r7, #15]
          break;
 8003c1a:	e005      	b.n	8003c28 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c1c:	4b0a      	ldr	r3, [pc, #40]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d0ef      	beq.n	8003c08 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c28:	7bfb      	ldrb	r3, [r7, #15]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d106      	bne.n	8003c3c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	4904      	ldr	r1, [pc, #16]	; (8003c48 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000

08003c4c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c56:	2300      	movs	r3, #0
 8003c58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c5a:	4b6a      	ldr	r3, [pc, #424]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d018      	beq.n	8003c98 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c66:	4b67      	ldr	r3, [pc, #412]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0203 	and.w	r2, r3, #3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d10d      	bne.n	8003c92 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
       ||
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d009      	beq.n	8003c92 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c7e:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	091b      	lsrs	r3, r3, #4
 8003c84:	f003 0307 	and.w	r3, r3, #7
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
       ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d047      	beq.n	8003d22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	73fb      	strb	r3, [r7, #15]
 8003c96:	e044      	b.n	8003d22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b03      	cmp	r3, #3
 8003c9e:	d018      	beq.n	8003cd2 <RCCEx_PLLSAI2_Config+0x86>
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d825      	bhi.n	8003cf0 <RCCEx_PLLSAI2_Config+0xa4>
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d002      	beq.n	8003cae <RCCEx_PLLSAI2_Config+0x62>
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d009      	beq.n	8003cc0 <RCCEx_PLLSAI2_Config+0x74>
 8003cac:	e020      	b.n	8003cf0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cae:	4b55      	ldr	r3, [pc, #340]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11d      	bne.n	8003cf6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cbe:	e01a      	b.n	8003cf6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cc0:	4b50      	ldr	r3, [pc, #320]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d116      	bne.n	8003cfa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd0:	e013      	b.n	8003cfa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cd2:	4b4c      	ldr	r3, [pc, #304]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10f      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003cde:	4b49      	ldr	r3, [pc, #292]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d109      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cee:	e006      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf4:	e004      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cf6:	bf00      	nop
 8003cf8:	e002      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e000      	b.n	8003d00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfe:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10d      	bne.n	8003d22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d06:	4b3f      	ldr	r3, [pc, #252]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	430b      	orrs	r3, r1
 8003d1c:	4939      	ldr	r1, [pc, #228]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d22:	7bfb      	ldrb	r3, [r7, #15]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d167      	bne.n	8003df8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d28:	4b36      	ldr	r3, [pc, #216]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a35      	ldr	r2, [pc, #212]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d34:	f7fd f87e 	bl	8000e34 <HAL_GetTick>
 8003d38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d3a:	e009      	b.n	8003d50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d3c:	f7fd f87a 	bl	8000e34 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d902      	bls.n	8003d50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	73fb      	strb	r3, [r7, #15]
        break;
 8003d4e:	e005      	b.n	8003d5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d50:	4b2c      	ldr	r3, [pc, #176]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1ef      	bne.n	8003d3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d5c:	7bfb      	ldrb	r3, [r7, #15]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d14a      	bne.n	8003df8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d111      	bne.n	8003d8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d68:	4b26      	ldr	r3, [pc, #152]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6a:	695b      	ldr	r3, [r3, #20]
 8003d6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6892      	ldr	r2, [r2, #8]
 8003d78:	0211      	lsls	r1, r2, #8
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	68d2      	ldr	r2, [r2, #12]
 8003d7e:	0912      	lsrs	r2, r2, #4
 8003d80:	0452      	lsls	r2, r2, #17
 8003d82:	430a      	orrs	r2, r1
 8003d84:	491f      	ldr	r1, [pc, #124]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	614b      	str	r3, [r1, #20]
 8003d8a:	e011      	b.n	8003db0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d8c:	4b1d      	ldr	r3, [pc, #116]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003d94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	6892      	ldr	r2, [r2, #8]
 8003d9c:	0211      	lsls	r1, r2, #8
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6912      	ldr	r2, [r2, #16]
 8003da2:	0852      	lsrs	r2, r2, #1
 8003da4:	3a01      	subs	r2, #1
 8003da6:	0652      	lsls	r2, r2, #25
 8003da8:	430a      	orrs	r2, r1
 8003daa:	4916      	ldr	r1, [pc, #88]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a13      	ldr	r2, [pc, #76]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbc:	f7fd f83a 	bl	8000e34 <HAL_GetTick>
 8003dc0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dc2:	e009      	b.n	8003dd8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dc4:	f7fd f836 	bl	8000e34 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d902      	bls.n	8003dd8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	73fb      	strb	r3, [r7, #15]
          break;
 8003dd6:	e005      	b.n	8003de4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dd8:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0ef      	beq.n	8003dc4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003de4:	7bfb      	ldrb	r3, [r7, #15]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dec:	695a      	ldr	r2, [r3, #20]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4904      	ldr	r1, [pc, #16]	; (8003e04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df4:	4313      	orrs	r3, r2
 8003df6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003df8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40021000 	.word	0x40021000

08003e08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b082      	sub	sp, #8
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e049      	b.n	8003eae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d106      	bne.n	8003e34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7fc fe92 	bl	8000b58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	3304      	adds	r3, #4
 8003e44:	4619      	mov	r1, r3
 8003e46:	4610      	mov	r0, r2
 8003e48:	f000 fd16 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3708      	adds	r7, #8
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d001      	beq.n	8003ed0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e04f      	b.n	8003f70 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2202      	movs	r2, #2
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68da      	ldr	r2, [r3, #12]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f042 0201 	orr.w	r2, r2, #1
 8003ee6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a23      	ldr	r2, [pc, #140]	; (8003f7c <HAL_TIM_Base_Start_IT+0xc4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01d      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efa:	d018      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_TIM_Base_Start_IT+0xc8>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d013      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	; (8003f84 <HAL_TIM_Base_Start_IT+0xcc>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00e      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_TIM_Base_Start_IT+0xd0>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d009      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	; (8003f8c <HAL_TIM_Base_Start_IT+0xd4>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d004      	beq.n	8003f2e <HAL_TIM_Base_Start_IT+0x76>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d115      	bne.n	8003f5a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f36:	4013      	ands	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2b06      	cmp	r3, #6
 8003f3e:	d015      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0xb4>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f46:	d011      	beq.n	8003f6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f58:	e008      	b.n	8003f6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	601a      	str	r2, [r3, #0]
 8003f6a:	e000      	b.n	8003f6e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f6c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40000400 	.word	0x40000400
 8003f84:	40000800 	.word	0x40000800
 8003f88:	40000c00 	.word	0x40000c00
 8003f8c:	40013400 	.word	0x40013400
 8003f90:	40014000 	.word	0x40014000
 8003f94:	00010007 	.word	0x00010007

08003f98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b082      	sub	sp, #8
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e049      	b.n	800403e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d106      	bne.n	8003fc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f841 	bl	8004046 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3304      	adds	r3, #4
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	4610      	mov	r0, r2
 8003fd8:	f000 fc4e 	bl	8004878 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
	...

0800405c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_TIM_PWM_Start+0x24>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b01      	cmp	r3, #1
 8004076:	bf14      	ite	ne
 8004078:	2301      	movne	r3, #1
 800407a:	2300      	moveq	r3, #0
 800407c:	b2db      	uxtb	r3, r3
 800407e:	e03c      	b.n	80040fa <HAL_TIM_PWM_Start+0x9e>
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	2b04      	cmp	r3, #4
 8004084:	d109      	bne.n	800409a <HAL_TIM_PWM_Start+0x3e>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b01      	cmp	r3, #1
 8004090:	bf14      	ite	ne
 8004092:	2301      	movne	r3, #1
 8004094:	2300      	moveq	r3, #0
 8004096:	b2db      	uxtb	r3, r3
 8004098:	e02f      	b.n	80040fa <HAL_TIM_PWM_Start+0x9e>
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	2b08      	cmp	r3, #8
 800409e:	d109      	bne.n	80040b4 <HAL_TIM_PWM_Start+0x58>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	bf14      	ite	ne
 80040ac:	2301      	movne	r3, #1
 80040ae:	2300      	moveq	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	e022      	b.n	80040fa <HAL_TIM_PWM_Start+0x9e>
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	2b0c      	cmp	r3, #12
 80040b8:	d109      	bne.n	80040ce <HAL_TIM_PWM_Start+0x72>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	bf14      	ite	ne
 80040c6:	2301      	movne	r3, #1
 80040c8:	2300      	moveq	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	e015      	b.n	80040fa <HAL_TIM_PWM_Start+0x9e>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b10      	cmp	r3, #16
 80040d2:	d109      	bne.n	80040e8 <HAL_TIM_PWM_Start+0x8c>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	bf14      	ite	ne
 80040e0:	2301      	movne	r3, #1
 80040e2:	2300      	moveq	r3, #0
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	e008      	b.n	80040fa <HAL_TIM_PWM_Start+0x9e>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	bf14      	ite	ne
 80040f4:	2301      	movne	r3, #1
 80040f6:	2300      	moveq	r3, #0
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e09c      	b.n	800423c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d104      	bne.n	8004112 <HAL_TIM_PWM_Start+0xb6>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004110:	e023      	b.n	800415a <HAL_TIM_PWM_Start+0xfe>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	2b04      	cmp	r3, #4
 8004116:	d104      	bne.n	8004122 <HAL_TIM_PWM_Start+0xc6>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2202      	movs	r2, #2
 800411c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004120:	e01b      	b.n	800415a <HAL_TIM_PWM_Start+0xfe>
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	2b08      	cmp	r3, #8
 8004126:	d104      	bne.n	8004132 <HAL_TIM_PWM_Start+0xd6>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2202      	movs	r2, #2
 800412c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004130:	e013      	b.n	800415a <HAL_TIM_PWM_Start+0xfe>
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b0c      	cmp	r3, #12
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Start+0xe6>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004140:	e00b      	b.n	800415a <HAL_TIM_PWM_Start+0xfe>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b10      	cmp	r3, #16
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Start+0xf6>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2202      	movs	r2, #2
 800414c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004150:	e003      	b.n	800415a <HAL_TIM_PWM_Start+0xfe>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2202      	movs	r2, #2
 8004156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2201      	movs	r2, #1
 8004160:	6839      	ldr	r1, [r7, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f000 ff92 	bl	800508c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a35      	ldr	r2, [pc, #212]	; (8004244 <HAL_TIM_PWM_Start+0x1e8>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d013      	beq.n	800419a <HAL_TIM_PWM_Start+0x13e>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a34      	ldr	r2, [pc, #208]	; (8004248 <HAL_TIM_PWM_Start+0x1ec>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d00e      	beq.n	800419a <HAL_TIM_PWM_Start+0x13e>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a32      	ldr	r2, [pc, #200]	; (800424c <HAL_TIM_PWM_Start+0x1f0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d009      	beq.n	800419a <HAL_TIM_PWM_Start+0x13e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a31      	ldr	r2, [pc, #196]	; (8004250 <HAL_TIM_PWM_Start+0x1f4>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d004      	beq.n	800419a <HAL_TIM_PWM_Start+0x13e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a2f      	ldr	r2, [pc, #188]	; (8004254 <HAL_TIM_PWM_Start+0x1f8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d101      	bne.n	800419e <HAL_TIM_PWM_Start+0x142>
 800419a:	2301      	movs	r3, #1
 800419c:	e000      	b.n	80041a0 <HAL_TIM_PWM_Start+0x144>
 800419e:	2300      	movs	r3, #0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041b2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a22      	ldr	r2, [pc, #136]	; (8004244 <HAL_TIM_PWM_Start+0x1e8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d01d      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c6:	d018      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a22      	ldr	r2, [pc, #136]	; (8004258 <HAL_TIM_PWM_Start+0x1fc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d013      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a21      	ldr	r2, [pc, #132]	; (800425c <HAL_TIM_PWM_Start+0x200>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d00e      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a1f      	ldr	r2, [pc, #124]	; (8004260 <HAL_TIM_PWM_Start+0x204>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d009      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a17      	ldr	r2, [pc, #92]	; (8004248 <HAL_TIM_PWM_Start+0x1ec>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d004      	beq.n	80041fa <HAL_TIM_PWM_Start+0x19e>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a15      	ldr	r2, [pc, #84]	; (800424c <HAL_TIM_PWM_Start+0x1f0>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d115      	bne.n	8004226 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	689a      	ldr	r2, [r3, #8]
 8004200:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_TIM_PWM_Start+0x208>)
 8004202:	4013      	ands	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b06      	cmp	r3, #6
 800420a:	d015      	beq.n	8004238 <HAL_TIM_PWM_Start+0x1dc>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004212:	d011      	beq.n	8004238 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004224:	e008      	b.n	8004238 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e000      	b.n	800423a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	40012c00 	.word	0x40012c00
 8004248:	40013400 	.word	0x40013400
 800424c:	40014000 	.word	0x40014000
 8004250:	40014400 	.word	0x40014400
 8004254:	40014800 	.word	0x40014800
 8004258:	40000400 	.word	0x40000400
 800425c:	40000800 	.word	0x40000800
 8004260:	40000c00 	.word	0x40000c00
 8004264:	00010007 	.word	0x00010007

08004268 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d020      	beq.n	80042cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01b      	beq.n	80042cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0202 	mvn.w	r2, #2
 800429c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fac1 	bl	800483a <HAL_TIM_IC_CaptureCallback>
 80042b8:	e005      	b.n	80042c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fab3 	bl	8004826 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f000 fac4 	bl	800484e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f003 0304 	and.w	r3, r3, #4
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d020      	beq.n	8004318 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d01b      	beq.n	8004318 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f06f 0204 	mvn.w	r2, #4
 80042e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2202      	movs	r2, #2
 80042ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d003      	beq.n	8004306 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 fa9b 	bl	800483a <HAL_TIM_IC_CaptureCallback>
 8004304:	e005      	b.n	8004312 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 fa8d 	bl	8004826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800430c:	6878      	ldr	r0, [r7, #4]
 800430e:	f000 fa9e 	bl	800484e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d020      	beq.n	8004364 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f003 0308 	and.w	r3, r3, #8
 8004328:	2b00      	cmp	r3, #0
 800432a:	d01b      	beq.n	8004364 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f06f 0208 	mvn.w	r2, #8
 8004334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2204      	movs	r2, #4
 800433a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	f003 0303 	and.w	r3, r3, #3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 fa75 	bl	800483a <HAL_TIM_IC_CaptureCallback>
 8004350:	e005      	b.n	800435e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 fa67 	bl	8004826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa78 	bl	800484e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0310 	and.w	r3, r3, #16
 800436a:	2b00      	cmp	r3, #0
 800436c:	d020      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 0310 	and.w	r3, r3, #16
 8004374:	2b00      	cmp	r3, #0
 8004376:	d01b      	beq.n	80043b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f06f 0210 	mvn.w	r2, #16
 8004380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2208      	movs	r2, #8
 8004386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fa4f 	bl	800483a <HAL_TIM_IC_CaptureCallback>
 800439c:	e005      	b.n	80043aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 fa41 	bl	8004826 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fa52 	bl	800484e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	f003 0301 	and.w	r3, r3, #1
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d007      	beq.n	80043d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f06f 0201 	mvn.w	r2, #1
 80043cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f7fc fa00 	bl	80007d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00c      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d007      	beq.n	80043f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80043f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 ff02 	bl	80051fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00c      	beq.n	800441c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004408:	2b00      	cmp	r3, #0
 800440a:	d007      	beq.n	800441c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fefa 	bl	8005210 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00c      	beq.n	8004440 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b00      	cmp	r3, #0
 800442e:	d007      	beq.n	8004440 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fa11 	bl	8004862 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 0320 	and.w	r3, r3, #32
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f003 0320 	and.w	r3, r3, #32
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f06f 0220 	mvn.w	r2, #32
 800445c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 fec2 	bl	80051e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b086      	sub	sp, #24
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004478:	2300      	movs	r3, #0
 800447a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004482:	2b01      	cmp	r3, #1
 8004484:	d101      	bne.n	800448a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004486:	2302      	movs	r3, #2
 8004488:	e0ff      	b.n	800468a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b14      	cmp	r3, #20
 8004496:	f200 80f0 	bhi.w	800467a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044f5 	.word	0x080044f5
 80044a4:	0800467b 	.word	0x0800467b
 80044a8:	0800467b 	.word	0x0800467b
 80044ac:	0800467b 	.word	0x0800467b
 80044b0:	08004535 	.word	0x08004535
 80044b4:	0800467b 	.word	0x0800467b
 80044b8:	0800467b 	.word	0x0800467b
 80044bc:	0800467b 	.word	0x0800467b
 80044c0:	08004577 	.word	0x08004577
 80044c4:	0800467b 	.word	0x0800467b
 80044c8:	0800467b 	.word	0x0800467b
 80044cc:	0800467b 	.word	0x0800467b
 80044d0:	080045b7 	.word	0x080045b7
 80044d4:	0800467b 	.word	0x0800467b
 80044d8:	0800467b 	.word	0x0800467b
 80044dc:	0800467b 	.word	0x0800467b
 80044e0:	080045f9 	.word	0x080045f9
 80044e4:	0800467b 	.word	0x0800467b
 80044e8:	0800467b 	.word	0x0800467b
 80044ec:	0800467b 	.word	0x0800467b
 80044f0:	08004639 	.word	0x08004639
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fa56 	bl	80049ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699a      	ldr	r2, [r3, #24]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6999      	ldr	r1, [r3, #24]
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	619a      	str	r2, [r3, #24]
      break;
 8004532:	e0a5      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fac6 	bl	8004acc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	699a      	ldr	r2, [r3, #24]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6999      	ldr	r1, [r3, #24]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	619a      	str	r2, [r3, #24]
      break;
 8004574:	e084      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68b9      	ldr	r1, [r7, #8]
 800457c:	4618      	mov	r0, r3
 800457e:	f000 fb2f 	bl	8004be0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0208 	orr.w	r2, r2, #8
 8004590:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0204 	bic.w	r2, r2, #4
 80045a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	69d9      	ldr	r1, [r3, #28]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	61da      	str	r2, [r3, #28]
      break;
 80045b4:	e064      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	68b9      	ldr	r1, [r7, #8]
 80045bc:	4618      	mov	r0, r3
 80045be:	f000 fb97 	bl	8004cf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	69da      	ldr	r2, [r3, #28]
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	69d9      	ldr	r1, [r3, #28]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	430a      	orrs	r2, r1
 80045f4:	61da      	str	r2, [r3, #28]
      break;
 80045f6:	e043      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 fbe0 	bl	8004dc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f042 0208 	orr.w	r2, r2, #8
 8004612:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0204 	bic.w	r2, r2, #4
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	430a      	orrs	r2, r1
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004636:	e023      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68b9      	ldr	r1, [r7, #8]
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc24 	bl	8004e8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004652:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004662:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	021a      	lsls	r2, r3, #8
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004678:	e002      	b.n	8004680 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	75fb      	strb	r3, [r7, #23]
      break;
 800467e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	2200      	movs	r2, #0
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004688:	7dfb      	ldrb	r3, [r7, #23]
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop

08004694 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d101      	bne.n	80046b0 <HAL_TIM_ConfigClockSource+0x1c>
 80046ac:	2302      	movs	r3, #2
 80046ae:	e0b6      	b.n	800481e <HAL_TIM_ConfigClockSource+0x18a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80046d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046ec:	d03e      	beq.n	800476c <HAL_TIM_ConfigClockSource+0xd8>
 80046ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f2:	f200 8087 	bhi.w	8004804 <HAL_TIM_ConfigClockSource+0x170>
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046fa:	f000 8086 	beq.w	800480a <HAL_TIM_ConfigClockSource+0x176>
 80046fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004702:	d87f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 8004704:	2b70      	cmp	r3, #112	; 0x70
 8004706:	d01a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0xaa>
 8004708:	2b70      	cmp	r3, #112	; 0x70
 800470a:	d87b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 800470c:	2b60      	cmp	r3, #96	; 0x60
 800470e:	d050      	beq.n	80047b2 <HAL_TIM_ConfigClockSource+0x11e>
 8004710:	2b60      	cmp	r3, #96	; 0x60
 8004712:	d877      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 8004714:	2b50      	cmp	r3, #80	; 0x50
 8004716:	d03c      	beq.n	8004792 <HAL_TIM_ConfigClockSource+0xfe>
 8004718:	2b50      	cmp	r3, #80	; 0x50
 800471a:	d873      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 800471c:	2b40      	cmp	r3, #64	; 0x40
 800471e:	d058      	beq.n	80047d2 <HAL_TIM_ConfigClockSource+0x13e>
 8004720:	2b40      	cmp	r3, #64	; 0x40
 8004722:	d86f      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d064      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15e>
 8004728:	2b30      	cmp	r3, #48	; 0x30
 800472a:	d86b      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d060      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15e>
 8004730:	2b20      	cmp	r3, #32
 8004732:	d867      	bhi.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
 8004734:	2b00      	cmp	r3, #0
 8004736:	d05c      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15e>
 8004738:	2b10      	cmp	r3, #16
 800473a:	d05a      	beq.n	80047f2 <HAL_TIM_ConfigClockSource+0x15e>
 800473c:	e062      	b.n	8004804 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800474e:	f000 fc7d 	bl	800504c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004760:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	609a      	str	r2, [r3, #8]
      break;
 800476a:	e04f      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800477c:	f000 fc66 	bl	800504c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	689a      	ldr	r2, [r3, #8]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800478e:	609a      	str	r2, [r3, #8]
      break;
 8004790:	e03c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800479e:	461a      	mov	r2, r3
 80047a0:	f000 fbda 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2150      	movs	r1, #80	; 0x50
 80047aa:	4618      	mov	r0, r3
 80047ac:	f000 fc33 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 80047b0:	e02c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80047be:	461a      	mov	r2, r3
 80047c0:	f000 fbf9 	bl	8004fb6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2160      	movs	r1, #96	; 0x60
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fc23 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 80047d0:	e01c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80047de:	461a      	mov	r2, r3
 80047e0:	f000 fbba 	bl	8004f58 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2140      	movs	r1, #64	; 0x40
 80047ea:	4618      	mov	r0, r3
 80047ec:	f000 fc13 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 80047f0:	e00c      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4619      	mov	r1, r3
 80047fc:	4610      	mov	r0, r2
 80047fe:	f000 fc0a 	bl	8005016 <TIM_ITRx_SetConfig>
      break;
 8004802:	e003      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004804:	2301      	movs	r3, #1
 8004806:	73fb      	strb	r3, [r7, #15]
      break;
 8004808:	e000      	b.n	800480c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800480a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800481c:	7bfb      	ldrb	r3, [r7, #15]
}
 800481e:	4618      	mov	r0, r3
 8004820:	3710      	adds	r7, #16
 8004822:	46bd      	mov	sp, r7
 8004824:	bd80      	pop	{r7, pc}

08004826 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800484e:	b480      	push	{r7}
 8004850:	b083      	sub	sp, #12
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004856:	bf00      	nop
 8004858:	370c      	adds	r7, #12
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr

08004862 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	4a40      	ldr	r2, [pc, #256]	; (800498c <TIM_Base_SetConfig+0x114>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d013      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d00f      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a3d      	ldr	r2, [pc, #244]	; (8004990 <TIM_Base_SetConfig+0x118>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d00b      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a3c      	ldr	r2, [pc, #240]	; (8004994 <TIM_Base_SetConfig+0x11c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d007      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a3b      	ldr	r2, [pc, #236]	; (8004998 <TIM_Base_SetConfig+0x120>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3a      	ldr	r2, [pc, #232]	; (800499c <TIM_Base_SetConfig+0x124>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d108      	bne.n	80048ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a2f      	ldr	r2, [pc, #188]	; (800498c <TIM_Base_SetConfig+0x114>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d01f      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d8:	d01b      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a2c      	ldr	r2, [pc, #176]	; (8004990 <TIM_Base_SetConfig+0x118>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d017      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a2b      	ldr	r2, [pc, #172]	; (8004994 <TIM_Base_SetConfig+0x11c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2a      	ldr	r2, [pc, #168]	; (8004998 <TIM_Base_SetConfig+0x120>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d00f      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a29      	ldr	r2, [pc, #164]	; (800499c <TIM_Base_SetConfig+0x124>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00b      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a28      	ldr	r2, [pc, #160]	; (80049a0 <TIM_Base_SetConfig+0x128>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a27      	ldr	r2, [pc, #156]	; (80049a4 <TIM_Base_SetConfig+0x12c>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_Base_SetConfig+0x9a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <TIM_Base_SetConfig+0x130>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a10      	ldr	r2, [pc, #64]	; (800498c <TIM_Base_SetConfig+0x114>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0xf8>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <TIM_Base_SetConfig+0x124>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0xf8>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a11      	ldr	r2, [pc, #68]	; (80049a0 <TIM_Base_SetConfig+0x128>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0xf8>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a10      	ldr	r2, [pc, #64]	; (80049a4 <TIM_Base_SetConfig+0x12c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0xf8>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a0f      	ldr	r2, [pc, #60]	; (80049a8 <TIM_Base_SetConfig+0x130>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d103      	bne.n	8004978 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	615a      	str	r2, [r3, #20]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	40012c00 	.word	0x40012c00
 8004990:	40000400 	.word	0x40000400
 8004994:	40000800 	.word	0x40000800
 8004998:	40000c00 	.word	0x40000c00
 800499c:	40013400 	.word	0x40013400
 80049a0:	40014000 	.word	0x40014000
 80049a4:	40014400 	.word	0x40014400
 80049a8:	40014800 	.word	0x40014800

080049ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b087      	sub	sp, #28
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
 80049b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a1b      	ldr	r3, [r3, #32]
 80049ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a1b      	ldr	r3, [r3, #32]
 80049c0:	f023 0201 	bic.w	r2, r3, #1
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0303 	bic.w	r3, r3, #3
 80049e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	f023 0302 	bic.w	r3, r3, #2
 80049f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	697a      	ldr	r2, [r7, #20]
 8004a00:	4313      	orrs	r3, r2
 8004a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a2c      	ldr	r2, [pc, #176]	; (8004ab8 <TIM_OC1_SetConfig+0x10c>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00f      	beq.n	8004a2c <TIM_OC1_SetConfig+0x80>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a2b      	ldr	r2, [pc, #172]	; (8004abc <TIM_OC1_SetConfig+0x110>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_OC1_SetConfig+0x80>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a2a      	ldr	r2, [pc, #168]	; (8004ac0 <TIM_OC1_SetConfig+0x114>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_OC1_SetConfig+0x80>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a29      	ldr	r2, [pc, #164]	; (8004ac4 <TIM_OC1_SetConfig+0x118>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_OC1_SetConfig+0x80>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a28      	ldr	r2, [pc, #160]	; (8004ac8 <TIM_OC1_SetConfig+0x11c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d10c      	bne.n	8004a46 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f023 0308 	bic.w	r3, r3, #8
 8004a32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f023 0304 	bic.w	r3, r3, #4
 8004a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <TIM_OC1_SetConfig+0x10c>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d00f      	beq.n	8004a6e <TIM_OC1_SetConfig+0xc2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <TIM_OC1_SetConfig+0x110>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d00b      	beq.n	8004a6e <TIM_OC1_SetConfig+0xc2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a19      	ldr	r2, [pc, #100]	; (8004ac0 <TIM_OC1_SetConfig+0x114>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d007      	beq.n	8004a6e <TIM_OC1_SetConfig+0xc2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC1_SetConfig+0x118>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d003      	beq.n	8004a6e <TIM_OC1_SetConfig+0xc2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC1_SetConfig+0x11c>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d111      	bne.n	8004a92 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	699b      	ldr	r3, [r3, #24]
 8004a8c:	693a      	ldr	r2, [r7, #16]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685a      	ldr	r2, [r3, #4]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	621a      	str	r2, [r3, #32]
}
 8004aac:	bf00      	nop
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f023 0210 	bic.w	r2, r3, #16
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	68fa      	ldr	r2, [r7, #12]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	f023 0320 	bic.w	r3, r3, #32
 8004b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	697a      	ldr	r2, [r7, #20]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	4a28      	ldr	r2, [pc, #160]	; (8004bcc <TIM_OC2_SetConfig+0x100>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d003      	beq.n	8004b38 <TIM_OC2_SetConfig+0x6c>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4a27      	ldr	r2, [pc, #156]	; (8004bd0 <TIM_OC2_SetConfig+0x104>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10d      	bne.n	8004b54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	68db      	ldr	r3, [r3, #12]
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	697a      	ldr	r2, [r7, #20]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a1d      	ldr	r2, [pc, #116]	; (8004bcc <TIM_OC2_SetConfig+0x100>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d00f      	beq.n	8004b7c <TIM_OC2_SetConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a1c      	ldr	r2, [pc, #112]	; (8004bd0 <TIM_OC2_SetConfig+0x104>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00b      	beq.n	8004b7c <TIM_OC2_SetConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	4a1b      	ldr	r2, [pc, #108]	; (8004bd4 <TIM_OC2_SetConfig+0x108>)
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d007      	beq.n	8004b7c <TIM_OC2_SetConfig+0xb0>
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4a1a      	ldr	r2, [pc, #104]	; (8004bd8 <TIM_OC2_SetConfig+0x10c>)
 8004b70:	4293      	cmp	r3, r2
 8004b72:	d003      	beq.n	8004b7c <TIM_OC2_SetConfig+0xb0>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <TIM_OC2_SetConfig+0x110>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d113      	bne.n	8004ba4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	695b      	ldr	r3, [r3, #20]
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	4313      	orrs	r3, r2
 8004b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	685a      	ldr	r2, [r3, #4]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	621a      	str	r2, [r3, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	371c      	adds	r7, #28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	40012c00 	.word	0x40012c00
 8004bd0:	40013400 	.word	0x40013400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40014400 	.word	0x40014400
 8004bdc:	40014800 	.word	0x40014800

08004be0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b087      	sub	sp, #28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69db      	ldr	r3, [r3, #28]
 8004c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0303 	bic.w	r3, r3, #3
 8004c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	021b      	lsls	r3, r3, #8
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a27      	ldr	r2, [pc, #156]	; (8004cdc <TIM_OC3_SetConfig+0xfc>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d003      	beq.n	8004c4a <TIM_OC3_SetConfig+0x6a>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <TIM_OC3_SetConfig+0x100>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d10d      	bne.n	8004c66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a1c      	ldr	r2, [pc, #112]	; (8004cdc <TIM_OC3_SetConfig+0xfc>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00f      	beq.n	8004c8e <TIM_OC3_SetConfig+0xae>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <TIM_OC3_SetConfig+0x100>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d00b      	beq.n	8004c8e <TIM_OC3_SetConfig+0xae>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <TIM_OC3_SetConfig+0x104>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d007      	beq.n	8004c8e <TIM_OC3_SetConfig+0xae>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a19      	ldr	r2, [pc, #100]	; (8004ce8 <TIM_OC3_SetConfig+0x108>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d003      	beq.n	8004c8e <TIM_OC3_SetConfig+0xae>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a18      	ldr	r2, [pc, #96]	; (8004cec <TIM_OC3_SetConfig+0x10c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d113      	bne.n	8004cb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	011b      	lsls	r3, r3, #4
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	011b      	lsls	r3, r3, #4
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	697a      	ldr	r2, [r7, #20]
 8004cce:	621a      	str	r2, [r3, #32]
}
 8004cd0:	bf00      	nop
 8004cd2:	371c      	adds	r7, #28
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	40012c00 	.word	0x40012c00
 8004ce0:	40013400 	.word	0x40013400
 8004ce4:	40014000 	.word	0x40014000
 8004ce8:	40014400 	.word	0x40014400
 8004cec:	40014800 	.word	0x40014800

08004cf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b087      	sub	sp, #28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a1b      	ldr	r3, [r3, #32]
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	021b      	lsls	r3, r3, #8
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	031b      	lsls	r3, r3, #12
 8004d46:	693a      	ldr	r2, [r7, #16]
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a18      	ldr	r2, [pc, #96]	; (8004db0 <TIM_OC4_SetConfig+0xc0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00f      	beq.n	8004d74 <TIM_OC4_SetConfig+0x84>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4a17      	ldr	r2, [pc, #92]	; (8004db4 <TIM_OC4_SetConfig+0xc4>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d00b      	beq.n	8004d74 <TIM_OC4_SetConfig+0x84>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a16      	ldr	r2, [pc, #88]	; (8004db8 <TIM_OC4_SetConfig+0xc8>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d007      	beq.n	8004d74 <TIM_OC4_SetConfig+0x84>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a15      	ldr	r2, [pc, #84]	; (8004dbc <TIM_OC4_SetConfig+0xcc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d003      	beq.n	8004d74 <TIM_OC4_SetConfig+0x84>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a14      	ldr	r2, [pc, #80]	; (8004dc0 <TIM_OC4_SetConfig+0xd0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d109      	bne.n	8004d88 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	019b      	lsls	r3, r3, #6
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	621a      	str	r2, [r3, #32]
}
 8004da2:	bf00      	nop
 8004da4:	371c      	adds	r7, #28
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	40012c00 	.word	0x40012c00
 8004db4:	40013400 	.word	0x40013400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800

08004dc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	041b      	lsls	r3, r3, #16
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4313      	orrs	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <TIM_OC5_SetConfig+0xb4>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d00f      	beq.n	8004e3e <TIM_OC5_SetConfig+0x7a>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <TIM_OC5_SetConfig+0xb8>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d00b      	beq.n	8004e3e <TIM_OC5_SetConfig+0x7a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a15      	ldr	r2, [pc, #84]	; (8004e80 <TIM_OC5_SetConfig+0xbc>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d007      	beq.n	8004e3e <TIM_OC5_SetConfig+0x7a>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a14      	ldr	r2, [pc, #80]	; (8004e84 <TIM_OC5_SetConfig+0xc0>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d003      	beq.n	8004e3e <TIM_OC5_SetConfig+0x7a>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a13      	ldr	r2, [pc, #76]	; (8004e88 <TIM_OC5_SetConfig+0xc4>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d109      	bne.n	8004e52 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e44:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685a      	ldr	r2, [r3, #4]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	621a      	str	r2, [r3, #32]
}
 8004e6c:	bf00      	nop
 8004e6e:	371c      	adds	r7, #28
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40012c00 	.word	0x40012c00
 8004e7c:	40013400 	.word	0x40013400
 8004e80:	40014000 	.word	0x40014000
 8004e84:	40014400 	.word	0x40014400
 8004e88:	40014800 	.word	0x40014800

08004e8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	051b      	lsls	r3, r3, #20
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a18      	ldr	r2, [pc, #96]	; (8004f44 <TIM_OC6_SetConfig+0xb8>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d00f      	beq.n	8004f08 <TIM_OC6_SetConfig+0x7c>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <TIM_OC6_SetConfig+0xbc>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d00b      	beq.n	8004f08 <TIM_OC6_SetConfig+0x7c>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a16      	ldr	r2, [pc, #88]	; (8004f4c <TIM_OC6_SetConfig+0xc0>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d007      	beq.n	8004f08 <TIM_OC6_SetConfig+0x7c>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4a15      	ldr	r2, [pc, #84]	; (8004f50 <TIM_OC6_SetConfig+0xc4>)
 8004efc:	4293      	cmp	r3, r2
 8004efe:	d003      	beq.n	8004f08 <TIM_OC6_SetConfig+0x7c>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a14      	ldr	r2, [pc, #80]	; (8004f54 <TIM_OC6_SetConfig+0xc8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d109      	bne.n	8004f1c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	029b      	lsls	r3, r3, #10
 8004f16:	697a      	ldr	r2, [r7, #20]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	693a      	ldr	r2, [r7, #16]
 8004f34:	621a      	str	r2, [r3, #32]
}
 8004f36:	bf00      	nop
 8004f38:	371c      	adds	r7, #28
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	40012c00 	.word	0x40012c00
 8004f48:	40013400 	.word	0x40013400
 8004f4c:	40014000 	.word	0x40014000
 8004f50:	40014400 	.word	0x40014400
 8004f54:	40014800 	.word	0x40014800

08004f58 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b087      	sub	sp, #28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	f023 0201 	bic.w	r2, r3, #1
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f023 030a 	bic.w	r3, r3, #10
 8004f94:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b087      	sub	sp, #28
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
 8004fcc:	f023 0210 	bic.w	r2, r3, #16
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fe0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	031b      	lsls	r3, r3, #12
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ff2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	697a      	ldr	r2, [r7, #20]
 8005008:	621a      	str	r2, [r3, #32]
}
 800500a:	bf00      	nop
 800500c:	371c      	adds	r7, #28
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr

08005016 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005016:	b480      	push	{r7}
 8005018:	b085      	sub	sp, #20
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	f043 0307 	orr.w	r3, r3, #7
 8005038:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	609a      	str	r2, [r3, #8]
}
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800504c:	b480      	push	{r7}
 800504e:	b087      	sub	sp, #28
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005066:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	021a      	lsls	r2, r3, #8
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	431a      	orrs	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	697a      	ldr	r2, [r7, #20]
 8005076:	4313      	orrs	r3, r2
 8005078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	371c      	adds	r7, #28
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800508c:	b480      	push	{r7}
 800508e:	b087      	sub	sp, #28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 031f 	and.w	r3, r3, #31
 800509e:	2201      	movs	r2, #1
 80050a0:	fa02 f303 	lsl.w	r3, r2, r3
 80050a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6a1a      	ldr	r2, [r3, #32]
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	43db      	mvns	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	6879      	ldr	r1, [r7, #4]
 80050c0:	fa01 f303 	lsl.w	r3, r1, r3
 80050c4:	431a      	orrs	r2, r3
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	621a      	str	r2, [r3, #32]
}
 80050ca:	bf00      	nop
 80050cc:	371c      	adds	r7, #28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr
	...

080050d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d101      	bne.n	80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050ec:	2302      	movs	r3, #2
 80050ee:	e068      	b.n	80051c2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2202      	movs	r2, #2
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a2e      	ldr	r2, [pc, #184]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d004      	beq.n	8005124 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a2d      	ldr	r2, [pc, #180]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d108      	bne.n	8005136 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800512a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1e      	ldr	r2, [pc, #120]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d01d      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005162:	d018      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a1b      	ldr	r2, [pc, #108]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d013      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a1a      	ldr	r2, [pc, #104]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d00e      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d009      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a13      	ldr	r2, [pc, #76]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d004      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d10c      	bne.n	80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	68ba      	ldr	r2, [r7, #8]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40012c00 	.word	0x40012c00
 80051d4:	40013400 	.word	0x40013400
 80051d8:	40000400 	.word	0x40000400
 80051dc:	40000800 	.word	0x40000800
 80051e0:	40000c00 	.word	0x40000c00
 80051e4:	40014000 	.word	0x40014000

080051e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr

080051fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <__libc_init_array>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4d0d      	ldr	r5, [pc, #52]	; (800526c <__libc_init_array+0x38>)
 8005238:	4c0d      	ldr	r4, [pc, #52]	; (8005270 <__libc_init_array+0x3c>)
 800523a:	1b64      	subs	r4, r4, r5
 800523c:	10a4      	asrs	r4, r4, #2
 800523e:	2600      	movs	r6, #0
 8005240:	42a6      	cmp	r6, r4
 8005242:	d109      	bne.n	8005258 <__libc_init_array+0x24>
 8005244:	4d0b      	ldr	r5, [pc, #44]	; (8005274 <__libc_init_array+0x40>)
 8005246:	4c0c      	ldr	r4, [pc, #48]	; (8005278 <__libc_init_array+0x44>)
 8005248:	f000 f818 	bl	800527c <_init>
 800524c:	1b64      	subs	r4, r4, r5
 800524e:	10a4      	asrs	r4, r4, #2
 8005250:	2600      	movs	r6, #0
 8005252:	42a6      	cmp	r6, r4
 8005254:	d105      	bne.n	8005262 <__libc_init_array+0x2e>
 8005256:	bd70      	pop	{r4, r5, r6, pc}
 8005258:	f855 3b04 	ldr.w	r3, [r5], #4
 800525c:	4798      	blx	r3
 800525e:	3601      	adds	r6, #1
 8005260:	e7ee      	b.n	8005240 <__libc_init_array+0xc>
 8005262:	f855 3b04 	ldr.w	r3, [r5], #4
 8005266:	4798      	blx	r3
 8005268:	3601      	adds	r6, #1
 800526a:	e7f2      	b.n	8005252 <__libc_init_array+0x1e>
 800526c:	080052d4 	.word	0x080052d4
 8005270:	080052d4 	.word	0x080052d4
 8005274:	080052d4 	.word	0x080052d4
 8005278:	080052d8 	.word	0x080052d8

0800527c <_init>:
 800527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800527e:	bf00      	nop
 8005280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005282:	bc08      	pop	{r3}
 8005284:	469e      	mov	lr, r3
 8005286:	4770      	bx	lr

08005288 <_fini>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr
