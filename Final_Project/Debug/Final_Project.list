
Final_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e6c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08003ffc  08003ffc  00013ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  000200d0  2**0
                  CONTENTS
  4 .ARM          00000000  0800423c  0800423c  000200d0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800423c  0800423c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0001423c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08004244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001390  200000d0  08004314  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001460  08004314  00021460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007c03  00000000  00000000  00020143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017ed  00000000  00000000  00027d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  00029538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069d  00000000  00000000  00029e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026539  00000000  00000000  0002a4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009665  00000000  00000000  000509ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6a3b  00000000  00000000  0005a053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cc4  00000000  00000000  00140a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00143754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d0 	.word	0x200000d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003fe4 	.word	0x08003fe4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d4 	.word	0x200000d4
 80001cc:	08003fe4 	.word	0x08003fe4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <clearImage>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void clearImage(){
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
	for (int y = 0; y < HEIGHT; ++y)
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e015      	b.n	80002c8 <clearImage+0x38>
	{
		for (int x = 0; x < WIDTH; ++x)
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	e00c      	b.n	80002bc <clearImage+0x2c>
		{
			IMAGE[y][x] = ' ';
 80002a2:	4a0e      	ldr	r2, [pc, #56]	; (80002dc <clearImage+0x4c>)
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	2154      	movs	r1, #84	; 0x54
 80002a8:	fb01 f303 	mul.w	r3, r1, r3
 80002ac:	441a      	add	r2, r3
 80002ae:	683b      	ldr	r3, [r7, #0]
 80002b0:	4413      	add	r3, r2
 80002b2:	2220      	movs	r2, #32
 80002b4:	701a      	strb	r2, [r3, #0]
		for (int x = 0; x < WIDTH; ++x)
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	603b      	str	r3, [r7, #0]
 80002bc:	683b      	ldr	r3, [r7, #0]
 80002be:	2b53      	cmp	r3, #83	; 0x53
 80002c0:	ddef      	ble.n	80002a2 <clearImage+0x12>
	for (int y = 0; y < HEIGHT; ++y)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	3301      	adds	r3, #1
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	2b2f      	cmp	r3, #47	; 0x2f
 80002cc:	dde6      	ble.n	800029c <clearImage+0xc>
		}
	}
}
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	370c      	adds	r7, #12
 80002d4:	46bd      	mov	sp, r7
 80002d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002da:	4770      	bx	lr
 80002dc:	20000150 	.word	0x20000150

080002e0 <convertToImage>:

void convertToImage(struct Actor* actors[], int num_actors)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b087      	sub	sp, #28
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
 80002e8:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < num_actors; ++i)
 80002ea:	2300      	movs	r3, #0
 80002ec:	617b      	str	r3, [r7, #20]
 80002ee:	e06f      	b.n	80003d0 <convertToImage+0xf0>
	{
		// create IMAGE
		int model_pos = 0;
 80002f0:	2300      	movs	r3, #0
 80002f2:	613b      	str	r3, [r7, #16]
		for (int y = 0; y < HEIGHT; ++y)
 80002f4:	2300      	movs	r3, #0
 80002f6:	60fb      	str	r3, [r7, #12]
 80002f8:	e064      	b.n	80003c4 <convertToImage+0xe4>
		{
			for (int x = 0; x < WIDTH; ++x)
 80002fa:	2300      	movs	r3, #0
 80002fc:	60bb      	str	r3, [r7, #8]
 80002fe:	e05b      	b.n	80003b8 <convertToImage+0xd8>
			{
				if (x >= actors[i]->x && x < actors[i]->x+actors[i]->model_width && y >= actors[i]->y && y < actors[i]->y+actors[i]->model_height)
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	009b      	lsls	r3, r3, #2
 8000304:	687a      	ldr	r2, [r7, #4]
 8000306:	4413      	add	r3, r2
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	68ba      	ldr	r2, [r7, #8]
 800030e:	429a      	cmp	r2, r3
 8000310:	db4f      	blt.n	80003b2 <convertToImage+0xd2>
 8000312:	697b      	ldr	r3, [r7, #20]
 8000314:	009b      	lsls	r3, r3, #2
 8000316:	687a      	ldr	r2, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	681a      	ldr	r2, [r3, #0]
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	009b      	lsls	r3, r3, #2
 8000322:	6879      	ldr	r1, [r7, #4]
 8000324:	440b      	add	r3, r1
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	689b      	ldr	r3, [r3, #8]
 800032a:	4413      	add	r3, r2
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	429a      	cmp	r2, r3
 8000330:	da3f      	bge.n	80003b2 <convertToImage+0xd2>
 8000332:	697b      	ldr	r3, [r7, #20]
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	4413      	add	r3, r2
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	685b      	ldr	r3, [r3, #4]
 800033e:	68fa      	ldr	r2, [r7, #12]
 8000340:	429a      	cmp	r2, r3
 8000342:	db36      	blt.n	80003b2 <convertToImage+0xd2>
 8000344:	697b      	ldr	r3, [r7, #20]
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	687a      	ldr	r2, [r7, #4]
 800034a:	4413      	add	r3, r2
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	685a      	ldr	r2, [r3, #4]
 8000350:	697b      	ldr	r3, [r7, #20]
 8000352:	009b      	lsls	r3, r3, #2
 8000354:	6879      	ldr	r1, [r7, #4]
 8000356:	440b      	add	r3, r1
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	68db      	ldr	r3, [r3, #12]
 800035c:	4413      	add	r3, r2
 800035e:	68fa      	ldr	r2, [r7, #12]
 8000360:	429a      	cmp	r2, r3
 8000362:	da26      	bge.n	80003b2 <convertToImage+0xd2>
				{
					if (model_pos < actors[i]->model_height * actors[i]->model_width)
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	009b      	lsls	r3, r3, #2
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	4413      	add	r3, r2
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	697a      	ldr	r2, [r7, #20]
 8000372:	0092      	lsls	r2, r2, #2
 8000374:	6879      	ldr	r1, [r7, #4]
 8000376:	440a      	add	r2, r1
 8000378:	6812      	ldr	r2, [r2, #0]
 800037a:	6892      	ldr	r2, [r2, #8]
 800037c:	fb02 f303 	mul.w	r3, r2, r3
 8000380:	693a      	ldr	r2, [r7, #16]
 8000382:	429a      	cmp	r2, r3
 8000384:	da15      	bge.n	80003b2 <convertToImage+0xd2>
					{
						IMAGE[y][x] = actors[i]->model[model_pos];
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	009b      	lsls	r3, r3, #2
 800038a:	687a      	ldr	r2, [r7, #4]
 800038c:	4413      	add	r3, r2
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	699a      	ldr	r2, [r3, #24]
 8000392:	693b      	ldr	r3, [r7, #16]
 8000394:	4413      	add	r3, r2
 8000396:	7818      	ldrb	r0, [r3, #0]
 8000398:	4a13      	ldr	r2, [pc, #76]	; (80003e8 <convertToImage+0x108>)
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	2154      	movs	r1, #84	; 0x54
 800039e:	fb01 f303 	mul.w	r3, r1, r3
 80003a2:	441a      	add	r2, r3
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	4413      	add	r3, r2
 80003a8:	4602      	mov	r2, r0
 80003aa:	701a      	strb	r2, [r3, #0]
						++model_pos;
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	3301      	adds	r3, #1
 80003b0:	613b      	str	r3, [r7, #16]
			for (int x = 0; x < WIDTH; ++x)
 80003b2:	68bb      	ldr	r3, [r7, #8]
 80003b4:	3301      	adds	r3, #1
 80003b6:	60bb      	str	r3, [r7, #8]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	2b53      	cmp	r3, #83	; 0x53
 80003bc:	dda0      	ble.n	8000300 <convertToImage+0x20>
		for (int y = 0; y < HEIGHT; ++y)
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	3301      	adds	r3, #1
 80003c2:	60fb      	str	r3, [r7, #12]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	2b2f      	cmp	r3, #47	; 0x2f
 80003c8:	dd97      	ble.n	80002fa <convertToImage+0x1a>
	for (int i = 0; i < num_actors; ++i)
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	3301      	adds	r3, #1
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	697a      	ldr	r2, [r7, #20]
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	429a      	cmp	r2, r3
 80003d6:	db8b      	blt.n	80002f0 <convertToImage+0x10>
					}
				}
			}
		}
	}
}
 80003d8:	bf00      	nop
 80003da:	bf00      	nop
 80003dc:	371c      	adds	r7, #28
 80003de:	46bd      	mov	sp, r7
 80003e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	20000150 	.word	0x20000150

080003ec <convertToScreen>:

void convertToScreen()
{
 80003ec:	b480      	push	{r7}
 80003ee:	b087      	sub	sp, #28
 80003f0:	af00      	add	r7, sp, #0
	// convert IMAGE to SCREEN
	for (int x = 0; x < WIDTH; ++x)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e03e      	b.n	8000476 <convertToScreen+0x8a>
	{
        int bank = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	613b      	str	r3, [r7, #16]
        int pixel = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
        char binary = 0b00000000;
 8000400:	2300      	movs	r3, #0
 8000402:	72fb      	strb	r3, [r7, #11]
        for (int y = 0; y < HEIGHT; ++y)
 8000404:	2300      	movs	r3, #0
 8000406:	607b      	str	r3, [r7, #4]
 8000408:	e02f      	b.n	800046a <convertToScreen+0x7e>
        {
            if (IMAGE[y][x] == 'x')
 800040a:	4a20      	ldr	r2, [pc, #128]	; (800048c <convertToScreen+0xa0>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	2154      	movs	r1, #84	; 0x54
 8000410:	fb01 f303 	mul.w	r3, r1, r3
 8000414:	441a      	add	r2, r3
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	4413      	add	r3, r2
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2b78      	cmp	r3, #120	; 0x78
 800041e:	d109      	bne.n	8000434 <convertToScreen+0x48>
            {
                binary |= (1 << pixel);
 8000420:	2201      	movs	r2, #1
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	fa02 f303 	lsl.w	r3, r2, r3
 8000428:	b25a      	sxtb	r2, r3
 800042a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800042e:	4313      	orrs	r3, r2
 8000430:	b25b      	sxtb	r3, r3
 8000432:	72fb      	strb	r3, [r7, #11]
            }
            ++pixel;
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	3301      	adds	r3, #1
 8000438:	60fb      	str	r3, [r7, #12]
            if (pixel == 8)
 800043a:	68fb      	ldr	r3, [r7, #12]
 800043c:	2b08      	cmp	r3, #8
 800043e:	d111      	bne.n	8000464 <convertToScreen+0x78>
            {
                SCREEN[x][bank] = binary;
 8000440:	4913      	ldr	r1, [pc, #76]	; (8000490 <convertToScreen+0xa4>)
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	4613      	mov	r3, r2
 8000446:	005b      	lsls	r3, r3, #1
 8000448:	4413      	add	r3, r2
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	18ca      	adds	r2, r1, r3
 800044e:	693b      	ldr	r3, [r7, #16]
 8000450:	4413      	add	r3, r2
 8000452:	7afa      	ldrb	r2, [r7, #11]
 8000454:	701a      	strb	r2, [r3, #0]
                ++bank;
 8000456:	693b      	ldr	r3, [r7, #16]
 8000458:	3301      	adds	r3, #1
 800045a:	613b      	str	r3, [r7, #16]
                pixel = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]
                binary = 0b00000000;
 8000460:	2300      	movs	r3, #0
 8000462:	72fb      	strb	r3, [r7, #11]
        for (int y = 0; y < HEIGHT; ++y)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	3301      	adds	r3, #1
 8000468:	607b      	str	r3, [r7, #4]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	2b2f      	cmp	r3, #47	; 0x2f
 800046e:	ddcc      	ble.n	800040a <convertToScreen+0x1e>
	for (int x = 0; x < WIDTH; ++x)
 8000470:	697b      	ldr	r3, [r7, #20]
 8000472:	3301      	adds	r3, #1
 8000474:	617b      	str	r3, [r7, #20]
 8000476:	697b      	ldr	r3, [r7, #20]
 8000478:	2b53      	cmp	r3, #83	; 0x53
 800047a:	ddbd      	ble.n	80003f8 <convertToScreen+0xc>
            }
        }
	}
}
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	371c      	adds	r7, #28
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	20000150 	.word	0x20000150
 8000490:	20001110 	.word	0x20001110

08000494 <drawScreen>:

void drawScreen()
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
	for (int y=0; y<6; ++y)
 800049a:	2300      	movs	r3, #0
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	e018      	b.n	80004d2 <drawScreen+0x3e>
	{
		for (int x=0; x<84; ++x)
 80004a0:	2300      	movs	r3, #0
 80004a2:	603b      	str	r3, [r7, #0]
 80004a4:	e00f      	b.n	80004c6 <drawScreen+0x32>
		{
		  GLCD_data_write(SCREEN[x][y]);
 80004a6:	490f      	ldr	r1, [pc, #60]	; (80004e4 <drawScreen+0x50>)
 80004a8:	683a      	ldr	r2, [r7, #0]
 80004aa:	4613      	mov	r3, r2
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	4413      	add	r3, r2
 80004b0:	005b      	lsls	r3, r3, #1
 80004b2:	18ca      	adds	r2, r1, r3
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4413      	add	r3, r2
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4618      	mov	r0, r3
 80004bc:	f000 fcb0 	bl	8000e20 <GLCD_data_write>
		for (int x=0; x<84; ++x)
 80004c0:	683b      	ldr	r3, [r7, #0]
 80004c2:	3301      	adds	r3, #1
 80004c4:	603b      	str	r3, [r7, #0]
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	2b53      	cmp	r3, #83	; 0x53
 80004ca:	ddec      	ble.n	80004a6 <drawScreen+0x12>
	for (int y=0; y<6; ++y)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	3301      	adds	r3, #1
 80004d0:	607b      	str	r3, [r7, #4]
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b05      	cmp	r3, #5
 80004d6:	dde3      	ble.n	80004a0 <drawScreen+0xc>
		}
	}
	//HAL_Delay(5000);
	//GLCD_clear();
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20001110 	.word	0x20001110

080004e8 <controls>:

void controls(struct Actor* player)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	// Keypad
	  switch(KEY)
 80004f0:	4b24      	ldr	r3, [pc, #144]	; (8000584 <controls+0x9c>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	3b02      	subs	r3, #2
 80004f6:	2b09      	cmp	r3, #9
 80004f8:	d83a      	bhi.n	8000570 <controls+0x88>
 80004fa:	a201      	add	r2, pc, #4	; (adr r2, 8000500 <controls+0x18>)
 80004fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000500:	08000529 	.word	0x08000529
 8000504:	08000571 	.word	0x08000571
 8000508:	0800054d 	.word	0x0800054d
 800050c:	08000571 	.word	0x08000571
 8000510:	08000571 	.word	0x08000571
 8000514:	08000571 	.word	0x08000571
 8000518:	0800053b 	.word	0x0800053b
 800051c:	08000571 	.word	0x08000571
 8000520:	08000571 	.word	0x08000571
 8000524:	0800055f 	.word	0x0800055f
	  {
	  case 2:		// UP
		  player->y -= 2;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	1e9a      	subs	r2, r3, #2
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	605a      	str	r2, [r3, #4]
		  KEY = 0;
 8000532:	4b14      	ldr	r3, [pc, #80]	; (8000584 <controls+0x9c>)
 8000534:	2200      	movs	r2, #0
 8000536:	701a      	strb	r2, [r3, #0]
		  break;
 8000538:	e01e      	b.n	8000578 <controls+0x90>
	  case 8:		// DOWN
		  player->y += 2;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	1c9a      	adds	r2, r3, #2
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	605a      	str	r2, [r3, #4]
		  KEY = 0;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <controls+0x9c>)
 8000546:	2200      	movs	r2, #0
 8000548:	701a      	strb	r2, [r3, #0]
		  break;
 800054a:	e015      	b.n	8000578 <controls+0x90>
	  case 4:		// LEFT
		  player->x -= 5;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	1f5a      	subs	r2, r3, #5
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	601a      	str	r2, [r3, #0]
		  KEY = 0;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <controls+0x9c>)
 8000558:	2200      	movs	r2, #0
 800055a:	701a      	strb	r2, [r3, #0]
		  break;
 800055c:	e00c      	b.n	8000578 <controls+0x90>
	  case 11:		// RIGHT
		  player->x += 5;
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	1d5a      	adds	r2, r3, #5
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	601a      	str	r2, [r3, #0]
		  KEY = 0;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <controls+0x9c>)
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
		  break;
 800056e:	e003      	b.n	8000578 <controls+0x90>
	  default:
		  KEY = 0;
 8000570:	4b04      	ldr	r3, [pc, #16]	; (8000584 <controls+0x9c>)
 8000572:	2200      	movs	r2, #0
 8000574:	701a      	strb	r2, [r3, #0]
		  break;
 8000576:	bf00      	nop
	  }
}
 8000578:	bf00      	nop
 800057a:	370c      	adds	r7, #12
 800057c:	46bd      	mov	sp, r7
 800057e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000582:	4770      	bx	lr
 8000584:	20001308 	.word	0x20001308

08000588 <checkCollisions>:
 * 					0: nothing
 * 					1: win
 * 					2: lose
 */
int checkCollisions(struct Actor* player, struct Actor* actors[], int sizeOfActors)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08a      	sub	sp, #40	; 0x28
 800058c:	af00      	add	r7, sp, #0
 800058e:	60f8      	str	r0, [r7, #12]
 8000590:	60b9      	str	r1, [r7, #8]
 8000592:	607a      	str	r2, [r7, #4]
	int player_left = player->x;
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	623b      	str	r3, [r7, #32]
	//int player_right = player->x + player->model_width;
	int player_top = player->y;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	685b      	ldr	r3, [r3, #4]
 800059e:	61fb      	str	r3, [r7, #28]
	//int player_bottom = player->y + player->model_height;
	for (int i = 0; i < sizeOfActors; ++i)
 80005a0:	2300      	movs	r3, #0
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
 80005a4:	e052      	b.n	800064c <checkCollisions+0xc4>
	{
		if (strcmp(player->name, actors[i]->name) != 0)
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	6958      	ldr	r0, [r3, #20]
 80005aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	68ba      	ldr	r2, [r7, #8]
 80005b0:	4413      	add	r3, r2
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	695b      	ldr	r3, [r3, #20]
 80005b6:	4619      	mov	r1, r3
 80005b8:	f7ff fe0a 	bl	80001d0 <strcmp>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d041      	beq.n	8000646 <checkCollisions+0xbe>
		{
			int actor_left = actors[i]->x;
 80005c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	68ba      	ldr	r2, [r7, #8]
 80005c8:	4413      	add	r3, r2
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	61bb      	str	r3, [r7, #24]
			//int actor_right = actors[i]->x + actors[i]->model_width;
			int actor_top = actors[i]->y;
 80005d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	68ba      	ldr	r2, [r7, #8]
 80005d6:	4413      	add	r3, r2
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	685b      	ldr	r3, [r3, #4]
 80005dc:	617b      	str	r3, [r7, #20]
			//int actor_bottom = actors[i]->y + actors[i]->model_height;

			if (
					(abs(actor_left - player_left) <= player->model_width) &&
 80005de:	69ba      	ldr	r2, [r7, #24]
 80005e0:	6a3b      	ldr	r3, [r7, #32]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005e8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	689b      	ldr	r3, [r3, #8]
			if (
 80005f0:	429a      	cmp	r2, r3
 80005f2:	dc28      	bgt.n	8000646 <checkCollisions+0xbe>
					(abs(actor_top - player_top) <= player->model_height)
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	1ad3      	subs	r3, r2, r3
 80005fa:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80005fe:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	68db      	ldr	r3, [r3, #12]
					(abs(actor_left - player_left) <= player->model_width) &&
 8000606:	429a      	cmp	r2, r3
 8000608:	dc1d      	bgt.n	8000646 <checkCollisions+0xbe>
				)
			{
				if (strcmp(actors[i]->name, "O") == 0)
 800060a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	4413      	add	r3, r2
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	695b      	ldr	r3, [r3, #20]
 8000616:	4912      	ldr	r1, [pc, #72]	; (8000660 <checkCollisions+0xd8>)
 8000618:	4618      	mov	r0, r3
 800061a:	f7ff fdd9 	bl	80001d0 <strcmp>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d101      	bne.n	8000628 <checkCollisions+0xa0>
					return 1;
 8000624:	2301      	movs	r3, #1
 8000626:	e016      	b.n	8000656 <checkCollisions+0xce>
				if (strcmp(actors[i]->name, "X") == 0)
 8000628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	68ba      	ldr	r2, [r7, #8]
 800062e:	4413      	add	r3, r2
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	490b      	ldr	r1, [pc, #44]	; (8000664 <checkCollisions+0xdc>)
 8000636:	4618      	mov	r0, r3
 8000638:	f7ff fdca 	bl	80001d0 <strcmp>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d101      	bne.n	8000646 <checkCollisions+0xbe>
					return 2;
 8000642:	2302      	movs	r3, #2
 8000644:	e007      	b.n	8000656 <checkCollisions+0xce>
	for (int i = 0; i < sizeOfActors; ++i)
 8000646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000648:	3301      	adds	r3, #1
 800064a:	627b      	str	r3, [r7, #36]	; 0x24
 800064c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	429a      	cmp	r2, r3
 8000652:	dba8      	blt.n	80005a6 <checkCollisions+0x1e>
			}
		}
	}
	return 0;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	3728      	adds	r7, #40	; 0x28
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	08003ffc 	.word	0x08003ffc
 8000664:	08004000 	.word	0x08004000

08000668 <randomINT>:

// random number generation
// return int in range [lower, upper]
int randomINT(int lower, int upper)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
 8000670:	6039      	str	r1, [r7, #0]
	return (rand() % (upper + 1)) + lower;
 8000672:	f002 fd51 	bl	8003118 <rand>
 8000676:	4602      	mov	r2, r0
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	fb92 f1f3 	sdiv	r1, r2, r3
 8000680:	fb01 f303 	mul.w	r3, r1, r3
 8000684:	1ad2      	subs	r2, r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4413      	add	r3, r2
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <animateActors>:

// animate actors
void animateActors(struct Actor* player, struct Actor* actors[], int sizeOfActors)
{
 8000692:	b590      	push	{r4, r7, lr}
 8000694:	b08f      	sub	sp, #60	; 0x3c
 8000696:	af00      	add	r7, sp, #0
 8000698:	60f8      	str	r0, [r7, #12]
 800069a:	60b9      	str	r1, [r7, #8]
 800069c:	607a      	str	r2, [r7, #4]
	int defaultX = -10;
 800069e:	f06f 0309 	mvn.w	r3, #9
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
	int defaultY = -10;
 80006a4:	f06f 0309 	mvn.w	r3, #9
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int minSpeed = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
	int maxSpeed = 3;
 80006ae:	2303      	movs	r3, #3
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
	int minX = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
	int maxX = 80;
 80006b6:	2350      	movs	r3, #80	; 0x50
 80006b8:	61fb      	str	r3, [r7, #28]
	int minY = -5;
 80006ba:	f06f 0304 	mvn.w	r3, #4
 80006be:	61bb      	str	r3, [r7, #24]
	int maxY = 55;
 80006c0:	2337      	movs	r3, #55	; 0x37
 80006c2:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < sizeOfActors; ++i)
 80006c4:	2300      	movs	r3, #0
 80006c6:	637b      	str	r3, [r7, #52]	; 0x34
 80006c8:	e08c      	b.n	80007e4 <animateActors+0x152>
	{
		if (strcmp(player->name, actors[i]->name) != 0)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6958      	ldr	r0, [r3, #20]
 80006ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006d0:	009b      	lsls	r3, r3, #2
 80006d2:	68ba      	ldr	r2, [r7, #8]
 80006d4:	4413      	add	r3, r2
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4619      	mov	r1, r3
 80006dc:	f7ff fd78 	bl	80001d0 <strcmp>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d07b      	beq.n	80007de <animateActors+0x14c>
		{
			// if location is at the starting default of (-10,-10)
			// draw it at a random location at the top of the screen
			// with random x position in range [0,80]
			// with random speed in range [1,5]
			if ((actors[i]->x == defaultX) && (actors[i]->y == defaultY))
 80006e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	68ba      	ldr	r2, [r7, #8]
 80006ec:	4413      	add	r3, r2
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d125      	bne.n	8000744 <animateActors+0xb2>
 80006f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	4413      	add	r3, r2
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	685b      	ldr	r3, [r3, #4]
 8000704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000706:	429a      	cmp	r2, r3
 8000708:	d11c      	bne.n	8000744 <animateActors+0xb2>
			{
				actors[i]->y = minY;
 800070a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	68ba      	ldr	r2, [r7, #8]
 8000710:	4413      	add	r3, r2
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	69ba      	ldr	r2, [r7, #24]
 8000716:	605a      	str	r2, [r3, #4]
				actors[i]->x = randomINT(minX,maxX);
 8000718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800071a:	009b      	lsls	r3, r3, #2
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4413      	add	r3, r2
 8000720:	681c      	ldr	r4, [r3, #0]
 8000722:	69f9      	ldr	r1, [r7, #28]
 8000724:	6a38      	ldr	r0, [r7, #32]
 8000726:	f7ff ff9f 	bl	8000668 <randomINT>
 800072a:	4603      	mov	r3, r0
 800072c:	6023      	str	r3, [r4, #0]
				actors[i]->speed = randomINT(minSpeed,maxSpeed);
 800072e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000730:	009b      	lsls	r3, r3, #2
 8000732:	68ba      	ldr	r2, [r7, #8]
 8000734:	4413      	add	r3, r2
 8000736:	681c      	ldr	r4, [r3, #0]
 8000738:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800073a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800073c:	f7ff ff94 	bl	8000668 <randomINT>
 8000740:	4603      	mov	r3, r0
 8000742:	6123      	str	r3, [r4, #16]
			}
			// if actor goes over the bottom of the screen,
			// redraw on top of screen with a different x position
			// with a different speed
			if (actors[i]->y > maxY)
 8000744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000746:	009b      	lsls	r3, r3, #2
 8000748:	68ba      	ldr	r2, [r7, #8]
 800074a:	4413      	add	r3, r2
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	685b      	ldr	r3, [r3, #4]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	429a      	cmp	r2, r3
 8000754:	da1d      	bge.n	8000792 <animateActors+0x100>
			{
				actors[i]->y = minY;
 8000756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000758:	009b      	lsls	r3, r3, #2
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4413      	add	r3, r2
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	69ba      	ldr	r2, [r7, #24]
 8000762:	605a      	str	r2, [r3, #4]
				actors[i]->x = randomINT(minX,maxX);
 8000764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	68ba      	ldr	r2, [r7, #8]
 800076a:	4413      	add	r3, r2
 800076c:	681c      	ldr	r4, [r3, #0]
 800076e:	69f9      	ldr	r1, [r7, #28]
 8000770:	6a38      	ldr	r0, [r7, #32]
 8000772:	f7ff ff79 	bl	8000668 <randomINT>
 8000776:	4603      	mov	r3, r0
 8000778:	6023      	str	r3, [r4, #0]
				actors[i]->speed = randomINT(minSpeed,maxSpeed);
 800077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	68ba      	ldr	r2, [r7, #8]
 8000780:	4413      	add	r3, r2
 8000782:	681c      	ldr	r4, [r3, #0]
 8000784:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000788:	f7ff ff6e 	bl	8000668 <randomINT>
 800078c:	4603      	mov	r3, r0
 800078e:	6123      	str	r3, [r4, #16]
 8000790:	e025      	b.n	80007de <animateActors+0x14c>
			}
			else
			{
				// make sure that an object's speed is never zero
				// so that it keeps falling
				if (actors[i]->speed == 0)
 8000792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	68ba      	ldr	r2, [r7, #8]
 8000798:	4413      	add	r3, r2
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10a      	bne.n	80007b8 <animateActors+0x126>
					actors[i]->speed = randomINT(minSpeed,maxSpeed);
 80007a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	68ba      	ldr	r2, [r7, #8]
 80007a8:	4413      	add	r3, r2
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80007ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80007b0:	f7ff ff5a 	bl	8000668 <randomINT>
 80007b4:	4603      	mov	r3, r0
 80007b6:	6123      	str	r3, [r4, #16]
				actors[i]->y += actors[i]->speed;
 80007b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007ba:	009b      	lsls	r3, r3, #2
 80007bc:	68ba      	ldr	r2, [r7, #8]
 80007be:	4413      	add	r3, r2
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	6859      	ldr	r1, [r3, #4]
 80007c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	68ba      	ldr	r2, [r7, #8]
 80007ca:	4413      	add	r3, r2
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	691a      	ldr	r2, [r3, #16]
 80007d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	68b8      	ldr	r0, [r7, #8]
 80007d6:	4403      	add	r3, r0
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	440a      	add	r2, r1
 80007dc:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < sizeOfActors; ++i)
 80007de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007e0:	3301      	adds	r3, #1
 80007e2:	637b      	str	r3, [r7, #52]	; 0x34
 80007e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	429a      	cmp	r2, r3
 80007ea:	f6ff af6e 	blt.w	80006ca <animateActors+0x38>
			}
		}
	}
}
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	373c      	adds	r7, #60	; 0x3c
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd90      	pop	{r4, r7, pc}

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007fc:	b0b2      	sub	sp, #200	; 0xc8
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000800:	f000 fe5c 	bl	80014bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000804:	f000 f9b0 	bl	8000b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000808:	f000 fa3e 	bl	8000c88 <MX_GPIO_Init>
  MX_SPI1_Init();
 800080c:	f000 f9fe 	bl	8000c0c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  GLCD_init(); // initialize the screen
 8000810:	f000 fb2c 	bl	8000e6c <GLCD_init>
  GLCD_clear(); // clear the screen
 8000814:	f000 fb6e 	bl	8000ef4 <GLCD_clear>

  // WIN screen
  int win_screen[] = {
 8000818:	4bc9      	ldr	r3, [pc, #804]	; (8000b40 <main+0x348>)
 800081a:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800081e:	461d      	mov	r5, r3
 8000820:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000822:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000826:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000828:	e895 0003 	ldmia.w	r5, {r0, r1}
 800082c:	e884 0003 	stmia.w	r4, {r0, r1}
		  25,15,21,0,23,9,14,28,29,30
  };

  // LOSE screen
  int lose_screen[] = {
 8000830:	4bc4      	ldr	r3, [pc, #784]	; (8000b44 <main+0x34c>)
 8000832:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8000836:	461d      	mov	r5, r3
 8000838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800083c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800083e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000840:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000844:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  25,15,21,0,12,15,19,5,27,27,27
  };

  // player initialization
  struct Actor player;
  player.model = player_model;
 8000848:	4bbf      	ldr	r3, [pc, #764]	; (8000b48 <main+0x350>)
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  player.model_width = 7;
 800084c:	2307      	movs	r3, #7
 800084e:	633b      	str	r3, [r7, #48]	; 0x30
  player.model_height = 4;
 8000850:	2304      	movs	r3, #4
 8000852:	637b      	str	r3, [r7, #52]	; 0x34
  player.x = 84/2 - player.model_width/2;
 8000854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000856:	0fda      	lsrs	r2, r3, #31
 8000858:	4413      	add	r3, r2
 800085a:	105b      	asrs	r3, r3, #1
 800085c:	425b      	negs	r3, r3
 800085e:	332a      	adds	r3, #42	; 0x2a
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  player.y = 48-player.model_height;
 8000862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000864:	f1c3 0330 	rsb	r3, r3, #48	; 0x30
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  player.name = "player";
 800086a:	4bb8      	ldr	r3, [pc, #736]	; (8000b4c <main+0x354>)
 800086c:	63fb      	str	r3, [r7, #60]	; 0x3c
  player.speed = 0; // we move the player, so its speed is 0
 800086e:	2300      	movs	r3, #0
 8000870:	63bb      	str	r3, [r7, #56]	; 0x38

  // 3 X, 1 O, 1 player
  int num_X = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  int num_O = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  int num_player = 1;
 800087e:	2301      	movs	r3, #1
 8000880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  int num_Actors = num_X + num_O + num_player;
 8000884:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800088c:	4413      	add	r3, r2
 800088e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8000892:	4413      	add	r3, r2
 8000894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  // array of the address of each actor
  struct Actor* actors[num_Actors];
 8000898:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800089c:	1e4b      	subs	r3, r1, #1
 800089e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80008a2:	460a      	mov	r2, r1
 80008a4:	2300      	movs	r3, #0
 80008a6:	4692      	mov	sl, r2
 80008a8:	469b      	mov	fp, r3
 80008aa:	f04f 0200 	mov.w	r2, #0
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	ea4f 134b 	mov.w	r3, fp, lsl #5
 80008b6:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 80008ba:	ea4f 124a 	mov.w	r2, sl, lsl #5
 80008be:	460a      	mov	r2, r1
 80008c0:	2300      	movs	r3, #0
 80008c2:	4690      	mov	r8, r2
 80008c4:	4699      	mov	r9, r3
 80008c6:	f04f 0200 	mov.w	r2, #0
 80008ca:	f04f 0300 	mov.w	r3, #0
 80008ce:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80008d2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80008d6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80008da:	460b      	mov	r3, r1
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	3307      	adds	r3, #7
 80008e0:	08db      	lsrs	r3, r3, #3
 80008e2:	00db      	lsls	r3, r3, #3
 80008e4:	ebad 0d03 	sub.w	sp, sp, r3
 80008e8:	466b      	mov	r3, sp
 80008ea:	3303      	adds	r3, #3
 80008ec:	089b      	lsrs	r3, r3, #2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (int i = 0; i < num_Actors; ++i)
 80008f4:	2300      	movs	r3, #0
 80008f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80008fa:	e079      	b.n	80009f0 <main+0x1f8>
  {
	  if (i < num_X)
 80008fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000900:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000904:	429a      	cmp	r2, r3
 8000906:	da45      	bge.n	8000994 <main+0x19c>
	  {
		actors[i] = (struct Actor*)malloc(sizeof(struct Actor));
 8000908:	201c      	movs	r0, #28
 800090a:	f002 fb23 	bl	8002f54 <malloc>
 800090e:	4603      	mov	r3, r0
 8000910:	4619      	mov	r1, r3
 8000912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000916:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800091a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		actors[i]->model = X_model;
 800091e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000922:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092a:	4a89      	ldr	r2, [pc, #548]	; (8000b50 <main+0x358>)
 800092c:	619a      	str	r2, [r3, #24]
		actors[i]->model_width = 7;
 800092e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000932:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800093a:	2207      	movs	r2, #7
 800093c:	609a      	str	r2, [r3, #8]
		actors[i]->model_height = 5;
 800093e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000942:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000946:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800094a:	2205      	movs	r2, #5
 800094c:	60da      	str	r2, [r3, #12]
		actors[i]->x = -10;
 800094e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000952:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000956:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800095a:	f06f 0209 	mvn.w	r2, #9
 800095e:	601a      	str	r2, [r3, #0]
		actors[i]->y = -10;
 8000960:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000964:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8000968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096c:	f06f 0209 	mvn.w	r2, #9
 8000970:	605a      	str	r2, [r3, #4]
		actors[i]->name = "X";
 8000972:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000976:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800097a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800097e:	4a75      	ldr	r2, [pc, #468]	; (8000b54 <main+0x35c>)
 8000980:	615a      	str	r2, [r3, #20]
		actors[i]->speed = 0;
 8000982:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800098a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800098e:	2200      	movs	r2, #0
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	e028      	b.n	80009e6 <main+0x1ee>
	  }
	  else if (i < num_X + num_O)
 8000994:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8000998:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800099c:	4413      	add	r3, r2
 800099e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009a2:	429a      	cmp	r2, r3
 80009a4:	da17      	bge.n	80009d6 <main+0x1de>
	  {
		// O initialization
		struct Actor O;
		O.model = O_model;
 80009a6:	4b6c      	ldr	r3, [pc, #432]	; (8000b58 <main+0x360>)
 80009a8:	61fb      	str	r3, [r7, #28]
		O.model_width = 7;
 80009aa:	2307      	movs	r3, #7
 80009ac:	60fb      	str	r3, [r7, #12]
		O.model_height = 5;
 80009ae:	2305      	movs	r3, #5
 80009b0:	613b      	str	r3, [r7, #16]
		O.x = -10;
 80009b2:	f06f 0309 	mvn.w	r3, #9
 80009b6:	607b      	str	r3, [r7, #4]
		O.y = -10;
 80009b8:	f06f 0309 	mvn.w	r3, #9
 80009bc:	60bb      	str	r3, [r7, #8]
		O.name = "O";
 80009be:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <main+0x364>)
 80009c0:	61bb      	str	r3, [r7, #24]
		O.speed = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]

		actors[i] = &O;
 80009c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009ce:	1d39      	adds	r1, r7, #4
 80009d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80009d4:	e007      	b.n	80009e6 <main+0x1ee>
	  }
	  else
	  {
		  actors[i] = &player;
 80009d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80009da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009de:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80009e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < num_Actors; ++i)
 80009e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80009ea:	3301      	adds	r3, #1
 80009ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80009f0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80009f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80009f8:	429a      	cmp	r2, r3
 80009fa:	f6ff af7f 	blt.w	80008fc <main+0x104>
	  }
  }

  // use current time as seed for random number generator
  time_t t;
  srand((unsigned)time(&t));
 80009fe:	f107 0320 	add.w	r3, r7, #32
 8000a02:	4618      	mov	r0, r3
 8000a04:	f002 fcd4 	bl	80033b0 <time>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	460b      	mov	r3, r1
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f002 fb54 	bl	80030bc <srand>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (WIN)
 8000a14:	4b52      	ldr	r3, [pc, #328]	; (8000b60 <main+0x368>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d02d      	beq.n	8000a78 <main+0x280>
	  {
		  GLCD_clear();
 8000a1c:	f000 fa6a 	bl	8000ef4 <GLCD_clear>
		  int size = sizeof(win_screen)/sizeof(win_screen[0]);
 8000a20:	230a      	movs	r3, #10
 8000a22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		  for (int i=0; i < size; ++i)
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a2c:	e019      	b.n	8000a62 <main+0x26a>
		  {
			  GLCD_putchar(win_screen[i]);
 8000a2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	33c8      	adds	r3, #200	; 0xc8
 8000a36:	443b      	add	r3, r7
 8000a38:	f853 3c58 	ldr.w	r3, [r3, #-88]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 fa71 	bl	8000f24 <GLCD_putchar>
			  if (i < size - 2)
 8000a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a46:	3b02      	subs	r3, #2
 8000a48:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	da03      	bge.n	8000a58 <main+0x260>
				  HAL_Delay(500);
 8000a50:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a54:	f000 fdae 	bl	80015b4 <HAL_Delay>
		  for (int i=0; i < size; ++i)
 8000a58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8000a62:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8000a66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbdf      	blt.n	8000a2e <main+0x236>
		  }
		  HAL_Delay(5000);
 8000a6e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000a72:	f000 fd9f 	bl	80015b4 <HAL_Delay>
 8000a76:	e7cd      	b.n	8000a14 <main+0x21c>
	  }
	  else if (LOSE)
 8000a78:	4b3a      	ldr	r3, [pc, #232]	; (8000b64 <main+0x36c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d026      	beq.n	8000ace <main+0x2d6>
	  {
		  GLCD_clear();
 8000a80:	f000 fa38 	bl	8000ef4 <GLCD_clear>
		  int size = sizeof(lose_screen)/sizeof(lose_screen[0]);
 8000a84:	230b      	movs	r3, #11
 8000a86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		  for (int i=0; i < size; ++i)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000a90:	e012      	b.n	8000ab8 <main+0x2c0>
		  {
			  GLCD_putchar(lose_screen[i]);
 8000a92:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	33c8      	adds	r3, #200	; 0xc8
 8000a9a:	443b      	add	r3, r7
 8000a9c:	f853 3c84 	ldr.w	r3, [r3, #-132]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f000 fa3f 	bl	8000f24 <GLCD_putchar>
			  HAL_Delay(500);
 8000aa6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000aaa:	f000 fd83 	bl	80015b4 <HAL_Delay>
		  for (int i=0; i < size; ++i)
 8000aae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000ab8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8000abc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbe6      	blt.n	8000a92 <main+0x29a>
		  }
		  HAL_Delay(5000);
 8000ac4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ac8:	f000 fd74 	bl	80015b4 <HAL_Delay>
 8000acc:	e7a2      	b.n	8000a14 <main+0x21c>
	  }
	  else
	  {
		  // create image with actors combined
		  // then renders the screen
		  clearImage();
 8000ace:	f7ff fbdf 	bl	8000290 <clearImage>
		  convertToImage(actors, num_Actors);
 8000ad2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8000ad6:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ada:	f7ff fc01 	bl	80002e0 <convertToImage>
		  convertToScreen();
 8000ade:	f7ff fc85 	bl	80003ec <convertToScreen>
		  drawScreen();
 8000ae2:	f7ff fcd7 	bl	8000494 <drawScreen>

		  // Handles controls
		  controls(&player);
 8000ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fcfc 	bl	80004e8 <controls>

		  // Handles collisions
		  int collision_type = checkCollisions(&player, actors, num_Actors);
 8000af0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000af4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000af8:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fd43 	bl	8000588 <checkCollisions>
 8000b02:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
		  // 0 : nothing
		  // 1 : win
		  // 2 : lose
		  if (collision_type == 1)
 8000b06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d103      	bne.n	8000b16 <main+0x31e>
			  WIN = 1;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <main+0x368>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	701a      	strb	r2, [r3, #0]
 8000b14:	e006      	b.n	8000b24 <main+0x32c>
		  else if (collision_type == 2)
 8000b16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d102      	bne.n	8000b24 <main+0x32c>
			  LOSE = 1;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <main+0x36c>)
 8000b20:	2201      	movs	r2, #1
 8000b22:	701a      	strb	r2, [r3, #0]

		  // moves position of actors
		  animateActors(&player, actors, num_Actors);
 8000b24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b28:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8000b2c:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8000b30:	4618      	mov	r0, r3
 8000b32:	f7ff fdae 	bl	8000692 <animateActors>
		  HAL_Delay(300);
 8000b36:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b3a:	f000 fd3b 	bl	80015b4 <HAL_Delay>
	  if (WIN)
 8000b3e:	e769      	b.n	8000a14 <main+0x21c>
 8000b40:	0800400c 	.word	0x0800400c
 8000b44:	08004034 	.word	0x08004034
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	08004004 	.word	0x08004004
 8000b50:	20000044 	.word	0x20000044
 8000b54:	08004000 	.word	0x08004000
 8000b58:	20000020 	.word	0x20000020
 8000b5c:	08003ffc 	.word	0x08003ffc
 8000b60:	20001309 	.word	0x20001309
 8000b64:	2000130a 	.word	0x2000130a

08000b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b096      	sub	sp, #88	; 0x58
 8000b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	2244      	movs	r2, #68	; 0x44
 8000b74:	2100      	movs	r1, #0
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 fc11 	bl	800339e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b8e:	f001 f847 	bl	8001c20 <HAL_PWREx_ControlVoltageScaling>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b98:	f000 faf2 	bl	8001180 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ba4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba6:	2310      	movs	r3, #16
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000bb6:	230a      	movs	r3, #10
 8000bb8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 f87e 	bl	8001ccc <HAL_RCC_OscConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000bd6:	f000 fad3 	bl	8001180 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bda:	230f      	movs	r3, #15
 8000bdc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bde:	2303      	movs	r3, #3
 8000be0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bee:	463b      	mov	r3, r7
 8000bf0:	2104      	movs	r1, #4
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 fc46 	bl	8002484 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bfe:	f000 fabf 	bl	8001180 <Error_Handler>
  }
}
 8000c02:	bf00      	nop
 8000c04:	3758      	adds	r7, #88	; 0x58
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c10:	4b1b      	ldr	r3, [pc, #108]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c12:	4a1c      	ldr	r2, [pc, #112]	; (8000c84 <MX_SPI1_Init+0x78>)
 8000c14:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c1c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c1e:	4b18      	ldr	r3, [pc, #96]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c24:	4b16      	ldr	r3, [pc, #88]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c26:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c2a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c2c:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c32:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c3e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000c40:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c42:	2220      	movs	r2, #32
 8000c44:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c58:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c66:	2208      	movs	r2, #8
 8000c68:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_SPI1_Init+0x74>)
 8000c6c:	f001 fdf6 	bl	800285c <HAL_SPI_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000c76:	f000 fa83 	bl	8001180 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	200000ec 	.word	0x200000ec
 8000c84:	40013000 	.word	0x40013000

08000c88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08a      	sub	sp, #40	; 0x28
 8000c8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	605a      	str	r2, [r3, #4]
 8000c98:	609a      	str	r2, [r3, #8]
 8000c9a:	60da      	str	r2, [r3, #12]
 8000c9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9e:	4b4e      	ldr	r3, [pc, #312]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca2:	4a4d      	ldr	r2, [pc, #308]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000caa:	4b4b      	ldr	r3, [pc, #300]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cae:	f003 0304 	and.w	r3, r3, #4
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	4b48      	ldr	r3, [pc, #288]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cba:	4a47      	ldr	r2, [pc, #284]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cc2:	4b45      	ldr	r3, [pc, #276]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cca:	60fb      	str	r3, [r7, #12]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cce:	4b42      	ldr	r3, [pc, #264]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a41      	ldr	r2, [pc, #260]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cd4:	f043 0301 	orr.w	r3, r3, #1
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b3f      	ldr	r3, [pc, #252]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0301 	and.w	r3, r3, #1
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce6:	4b3c      	ldr	r3, [pc, #240]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a3b      	ldr	r2, [pc, #236]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b39      	ldr	r3, [pc, #228]	; (8000dd8 <MX_GPIO_Init+0x150>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2103      	movs	r1, #3
 8000d02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d06:	f000 ff4d 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2140      	movs	r1, #64	; 0x40
 8000d0e:	4833      	ldr	r0, [pc, #204]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000d10:	f000 ff48 	bl	8001ba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DA_Pin */
  GPIO_InitStruct.Pin = DA_Pin;
 8000d14:	2301      	movs	r3, #1
 8000d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DA_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	482d      	ldr	r0, [pc, #180]	; (8000de0 <MX_GPIO_Init+0x158>)
 8000d2a:	f000 fd79 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d48:	f000 fd6a 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8000d4c:	2308      	movs	r3, #8
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d58:	2303      	movs	r3, #3
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6a:	f000 fd59 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
 8000d6e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	4816      	ldr	r0, [pc, #88]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000d84:	f000 fd4c 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin;
 8000d88:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000d8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d96:	f107 0314 	add.w	r3, r7, #20
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da0:	f000 fd3e 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000da4:	2340      	movs	r3, #64	; 0x40
 8000da6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da8:	2301      	movs	r3, #1
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db0:	2300      	movs	r3, #0
 8000db2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4619      	mov	r1, r3
 8000dba:	4808      	ldr	r0, [pc, #32]	; (8000ddc <MX_GPIO_Init+0x154>)
 8000dbc:	f000 fd30 	bl	8001820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2006      	movs	r0, #6
 8000dc6:	f000 fcf4 	bl	80017b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000dca:	2006      	movs	r0, #6
 8000dcc:	f000 fd0d 	bl	80017ea <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dd0:	bf00      	nop
 8000dd2:	3728      	adds	r7, #40	; 0x28
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	40021000 	.word	0x40021000
 8000ddc:	48000400 	.word	0x48000400
 8000de0:	48000800 	.word	0x48000800

08000de4 <SPI_write>:

/* USER CODE BEGIN 4 */
void SPI_write(unsigned char data)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	; 0x40
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <SPI_write+0x34>)
 8000df4:	f000 fed6 	bl	8001ba4 <HAL_GPIO_WritePin>
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
 8000df8:	1df9      	adds	r1, r7, #7
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4806      	ldr	r0, [pc, #24]	; (8000e1c <SPI_write+0x38>)
 8000e02:	f001 fdce 	bl	80029a2 <HAL_SPI_Transmit>
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8000e06:	2201      	movs	r2, #1
 8000e08:	2140      	movs	r1, #64	; 0x40
 8000e0a:	4803      	ldr	r0, [pc, #12]	; (8000e18 <SPI_write+0x34>)
 8000e0c:	f000 feca 	bl	8001ba4 <HAL_GPIO_WritePin>
}
 8000e10:	bf00      	nop
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	48000400 	.word	0x48000400
 8000e1c:	200000ec 	.word	0x200000ec

08000e20 <GLCD_data_write>:

void GLCD_data_write(unsigned char data)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e32:	f000 feb7 	bl	8001ba4 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ffd3 	bl	8000de4 <SPI_write>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <GLCD_command_write>:

void GLCD_command_write(unsigned char data)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2101      	movs	r1, #1
 8000e54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e58:	f000 fea4 	bl	8001ba4 <HAL_GPIO_WritePin>
	// Send data over SPI
	SPI_write(data);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffc0 	bl	8000de4 <SPI_write>
}
 8000e64:	bf00      	nop
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <GLCD_init>:

void GLCD_init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2140      	movs	r1, #64	; 0x40
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <GLCD_init+0x50>)
 8000e76:	f000 fe95 	bl	8001ba4 <HAL_GPIO_WritePin>
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e82:	f000 fe8f 	bl	8001ba4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
 8000e86:	2201      	movs	r2, #1
 8000e88:	2102      	movs	r1, #2
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f000 fe89 	bl	8001ba4 <HAL_GPIO_WritePin>
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
 8000e92:	2021      	movs	r0, #33	; 0x21
 8000e94:	f7ff ffd7 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0xB0); // set LCD Vop for contrast (this may be adjusted)
 8000e98:	20b0      	movs	r0, #176	; 0xb0
 8000e9a:	f7ff ffd4 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0x04); // set temp coefficient
 8000e9e:	2004      	movs	r0, #4
 8000ea0:	f7ff ffd1 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0x15); // set LCD bias mode (this may be adjusted)
 8000ea4:	2015      	movs	r0, #21
 8000ea6:	f7ff ffce 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0x20); // return to normal command mode
 8000eaa:	2020      	movs	r0, #32
 8000eac:	f7ff ffcb 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0x0C); // set display mode normal
 8000eb0:	200c      	movs	r0, #12
 8000eb2:	f7ff ffc8 	bl	8000e46 <GLCD_command_write>
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	48000400 	.word	0x48000400

08000ec0 <GLCD_setCursor>:

void GLCD_setCursor(unsigned char x, unsigned char y)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	460a      	mov	r2, r1
 8000eca:	71fb      	strb	r3, [r7, #7]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71bb      	strb	r3, [r7, #6]
	GLCD_command_write(0x80 | x); // column
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ffb4 	bl	8000e46 <GLCD_command_write>
	GLCD_command_write(0x40 | y); // bank
 8000ede:	79bb      	ldrb	r3, [r7, #6]
 8000ee0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f7ff ffad 	bl	8000e46 <GLCD_command_write>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <GLCD_clear>:

void GLCD_clear(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	e005      	b.n	8000f0c <GLCD_clear+0x18>
	{
		GLCD_data_write(0x00); // write zeros
 8000f00:	2000      	movs	r0, #0
 8000f02:	f7ff ff8d 	bl	8000e20 <GLCD_data_write>
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8000f12:	dbf5      	blt.n	8000f00 <GLCD_clear+0xc>
	}
	GLCD_setCursor(0,0); // return cursor to top left
 8000f14:	2100      	movs	r1, #0
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff ffd2 	bl	8000ec0 <GLCD_setCursor>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <GLCD_putchar>:

void GLCD_putchar(int font_table_row)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	// go through each value in order to print the character
	int i;
	for (i=0; i<6; i++){
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e00f      	b.n	8000f52 <GLCD_putchar+0x2e>
		GLCD_data_write(font_table[font_table_row][i]);
 8000f32:	490c      	ldr	r1, [pc, #48]	; (8000f64 <GLCD_putchar+0x40>)
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	4413      	add	r3, r2
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	18ca      	adds	r2, r1, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	4413      	add	r3, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ff6a 	bl	8000e20 <GLCD_data_write>
	for (i=0; i<6; i++){
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	2b05      	cmp	r3, #5
 8000f56:	ddec      	ble.n	8000f32 <GLCD_putchar+0xe>
	}
}
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	08004060 	.word	0x08004060

08000f68 <keypad_decode>:

// decode the keypad according to what we need each keys to be
unsigned char keypad_decode(){
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  unsigned char key = 0x0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	71fb      	strb	r3, [r7, #7]
  unsigned char data = 0b0000;
 8000f72:	2300      	movs	r3, #0
 8000f74:	71bb      	strb	r3, [r7, #6]

  // read the data pins and combine into the 4-bit value: D3_D2_D1_D0
  if (HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin))
 8000f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f7a:	4846      	ldr	r0, [pc, #280]	; (8001094 <keypad_decode+0x12c>)
 8000f7c:	f000 fdfa 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <keypad_decode+0x26>
    data |= bit(0);
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	71bb      	strb	r3, [r7, #6]
  if (HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin))
 8000f8e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f92:	4840      	ldr	r0, [pc, #256]	; (8001094 <keypad_decode+0x12c>)
 8000f94:	f000 fdee 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <keypad_decode+0x3e>
    data |= bit(1);
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	71bb      	strb	r3, [r7, #6]
  if (HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin))
 8000fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000faa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fae:	f000 fde1 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <keypad_decode+0x58>
    data |= bit(2);
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	71bb      	strb	r3, [r7, #6]
  if (HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin))
 8000fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f000 fdd4 	bl	8001b74 <HAL_GPIO_ReadPin>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <keypad_decode+0x72>
    data |= bit(3);
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	f043 0308 	orr.w	r3, r3, #8
 8000fd8:	71bb      	strb	r3, [r7, #6]
  // 1 2 3 A
  // 4 5 6 B
  // 7 8 9 C
  // E 0 F D, where E is * and F is #

  switch(data){
 8000fda:	79bb      	ldrb	r3, [r7, #6]
 8000fdc:	2b0f      	cmp	r3, #15
 8000fde:	d853      	bhi.n	8001088 <keypad_decode+0x120>
 8000fe0:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <keypad_decode+0x80>)
 8000fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe6:	bf00      	nop
 8000fe8:	08001029 	.word	0x08001029
 8000fec:	0800102f 	.word	0x0800102f
 8000ff0:	08001035 	.word	0x08001035
 8000ff4:	0800103b 	.word	0x0800103b
 8000ff8:	08001041 	.word	0x08001041
 8000ffc:	08001047 	.word	0x08001047
 8001000:	0800104d 	.word	0x0800104d
 8001004:	08001053 	.word	0x08001053
 8001008:	08001059 	.word	0x08001059
 800100c:	0800105f 	.word	0x0800105f
 8001010:	08001065 	.word	0x08001065
 8001014:	0800106b 	.word	0x0800106b
 8001018:	08001071 	.word	0x08001071
 800101c:	08001077 	.word	0x08001077
 8001020:	0800107d 	.word	0x0800107d
 8001024:	08001083 	.word	0x08001083
    case 0x0: key = 0x1; break; // fill out the missing key values (?) in this switch statement
 8001028:	2301      	movs	r3, #1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	e02c      	b.n	8001088 <keypad_decode+0x120>
    case 0x1: key = 0x2; break;
 800102e:	2302      	movs	r3, #2
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	e029      	b.n	8001088 <keypad_decode+0x120>
    case 0x2: key = 0x3; break;
 8001034:	2303      	movs	r3, #3
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	e026      	b.n	8001088 <keypad_decode+0x120>
    case 0x3: key = 0xA; break;
 800103a:	230a      	movs	r3, #10
 800103c:	71fb      	strb	r3, [r7, #7]
 800103e:	e023      	b.n	8001088 <keypad_decode+0x120>
    case 0x4: key = 0x4; break;
 8001040:	2304      	movs	r3, #4
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	e020      	b.n	8001088 <keypad_decode+0x120>
    case 0x5: key = 0x5; break;
 8001046:	2305      	movs	r3, #5
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	e01d      	b.n	8001088 <keypad_decode+0x120>
    case 0x6: key = 0x6; break;
 800104c:	2306      	movs	r3, #6
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	e01a      	b.n	8001088 <keypad_decode+0x120>
    case 0x7: key = 0xB; break;
 8001052:	230b      	movs	r3, #11
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	e017      	b.n	8001088 <keypad_decode+0x120>
    case 0x8: key = 0x7; break;
 8001058:	2307      	movs	r3, #7
 800105a:	71fb      	strb	r3, [r7, #7]
 800105c:	e014      	b.n	8001088 <keypad_decode+0x120>
    case 0x9: key = 0x8; break;
 800105e:	2308      	movs	r3, #8
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	e011      	b.n	8001088 <keypad_decode+0x120>
    case 0xA: key = 0x9; break;
 8001064:	2309      	movs	r3, #9
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e00e      	b.n	8001088 <keypad_decode+0x120>
    case 0xB: key = 0xC; break;
 800106a:	230c      	movs	r3, #12
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e00b      	b.n	8001088 <keypad_decode+0x120>
    case 0xC: key = 0xE; break;
 8001070:	230e      	movs	r3, #14
 8001072:	71fb      	strb	r3, [r7, #7]
 8001074:	e008      	b.n	8001088 <keypad_decode+0x120>
    case 0xD: key = 0x0; break;
 8001076:	2300      	movs	r3, #0
 8001078:	71fb      	strb	r3, [r7, #7]
 800107a:	e005      	b.n	8001088 <keypad_decode+0x120>
    case 0xE: key = 0xF; break;
 800107c:	230f      	movs	r3, #15
 800107e:	71fb      	strb	r3, [r7, #7]
 8001080:	e002      	b.n	8001088 <keypad_decode+0x120>
    case 0xF: key = 0xD; break;
 8001082:	230d      	movs	r3, #13
 8001084:	71fb      	strb	r3, [r7, #7]
 8001086:	bf00      	nop
  }

  return key;
 8001088:	79fb      	ldrb	r3, [r7, #7]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	48000400 	.word	0x48000400

08001098 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == DA_Pin)
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d165      	bne.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
	{
		// Read data
		unsigned char key = keypad_decode();  // determine which key was pressed
 80010a8:	f7ff ff5e 	bl	8000f68 <keypad_decode>
 80010ac:	4603      	mov	r3, r0
 80010ae:	73fb      	strb	r3, [r7, #15]
		// RETURNS KEY
		switch (key){
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	2b0e      	cmp	r3, #14
 80010b6:	d85d      	bhi.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
 80010b8:	a201      	add	r2, pc, #4	; (adr r2, 80010c0 <HAL_GPIO_EXTI_Callback+0x28>)
 80010ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010be:	bf00      	nop
 80010c0:	080010fd 	.word	0x080010fd
 80010c4:	08001105 	.word	0x08001105
 80010c8:	0800110d 	.word	0x0800110d
 80010cc:	08001115 	.word	0x08001115
 80010d0:	0800111d 	.word	0x0800111d
 80010d4:	08001125 	.word	0x08001125
 80010d8:	0800112d 	.word	0x0800112d
 80010dc:	08001135 	.word	0x08001135
 80010e0:	0800113d 	.word	0x0800113d
 80010e4:	08001145 	.word	0x08001145
 80010e8:	0800114d 	.word	0x0800114d
 80010ec:	08001155 	.word	0x08001155
 80010f0:	0800115d 	.word	0x0800115d
 80010f4:	08001165 	.word	0x08001165
 80010f8:	0800116d 	.word	0x0800116d
		case 0x1:
			KEY = 1;
 80010fc:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 80010fe:	2201      	movs	r2, #1
 8001100:	701a      	strb	r2, [r3, #0]
			break;
 8001102:	e037      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x2:
			KEY = 2;
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001106:	2202      	movs	r2, #2
 8001108:	701a      	strb	r2, [r3, #0]
			break;
 800110a:	e033      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x3:
			KEY = 3;
 800110c:	4b1b      	ldr	r3, [pc, #108]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800110e:	2203      	movs	r2, #3
 8001110:	701a      	strb	r2, [r3, #0]
			break;
 8001112:	e02f      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x4:
			KEY = 4;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001116:	2204      	movs	r2, #4
 8001118:	701a      	strb	r2, [r3, #0]
			break;
 800111a:	e02b      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x5:
			KEY = 5;
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800111e:	2205      	movs	r2, #5
 8001120:	701a      	strb	r2, [r3, #0]
			break;
 8001122:	e027      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x6:
			KEY = 6;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001126:	2206      	movs	r2, #6
 8001128:	701a      	strb	r2, [r3, #0]
			break;
 800112a:	e023      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x7:
			KEY = 7;
 800112c:	4b13      	ldr	r3, [pc, #76]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800112e:	2207      	movs	r2, #7
 8001130:	701a      	strb	r2, [r3, #0]
			break;
 8001132:	e01f      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x8:
			KEY = 8;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001136:	2208      	movs	r2, #8
 8001138:	701a      	strb	r2, [r3, #0]
			break;
 800113a:	e01b      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0x9:
			KEY = 9;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800113e:	2209      	movs	r2, #9
 8001140:	701a      	strb	r2, [r3, #0]
			break;
 8001142:	e017      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xA:
			KEY = 10;
 8001144:	4b0d      	ldr	r3, [pc, #52]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001146:	220a      	movs	r2, #10
 8001148:	701a      	strb	r2, [r3, #0]
			break;
 800114a:	e013      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xB:
			KEY = 11;
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800114e:	220b      	movs	r2, #11
 8001150:	701a      	strb	r2, [r3, #0]
			break;
 8001152:	e00f      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xC:
			KEY = 12;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001156:	220c      	movs	r2, #12
 8001158:	701a      	strb	r2, [r3, #0]
			break;
 800115a:	e00b      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xD:
			KEY = 13;
 800115c:	4b07      	ldr	r3, [pc, #28]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800115e:	220d      	movs	r2, #13
 8001160:	701a      	strb	r2, [r3, #0]
			break;
 8001162:	e007      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xE:
			KEY = 14;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 8001166:	220e      	movs	r2, #14
 8001168:	701a      	strb	r2, [r3, #0]
			break;
 800116a:	e003      	b.n	8001174 <HAL_GPIO_EXTI_Callback+0xdc>
		case 0xF:
			KEY = 15;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GPIO_EXTI_Callback+0xe4>)
 800116e:	220f      	movs	r2, #15
 8001170:	701a      	strb	r2, [r3, #0]
			break;
 8001172:	bf00      	nop
		}
	}
}
 8001174:	bf00      	nop
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20001308 	.word	0x20001308

08001180 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001184:	b672      	cpsid	i
}
 8001186:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001188:	e7fe      	b.n	8001188 <Error_Handler+0x8>
	...

0800118c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <HAL_MspInit+0x44>)
 8001194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001196:	4a0e      	ldr	r2, [pc, #56]	; (80011d0 <HAL_MspInit+0x44>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6613      	str	r3, [r2, #96]	; 0x60
 800119e:	4b0c      	ldr	r3, [pc, #48]	; (80011d0 <HAL_MspInit+0x44>)
 80011a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011aa:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <HAL_MspInit+0x44>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_MspInit+0x44>)
 80011b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011b4:	6593      	str	r3, [r2, #88]	; 0x58
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <HAL_MspInit+0x44>)
 80011b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011be:	603b      	str	r3, [r7, #0]
 80011c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a17      	ldr	r2, [pc, #92]	; (8001250 <HAL_SPI_MspInit+0x7c>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d128      	bne.n	8001248 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	4b17      	ldr	r3, [pc, #92]	; (8001254 <HAL_SPI_MspInit+0x80>)
 80011f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011fa:	4a16      	ldr	r2, [pc, #88]	; (8001254 <HAL_SPI_MspInit+0x80>)
 80011fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001200:	6613      	str	r3, [r2, #96]	; 0x60
 8001202:	4b14      	ldr	r3, [pc, #80]	; (8001254 <HAL_SPI_MspInit+0x80>)
 8001204:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001206:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120e:	4b11      	ldr	r3, [pc, #68]	; (8001254 <HAL_SPI_MspInit+0x80>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a10      	ldr	r2, [pc, #64]	; (8001254 <HAL_SPI_MspInit+0x80>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b0e      	ldr	r3, [pc, #56]	; (8001254 <HAL_SPI_MspInit+0x80>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001226:	23a0      	movs	r3, #160	; 0xa0
 8001228:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	2303      	movs	r3, #3
 8001234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001236:	2305      	movs	r3, #5
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	4619      	mov	r1, r3
 8001240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001244:	f000 faec 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001248:	bf00      	nop
 800124a:	3728      	adds	r7, #40	; 0x28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40013000 	.word	0x40013000
 8001254:	40021000 	.word	0x40021000

08001258 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800125c:	e7fe      	b.n	800125c <NMI_Handler+0x4>

0800125e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800125e:	b480      	push	{r7}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001262:	e7fe      	b.n	8001262 <HardFault_Handler+0x4>

08001264 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001268:	e7fe      	b.n	8001268 <MemManage_Handler+0x4>

0800126a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800126e:	e7fe      	b.n	800126e <BusFault_Handler+0x4>

08001270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001274:	e7fe      	b.n	8001274 <UsageFault_Handler+0x4>

08001276 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001276:	b480      	push	{r7}
 8001278:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a4:	f000 f966 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}

080012ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DA_Pin);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f000 fc8f 	bl	8001bd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}

080012ba <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ba:	b480      	push	{r7}
 80012bc:	af00      	add	r7, sp, #0
  return 1;
 80012be:	2301      	movs	r3, #1
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr

080012ca <_kill>:

int _kill(int pid, int sig)
{
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b082      	sub	sp, #8
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	6078      	str	r0, [r7, #4]
 80012d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012d4:	f002 f8ee 	bl	80034b4 <__errno>
 80012d8:	4603      	mov	r3, r0
 80012da:	2216      	movs	r2, #22
 80012dc:	601a      	str	r2, [r3, #0]
  return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <_exit>:

void _exit (int status)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012f2:	f04f 31ff 	mov.w	r1, #4294967295
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffe7 	bl	80012ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80012fc:	e7fe      	b.n	80012fc <_exit+0x12>

080012fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	60f8      	str	r0, [r7, #12]
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	e00a      	b.n	8001326 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001310:	f3af 8000 	nop.w
 8001314:	4601      	mov	r1, r0
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	60ba      	str	r2, [r7, #8]
 800131c:	b2ca      	uxtb	r2, r1
 800131e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	3301      	adds	r3, #1
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	429a      	cmp	r2, r3
 800132c:	dbf0      	blt.n	8001310 <_read+0x12>
  }

  return len;
 800132e:	687b      	ldr	r3, [r7, #4]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	e009      	b.n	800135e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1c5a      	adds	r2, r3, #1
 800134e:	60ba      	str	r2, [r7, #8]
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	3301      	adds	r3, #1
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	429a      	cmp	r2, r3
 8001364:	dbf1      	blt.n	800134a <_write+0x12>
  }
  return len;
 8001366:	687b      	ldr	r3, [r7, #4]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3718      	adds	r7, #24
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <_close>:

int _close(int file)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001378:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137c:	4618      	mov	r0, r3
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001398:	605a      	str	r2, [r3, #4]
  return 0;
 800139a:	2300      	movs	r3, #0
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <_isatty>:

int _isatty(int file)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b0:	2301      	movs	r3, #1
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013be:	b480      	push	{r7}
 80013c0:	b085      	sub	sp, #20
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013ca:	2300      	movs	r3, #0
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f002 f854 	bl	80034b4 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20018000 	.word	0x20018000
 8001438:	00000400 	.word	0x00000400
 800143c:	2000130c 	.word	0x2000130c
 8001440:	20001460 	.word	0x20001460

08001444 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f002 f813 	bl	80034c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7ff f9ad 	bl	80007f8 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80014ac:	08004244 	.word	0x08004244
  ldr r2, =_sbss
 80014b0:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80014b4:	20001460 	.word	0x20001460

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>
	...

080014bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c2:	2300      	movs	r3, #0
 80014c4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <HAL_Init+0x3c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a0b      	ldr	r2, [pc, #44]	; (80014f8 <HAL_Init+0x3c>)
 80014cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d2:	2003      	movs	r0, #3
 80014d4:	f000 f962 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f80f 	bl	80014fc <HAL_InitTick>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d002      	beq.n	80014ea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	e001      	b.n	80014ee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ea:	f7ff fe4f 	bl	800118c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014ee:	79fb      	ldrb	r3, [r7, #7]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40022000 	.word	0x40022000

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001508:	4b17      	ldr	r3, [pc, #92]	; (8001568 <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_InitTick+0x70>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f96d 	bl	8001806 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d809      	bhi.n	800154c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 f937 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_InitTick+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000070 	.word	0x20000070
 800156c:	20000068 	.word	0x20000068
 8001570:	2000006c 	.word	0x2000006c

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	; (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000070 	.word	0x20000070
 8001598:	20001310 	.word	0x20001310

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20001310 	.word	0x20001310

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	; (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	20000070 	.word	0x20000070

080015fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f003 0307 	and.w	r3, r3, #7
 800160a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800160c:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001612:	68ba      	ldr	r2, [r7, #8]
 8001614:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001618:	4013      	ands	r3, r2
 800161a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001620:	68bb      	ldr	r3, [r7, #8]
 8001622:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001624:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001628:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800162c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800162e:	4a04      	ldr	r2, [pc, #16]	; (8001640 <__NVIC_SetPriorityGrouping+0x44>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	60d3      	str	r3, [r2, #12]
}
 8001634:	bf00      	nop
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <__NVIC_GetPriorityGrouping+0x18>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	f003 0307 	and.w	r3, r3, #7
}
 8001652:	4618      	mov	r0, r3
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	e000ed00 	.word	0xe000ed00

08001660 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800166a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	db0b      	blt.n	800168a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <__NVIC_EnableIRQ+0x38>)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	095b      	lsrs	r3, r3, #5
 8001680:	2001      	movs	r0, #1
 8001682:	fa00 f202 	lsl.w	r2, r0, r2
 8001686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800168a:	bf00      	nop
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000e100 	.word	0xe000e100

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff29 	bl	80015fc <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff3e 	bl	8001644 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff ff31 	bl	8001660 <__NVIC_EnableIRQ>
}
 80017fe:	bf00      	nop
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}

08001806 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7ff ffa2 	bl	8001758 <SysTick_Config>
 8001814:	4603      	mov	r3, r0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e17f      	b.n	8001b30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8171 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x40>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d118      	bne.n	8001900 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ac 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x334>)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x22a>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00c      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00a      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a62:	2300      	movs	r3, #0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a74:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x334>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f ae78 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	48001400 	.word	0x48001400
 8001b6c:	48001800 	.word	0x48001800
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	691a      	ldr	r2, [r3, #16]
 8001b84:	887b      	ldrh	r3, [r7, #2]
 8001b86:	4013      	ands	r3, r2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	73fb      	strb	r3, [r7, #15]
 8001b90:	e001      	b.n	8001b96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bb4:	787b      	ldrb	r3, [r7, #1]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bba:	887a      	ldrh	r2, [r7, #2]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc0:	e002      	b.n	8001bc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be0:	695a      	ldr	r2, [r3, #20]
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	4013      	ands	r3, r2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d006      	beq.n	8001bf8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bec:	88fb      	ldrh	r3, [r7, #6]
 8001bee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fa50 	bl	8001098 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40010400 	.word	0x40010400

08001c04 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <HAL_PWREx_GetVoltageRange+0x18>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c2e:	d130      	bne.n	8001c92 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c30:	4b23      	ldr	r3, [pc, #140]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c3c:	d038      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001c3e:	4b20      	ldr	r3, [pc, #128]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c48:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001c4e:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2232      	movs	r2, #50	; 0x32
 8001c54:	fb02 f303 	mul.w	r3, r2, r3
 8001c58:	4a1b      	ldr	r2, [pc, #108]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5e:	0c9b      	lsrs	r3, r3, #18
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c64:	e002      	b.n	8001c6c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	3b01      	subs	r3, #1
 8001c6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c78:	d102      	bne.n	8001c80 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d1f2      	bne.n	8001c66 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c8c:	d110      	bne.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e00f      	b.n	8001cb2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001c92:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c9e:	d007      	beq.n	8001cb0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ca8:	4a05      	ldr	r2, [pc, #20]	; (8001cc0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001caa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40007000 	.word	0x40007000
 8001cc4:	20000068 	.word	0x20000068
 8001cc8:	431bde83 	.word	0x431bde83

08001ccc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d101      	bne.n	8001cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e3ca      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cde:	4b97      	ldr	r3, [pc, #604]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	f003 030c 	and.w	r3, r3, #12
 8001ce6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ce8:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 80e4 	beq.w	8001ec8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d007      	beq.n	8001d16 <HAL_RCC_OscConfig+0x4a>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	f040 808b 	bne.w	8001e24 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	f040 8087 	bne.w	8001e24 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d16:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d005      	beq.n	8001d2e <HAL_RCC_OscConfig+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	699b      	ldr	r3, [r3, #24]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d101      	bne.n	8001d2e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e3a2      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d004      	beq.n	8001d48 <HAL_RCC_OscConfig+0x7c>
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d46:	e005      	b.n	8001d54 <HAL_RCC_OscConfig+0x88>
 8001d48:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4e:	091b      	lsrs	r3, r3, #4
 8001d50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d223      	bcs.n	8001da0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f000 fd1d 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e383      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d6c:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a72      	ldr	r2, [pc, #456]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d72:	f043 0308 	orr.w	r3, r3, #8
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	496d      	ldr	r1, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d8a:	4b6c      	ldr	r3, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	021b      	lsls	r3, r3, #8
 8001d98:	4968      	ldr	r1, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	604b      	str	r3, [r1, #4]
 8001d9e:	e025      	b.n	8001dec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	6013      	str	r3, [r2, #0]
 8001dac:	4b63      	ldr	r3, [pc, #396]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4960      	ldr	r1, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dbe:	4b5f      	ldr	r3, [pc, #380]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	69db      	ldr	r3, [r3, #28]
 8001dca:	021b      	lsls	r3, r3, #8
 8001dcc:	495b      	ldr	r1, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d109      	bne.n	8001dec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6a1b      	ldr	r3, [r3, #32]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f000 fcdd 	bl	800279c <RCC_SetFlashLatencyFromMSIRange>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e343      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dec:	f000 fc4a 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8001df0:	4602      	mov	r2, r0
 8001df2:	4b52      	ldr	r3, [pc, #328]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	4950      	ldr	r1, [pc, #320]	; (8001f40 <HAL_RCC_OscConfig+0x274>)
 8001dfe:	5ccb      	ldrb	r3, [r1, r3]
 8001e00:	f003 031f 	and.w	r3, r3, #31
 8001e04:	fa22 f303 	lsr.w	r3, r2, r3
 8001e08:	4a4e      	ldr	r2, [pc, #312]	; (8001f44 <HAL_RCC_OscConfig+0x278>)
 8001e0a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001e0c:	4b4e      	ldr	r3, [pc, #312]	; (8001f48 <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fb73 	bl	80014fc <HAL_InitTick>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d052      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	e327      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d032      	beq.n	8001e92 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001e2c:	4b43      	ldr	r3, [pc, #268]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a42      	ldr	r2, [pc, #264]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e38:	f7ff fbb0 	bl	800159c <HAL_GetTick>
 8001e3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e3e:	e008      	b.n	8001e52 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e40:	f7ff fbac 	bl	800159c <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d901      	bls.n	8001e52 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e310      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e52:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d0f0      	beq.n	8001e40 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e5e:	4b37      	ldr	r3, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e64:	f043 0308 	orr.w	r3, r3, #8
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b34      	ldr	r3, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
 8001e76:	4931      	ldr	r1, [pc, #196]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e7c:	4b2f      	ldr	r3, [pc, #188]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	021b      	lsls	r3, r3, #8
 8001e8a:	492c      	ldr	r1, [pc, #176]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	604b      	str	r3, [r1, #4]
 8001e90:	e01a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e92:	4b2a      	ldr	r3, [pc, #168]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a29      	ldr	r2, [pc, #164]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fb7d 	bl	800159c <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fb79 	bl	800159c <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2dd      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1f0      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x1da>
 8001ec4:	e000      	b.n	8001ec8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ec6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d074      	beq.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d005      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x21a>
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	2b0c      	cmp	r3, #12
 8001ede:	d10e      	bne.n	8001efe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d10b      	bne.n	8001efe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee6:	4b15      	ldr	r3, [pc, #84]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d064      	beq.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d160      	bne.n	8001fbc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e2ba      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f06:	d106      	bne.n	8001f16 <HAL_RCC_OscConfig+0x24a>
 8001f08:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a0b      	ldr	r2, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	e026      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f1e:	d115      	bne.n	8001f4c <HAL_RCC_OscConfig+0x280>
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a02      	ldr	r2, [pc, #8]	; (8001f3c <HAL_RCC_OscConfig+0x270>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e014      	b.n	8001f64 <HAL_RCC_OscConfig+0x298>
 8001f3a:	bf00      	nop
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	0800411c 	.word	0x0800411c
 8001f44:	20000068 	.word	0x20000068
 8001f48:	2000006c 	.word	0x2000006c
 8001f4c:	4ba0      	ldr	r3, [pc, #640]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a9f      	ldr	r2, [pc, #636]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b9d      	ldr	r3, [pc, #628]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a9c      	ldr	r2, [pc, #624]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d013      	beq.n	8001f94 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6c:	f7ff fb16 	bl	800159c <HAL_GetTick>
 8001f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	e008      	b.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f74:	f7ff fb12 	bl	800159c <HAL_GetTick>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	2b64      	cmp	r3, #100	; 0x64
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e276      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f86:	4b92      	ldr	r3, [pc, #584]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d0f0      	beq.n	8001f74 <HAL_RCC_OscConfig+0x2a8>
 8001f92:	e014      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f94:	f7ff fb02 	bl	800159c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f9c:	f7ff fafe 	bl	800159c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b64      	cmp	r3, #100	; 0x64
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e262      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fae:	4b88      	ldr	r3, [pc, #544]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d1f0      	bne.n	8001f9c <HAL_RCC_OscConfig+0x2d0>
 8001fba:	e000      	b.n	8001fbe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d060      	beq.n	800208c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_OscConfig+0x310>
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d119      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d116      	bne.n	800200a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fdc:	4b7c      	ldr	r3, [pc, #496]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x328>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e23f      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b76      	ldr	r3, [pc, #472]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	691b      	ldr	r3, [r3, #16]
 8002000:	061b      	lsls	r3, r3, #24
 8002002:	4973      	ldr	r1, [pc, #460]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002004:	4313      	orrs	r3, r2
 8002006:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002008:	e040      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002012:	4b6f      	ldr	r3, [pc, #444]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a6e      	ldr	r2, [pc, #440]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff fabd 	bl	800159c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002026:	f7ff fab9 	bl	800159c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e21d      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002038:	4b65      	ldr	r3, [pc, #404]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	691b      	ldr	r3, [r3, #16]
 8002050:	061b      	lsls	r3, r3, #24
 8002052:	495f      	ldr	r1, [pc, #380]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002054:	4313      	orrs	r3, r2
 8002056:	604b      	str	r3, [r1, #4]
 8002058:	e018      	b.n	800208c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800205a:	4b5d      	ldr	r3, [pc, #372]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a5c      	ldr	r2, [pc, #368]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002060:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002064:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002066:	f7ff fa99 	bl	800159c <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800206e:	f7ff fa95 	bl	800159c <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e1f9      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002080:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1f0      	bne.n	800206e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	2b00      	cmp	r3, #0
 8002096:	d03c      	beq.n	8002112 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d01c      	beq.n	80020da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020a0:	4b4b      	ldr	r3, [pc, #300]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	4a4a      	ldr	r2, [pc, #296]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020a8:	f043 0301 	orr.w	r3, r3, #1
 80020ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b0:	f7ff fa74 	bl	800159c <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b8:	f7ff fa70 	bl	800159c <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e1d4      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020ca:	4b41      	ldr	r3, [pc, #260]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020d0:	f003 0302 	and.w	r3, r3, #2
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0ef      	beq.n	80020b8 <HAL_RCC_OscConfig+0x3ec>
 80020d8:	e01b      	b.n	8002112 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020da:	4b3d      	ldr	r3, [pc, #244]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020e0:	4a3b      	ldr	r2, [pc, #236]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80020e2:	f023 0301 	bic.w	r3, r3, #1
 80020e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ea:	f7ff fa57 	bl	800159c <HAL_GetTick>
 80020ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020f2:	f7ff fa53 	bl	800159c <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e1b7      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002104:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002106:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1ef      	bne.n	80020f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	f000 80a6 	beq.w	800226c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2300      	movs	r3, #0
 8002122:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002124:	4b2a      	ldr	r3, [pc, #168]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002128:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10d      	bne.n	800214c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002134:	4a26      	ldr	r2, [pc, #152]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213a:	6593      	str	r3, [r2, #88]	; 0x58
 800213c:	4b24      	ldr	r3, [pc, #144]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800213e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002148:	2301      	movs	r3, #1
 800214a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800214c:	4b21      	ldr	r3, [pc, #132]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d118      	bne.n	800218a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002158:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 800215e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002162:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002164:	f7ff fa1a 	bl	800159c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216c:	f7ff fa16 	bl	800159c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e17a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217e:	4b15      	ldr	r3, [pc, #84]	; (80021d4 <HAL_RCC_OscConfig+0x508>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0f0      	beq.n	800216c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d108      	bne.n	80021a4 <HAL_RCC_OscConfig+0x4d8>
 8002192:	4b0f      	ldr	r3, [pc, #60]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 8002194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002198:	4a0d      	ldr	r2, [pc, #52]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a2:	e029      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	2b05      	cmp	r3, #5
 80021aa:	d115      	bne.n	80021d8 <HAL_RCC_OscConfig+0x50c>
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b2:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021b4:	f043 0304 	orr.w	r3, r3, #4
 80021b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021bc:	4b04      	ldr	r3, [pc, #16]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	4a03      	ldr	r2, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x504>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021cc:	e014      	b.n	80021f8 <HAL_RCC_OscConfig+0x52c>
 80021ce:	bf00      	nop
 80021d0:	40021000 	.word	0x40021000
 80021d4:	40007000 	.word	0x40007000
 80021d8:	4b9c      	ldr	r3, [pc, #624]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80021da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021de:	4a9b      	ldr	r2, [pc, #620]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80021e0:	f023 0301 	bic.w	r3, r3, #1
 80021e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021e8:	4b98      	ldr	r3, [pc, #608]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	4a97      	ldr	r2, [pc, #604]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d016      	beq.n	800222e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002200:	f7ff f9cc 	bl	800159c <HAL_GetTick>
 8002204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002206:	e00a      	b.n	800221e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002208:	f7ff f9c8 	bl	800159c <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	f241 3288 	movw	r2, #5000	; 0x1388
 8002216:	4293      	cmp	r3, r2
 8002218:	d901      	bls.n	800221e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e12a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800221e:	4b8b      	ldr	r3, [pc, #556]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002220:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d0ed      	beq.n	8002208 <HAL_RCC_OscConfig+0x53c>
 800222c:	e015      	b.n	800225a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222e:	f7ff f9b5 	bl	800159c <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002234:	e00a      	b.n	800224c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff f9b1 	bl	800159c <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	f241 3288 	movw	r2, #5000	; 0x1388
 8002244:	4293      	cmp	r3, r2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e113      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800224c:	4b7f      	ldr	r3, [pc, #508]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800224e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1ed      	bne.n	8002236 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800225a:	7ffb      	ldrb	r3, [r7, #31]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d105      	bne.n	800226c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002260:	4b7a      	ldr	r3, [pc, #488]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a79      	ldr	r2, [pc, #484]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002270:	2b00      	cmp	r3, #0
 8002272:	f000 80fe 	beq.w	8002472 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	2b02      	cmp	r3, #2
 800227c:	f040 80d0 	bne.w	8002420 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002280:	4b72      	ldr	r3, [pc, #456]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	429a      	cmp	r2, r3
 8002292:	d130      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229e:	3b01      	subs	r3, #1
 80022a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d127      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022c0:	2a07      	cmp	r2, #7
 80022c2:	bf14      	ite	ne
 80022c4:	2201      	movne	r2, #1
 80022c6:	2200      	moveq	r2, #0
 80022c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d113      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	085b      	lsrs	r3, r3, #1
 80022da:	3b01      	subs	r3, #1
 80022dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80022de:	429a      	cmp	r2, r3
 80022e0:	d109      	bne.n	80022f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	085b      	lsrs	r3, r3, #1
 80022ee:	3b01      	subs	r3, #1
 80022f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d06e      	beq.n	80023d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d069      	beq.n	80023d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022fc:	4b53      	ldr	r3, [pc, #332]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002308:	4b50      	ldr	r3, [pc, #320]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e0ad      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4b      	ldr	r2, [pc, #300]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800231e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002324:	f7ff f93a 	bl	800159c <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232c:	f7ff f936 	bl	800159c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e09a      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800233e:	4b43      	ldr	r3, [pc, #268]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800234a:	4b40      	ldr	r3, [pc, #256]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b40      	ldr	r3, [pc, #256]	; (8002450 <HAL_RCC_OscConfig+0x784>)
 8002350:	4013      	ands	r3, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002356:	687a      	ldr	r2, [r7, #4]
 8002358:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800235a:	3a01      	subs	r2, #1
 800235c:	0112      	lsls	r2, r2, #4
 800235e:	4311      	orrs	r1, r2
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002364:	0212      	lsls	r2, r2, #8
 8002366:	4311      	orrs	r1, r2
 8002368:	687a      	ldr	r2, [r7, #4]
 800236a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800236c:	0852      	lsrs	r2, r2, #1
 800236e:	3a01      	subs	r2, #1
 8002370:	0552      	lsls	r2, r2, #21
 8002372:	4311      	orrs	r1, r2
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002378:	0852      	lsrs	r2, r2, #1
 800237a:	3a01      	subs	r2, #1
 800237c:	0652      	lsls	r2, r2, #25
 800237e:	4311      	orrs	r1, r2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002384:	0912      	lsrs	r2, r2, #4
 8002386:	0452      	lsls	r2, r2, #17
 8002388:	430a      	orrs	r2, r1
 800238a:	4930      	ldr	r1, [pc, #192]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800238c:	4313      	orrs	r3, r2
 800238e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002390:	4b2e      	ldr	r3, [pc, #184]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2d      	ldr	r2, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800239a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800239c:	4b2b      	ldr	r3, [pc, #172]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a2a      	ldr	r2, [pc, #168]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80023a8:	f7ff f8f8 	bl	800159c <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023b0:	f7ff f8f4 	bl	800159c <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e058      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023c2:	4b22      	ldr	r3, [pc, #136]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023ce:	e050      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e04f      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d4:	4b1d      	ldr	r3, [pc, #116]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d148      	bne.n	8002472 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023e0:	4b1a      	ldr	r3, [pc, #104]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023ec:	4b17      	ldr	r3, [pc, #92]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a16      	ldr	r2, [pc, #88]	; (800244c <HAL_RCC_OscConfig+0x780>)
 80023f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023f8:	f7ff f8d0 	bl	800159c <HAL_GetTick>
 80023fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff f8cc 	bl	800159c <HAL_GetTick>
 8002404:	4602      	mov	r2, r0
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e030      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002412:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800241a:	2b00      	cmp	r3, #0
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x734>
 800241e:	e028      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d023      	beq.n	800246e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002426:	4b09      	ldr	r3, [pc, #36]	; (800244c <HAL_RCC_OscConfig+0x780>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a08      	ldr	r2, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x780>)
 800242c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002432:	f7ff f8b3 	bl	800159c <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002438:	e00c      	b.n	8002454 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800243a:	f7ff f8af 	bl	800159c <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d905      	bls.n	8002454 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e013      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
 800244c:	40021000 	.word	0x40021000
 8002450:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1ec      	bne.n	800243a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002462:	68da      	ldr	r2, [r3, #12]
 8002464:	4905      	ldr	r1, [pc, #20]	; (800247c <HAL_RCC_OscConfig+0x7b0>)
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <HAL_RCC_OscConfig+0x7b4>)
 8002468:	4013      	ands	r3, r2
 800246a:	60cb      	str	r3, [r1, #12]
 800246c:	e001      	b.n	8002472 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e000      	b.n	8002474 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3720      	adds	r7, #32
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40021000 	.word	0x40021000
 8002480:	feeefffc 	.word	0xfeeefffc

08002484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d101      	bne.n	8002498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0e7      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002498:	4b75      	ldr	r3, [pc, #468]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0307 	and.w	r3, r3, #7
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d910      	bls.n	80024c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024a6:	4b72      	ldr	r3, [pc, #456]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 0207 	bic.w	r2, r3, #7
 80024ae:	4970      	ldr	r1, [pc, #448]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b6:	4b6e      	ldr	r3, [pc, #440]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0307 	and.w	r3, r3, #7
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d001      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e0cf      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d908      	bls.n	80024f6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e4:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	4960      	ldr	r1, [pc, #384]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d04c      	beq.n	800259c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	4b5a      	ldr	r3, [pc, #360]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d121      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e0a6      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b02      	cmp	r3, #2
 8002520:	d107      	bne.n	8002532 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002522:	4b54      	ldr	r3, [pc, #336]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d115      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e09a      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d107      	bne.n	800254a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253a:	4b4e      	ldr	r3, [pc, #312]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e08e      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254a:	4b4a      	ldr	r3, [pc, #296]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e086      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800255a:	4b46      	ldr	r3, [pc, #280]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f023 0203 	bic.w	r2, r3, #3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4943      	ldr	r1, [pc, #268]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	4313      	orrs	r3, r2
 800256a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800256c:	f7ff f816 	bl	800159c <HAL_GetTick>
 8002570:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002572:	e00a      	b.n	800258a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002574:	f7ff f812 	bl	800159c <HAL_GetTick>
 8002578:	4602      	mov	r2, r0
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1ad3      	subs	r3, r2, r3
 800257e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e06e      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800258a:	4b3a      	ldr	r3, [pc, #232]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 020c 	and.w	r2, r3, #12
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	429a      	cmp	r2, r3
 800259a:	d1eb      	bne.n	8002574 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d010      	beq.n	80025ca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689a      	ldr	r2, [r3, #8]
 80025ac:	4b31      	ldr	r3, [pc, #196]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d208      	bcs.n	80025ca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b8:	4b2e      	ldr	r3, [pc, #184]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	492b      	ldr	r1, [pc, #172]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025ca:	4b29      	ldr	r3, [pc, #164]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d210      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d8:	4b25      	ldr	r3, [pc, #148]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f023 0207 	bic.w	r2, r3, #7
 80025e0:	4923      	ldr	r1, [pc, #140]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <HAL_RCC_ClockConfig+0x1ec>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e036      	b.n	8002668 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0304 	and.w	r3, r3, #4
 8002602:	2b00      	cmp	r3, #0
 8002604:	d008      	beq.n	8002618 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002606:	4b1b      	ldr	r3, [pc, #108]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4918      	ldr	r1, [pc, #96]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b00      	cmp	r3, #0
 8002622:	d009      	beq.n	8002638 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002624:	4b13      	ldr	r3, [pc, #76]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4910      	ldr	r1, [pc, #64]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002634:	4313      	orrs	r3, r2
 8002636:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002638:	f000 f824 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 800263c:	4602      	mov	r2, r0
 800263e:	4b0d      	ldr	r3, [pc, #52]	; (8002674 <HAL_RCC_ClockConfig+0x1f0>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	091b      	lsrs	r3, r3, #4
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	490b      	ldr	r1, [pc, #44]	; (8002678 <HAL_RCC_ClockConfig+0x1f4>)
 800264a:	5ccb      	ldrb	r3, [r1, r3]
 800264c:	f003 031f 	and.w	r3, r3, #31
 8002650:	fa22 f303 	lsr.w	r3, r2, r3
 8002654:	4a09      	ldr	r2, [pc, #36]	; (800267c <HAL_RCC_ClockConfig+0x1f8>)
 8002656:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <HAL_RCC_ClockConfig+0x1fc>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7fe ff4d 	bl	80014fc <HAL_InitTick>
 8002662:	4603      	mov	r3, r0
 8002664:	72fb      	strb	r3, [r7, #11]

  return status;
 8002666:	7afb      	ldrb	r3, [r7, #11]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	40022000 	.word	0x40022000
 8002674:	40021000 	.word	0x40021000
 8002678:	0800411c 	.word	0x0800411c
 800267c:	20000068 	.word	0x20000068
 8002680:	2000006c 	.word	0x2000006c

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	b480      	push	{r7}
 8002686:	b089      	sub	sp, #36	; 0x24
 8002688:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002692:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d005      	beq.n	80026b8 <HAL_RCC_GetSysClockFreq+0x34>
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b0c      	cmp	r3, #12
 80026b0:	d121      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d11e      	bne.n	80026f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026b8:	4b34      	ldr	r3, [pc, #208]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0308 	and.w	r3, r3, #8
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d107      	bne.n	80026d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	f003 030f 	and.w	r3, r3, #15
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	e005      	b.n	80026e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026d4:	4b2d      	ldr	r3, [pc, #180]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	091b      	lsrs	r3, r3, #4
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026e0:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10d      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f4:	e00a      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d102      	bne.n	8002702 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026fc:	4b25      	ldr	r3, [pc, #148]	; (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 80026fe:	61bb      	str	r3, [r7, #24]
 8002700:	e004      	b.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	2b08      	cmp	r3, #8
 8002706:	d101      	bne.n	800270c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002708:	4b23      	ldr	r3, [pc, #140]	; (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 800270a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	2b0c      	cmp	r3, #12
 8002710:	d134      	bne.n	800277c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002712:	4b1e      	ldr	r3, [pc, #120]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	f003 0303 	and.w	r3, r3, #3
 800271a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0xa6>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d003      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0xac>
 8002728:	e005      	b.n	8002736 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800272a:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <HAL_RCC_GetSysClockFreq+0x110>)
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	e005      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <HAL_RCC_GetSysClockFreq+0x114>)
 8002732:	617b      	str	r3, [r7, #20]
      break;
 8002734:	e002      	b.n	800273c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	617b      	str	r3, [r7, #20]
      break;
 800273a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800273c:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	3301      	adds	r3, #1
 8002748:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800274a:	4b10      	ldr	r3, [pc, #64]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	0a1b      	lsrs	r3, r3, #8
 8002750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	fb03 f202 	mul.w	r2, r3, r2
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002762:	4b0a      	ldr	r3, [pc, #40]	; (800278c <HAL_RCC_GetSysClockFreq+0x108>)
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	0e5b      	lsrs	r3, r3, #25
 8002768:	f003 0303 	and.w	r3, r3, #3
 800276c:	3301      	adds	r3, #1
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	fbb2 f3f3 	udiv	r3, r2, r3
 800277a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800277c:	69bb      	ldr	r3, [r7, #24]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3724      	adds	r7, #36	; 0x24
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	40021000 	.word	0x40021000
 8002790:	0800412c 	.word	0x0800412c
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a4:	2300      	movs	r3, #0
 80027a6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a8:	4b2a      	ldr	r3, [pc, #168]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d003      	beq.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b4:	f7ff fa26 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 80027b8:	6178      	str	r0, [r7, #20]
 80027ba:	e014      	b.n	80027e6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	4b25      	ldr	r3, [pc, #148]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c0:	4a24      	ldr	r2, [pc, #144]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c6:	6593      	str	r3, [r2, #88]	; 0x58
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d0:	60fb      	str	r3, [r7, #12]
 80027d2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d4:	f7ff fa16 	bl	8001c04 <HAL_PWREx_GetVoltageRange>
 80027d8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027da:	4b1e      	ldr	r3, [pc, #120]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027de:	4a1d      	ldr	r2, [pc, #116]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027ec:	d10b      	bne.n	8002806 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d919      	bls.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2ba0      	cmp	r3, #160	; 0xa0
 80027f8:	d902      	bls.n	8002800 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027fa:	2302      	movs	r3, #2
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	e013      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002800:	2301      	movs	r3, #1
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	e010      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b80      	cmp	r3, #128	; 0x80
 800280a:	d902      	bls.n	8002812 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800280c:	2303      	movs	r3, #3
 800280e:	613b      	str	r3, [r7, #16]
 8002810:	e00a      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2b80      	cmp	r3, #128	; 0x80
 8002816:	d102      	bne.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002818:	2302      	movs	r3, #2
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	e004      	b.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b70      	cmp	r3, #112	; 0x70
 8002822:	d101      	bne.n	8002828 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002824:	2301      	movs	r3, #1
 8002826:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 0207 	bic.w	r2, r3, #7
 8002830:	4909      	ldr	r1, [pc, #36]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002838:	4b07      	ldr	r3, [pc, #28]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	429a      	cmp	r2, r3
 8002844:	d001      	beq.n	800284a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3718      	adds	r7, #24
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40021000 	.word	0x40021000
 8002858:	40022000 	.word	0x40022000

0800285c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b084      	sub	sp, #16
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e095      	b.n	800299a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d009      	beq.n	8002894 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	61da      	str	r2, [r3, #28]
 8002886:	e005      	b.n	8002894 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d106      	bne.n	80028b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80028ae:	6878      	ldr	r0, [r7, #4]
 80028b0:	f7fe fc90 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2202      	movs	r2, #2
 80028b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028d4:	d902      	bls.n	80028dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e002      	b.n	80028e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80028dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80028ea:	d007      	beq.n	80028fc <HAL_SPI_Init+0xa0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028f4:	d002      	beq.n	80028fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	f003 0301 	and.w	r3, r3, #1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69db      	ldr	r3, [r3, #28]
 8002930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002934:	431a      	orrs	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293e:	ea42 0103 	orr.w	r1, r2, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	430a      	orrs	r2, r1
 8002950:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	0c1b      	lsrs	r3, r3, #16
 8002958:	f003 0204 	and.w	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002978:	ea42 0103 	orr.w	r1, r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b088      	sub	sp, #32
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	603b      	str	r3, [r7, #0]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_SPI_Transmit+0x22>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e15f      	b.n	8002c84 <HAL_SPI_Transmit+0x2e2>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2201      	movs	r2, #1
 80029c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029cc:	f7fe fde6 	bl	800159c <HAL_GetTick>
 80029d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80029d2:	88fb      	ldrh	r3, [r7, #6]
 80029d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d002      	beq.n	80029e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80029e2:	2302      	movs	r3, #2
 80029e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029e6:	e148      	b.n	8002c7a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d002      	beq.n	80029f4 <HAL_SPI_Transmit+0x52>
 80029ee:	88fb      	ldrh	r3, [r7, #6]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80029f8:	e13f      	b.n	8002c7a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2203      	movs	r2, #3
 80029fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2200      	movs	r2, #0
 8002a06:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	88fa      	ldrh	r2, [r7, #6]
 8002a12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	88fa      	ldrh	r2, [r7, #6]
 8002a18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2200      	movs	r2, #0
 8002a34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a44:	d10f      	bne.n	8002a66 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a64:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a70:	2b40      	cmp	r3, #64	; 0x40
 8002a72:	d007      	beq.n	8002a84 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a8c:	d94f      	bls.n	8002b2e <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d002      	beq.n	8002a9c <HAL_SPI_Transmit+0xfa>
 8002a96:	8afb      	ldrh	r3, [r7, #22]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d142      	bne.n	8002b22 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	881a      	ldrh	r2, [r3, #0]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	1c9a      	adds	r2, r3, #2
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ac0:	e02f      	b.n	8002b22 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d112      	bne.n	8002af6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	881a      	ldrh	r2, [r3, #0]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	1c9a      	adds	r2, r3, #2
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002af4:	e015      	b.n	8002b22 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002af6:	f7fe fd51 	bl	800159c <HAL_GetTick>
 8002afa:	4602      	mov	r2, r0
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d803      	bhi.n	8002b0e <HAL_SPI_Transmit+0x16c>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b0c:	d102      	bne.n	8002b14 <HAL_SPI_Transmit+0x172>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d106      	bne.n	8002b22 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002b20:	e0ab      	b.n	8002c7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1ca      	bne.n	8002ac2 <HAL_SPI_Transmit+0x120>
 8002b2c:	e080      	b.n	8002c30 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_SPI_Transmit+0x19a>
 8002b36:	8afb      	ldrh	r3, [r7, #22]
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d174      	bne.n	8002c26 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d912      	bls.n	8002b6c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b4a:	881a      	ldrh	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b56:	1c9a      	adds	r2, r3, #2
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	3b02      	subs	r3, #2
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b6a:	e05c      	b.n	8002c26 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	330c      	adds	r3, #12
 8002b76:	7812      	ldrb	r2, [r2, #0]
 8002b78:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7e:	1c5a      	adds	r2, r3, #1
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002b92:	e048      	b.n	8002c26 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d12b      	bne.n	8002bfa <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d912      	bls.n	8002bd2 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbc:	1c9a      	adds	r2, r3, #2
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	3b02      	subs	r3, #2
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bd0:	e029      	b.n	8002c26 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	330c      	adds	r3, #12
 8002bdc:	7812      	ldrb	r2, [r2, #0]
 8002bde:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bf8:	e015      	b.n	8002c26 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bfa:	f7fe fccf 	bl	800159c <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d803      	bhi.n	8002c12 <HAL_SPI_Transmit+0x270>
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c10:	d102      	bne.n	8002c18 <HAL_SPI_Transmit+0x276>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d106      	bne.n	8002c26 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002c24:	e029      	b.n	8002c7a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1b1      	bne.n	8002b94 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	6839      	ldr	r1, [r7, #0]
 8002c34:	68f8      	ldr	r0, [r7, #12]
 8002c36:	f000 f947 	bl	8002ec8 <SPI_EndRxTxTransaction>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10a      	bne.n	8002c64 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	613b      	str	r3, [r7, #16]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	613b      	str	r3, [r7, #16]
 8002c62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d002      	beq.n	8002c72 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e003      	b.n	8002c7a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002c82:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b088      	sub	sp, #32
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c9c:	f7fe fc7e 	bl	800159c <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	4413      	add	r3, r2
 8002caa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002cac:	f7fe fc76 	bl	800159c <HAL_GetTick>
 8002cb0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002cb2:	4b39      	ldr	r3, [pc, #228]	; (8002d98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	015b      	lsls	r3, r3, #5
 8002cb8:	0d1b      	lsrs	r3, r3, #20
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cc2:	e054      	b.n	8002d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cca:	d050      	beq.n	8002d6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002ccc:	f7fe fc66 	bl	800159c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	69bb      	ldr	r3, [r7, #24]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	69fa      	ldr	r2, [r7, #28]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d902      	bls.n	8002ce2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d13d      	bne.n	8002d5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cf0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002cfa:	d111      	bne.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d04:	d004      	beq.n	8002d10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d0e:	d107      	bne.n	8002d20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d28:	d10f      	bne.n	8002d4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e017      	b.n	8002d8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d101      	bne.n	8002d68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	4013      	ands	r3, r2
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	bf0c      	ite	eq
 8002d7e:	2301      	moveq	r3, #1
 8002d80:	2300      	movne	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	461a      	mov	r2, r3
 8002d86:	79fb      	ldrb	r3, [r7, #7]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d19b      	bne.n	8002cc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3720      	adds	r7, #32
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	20000068 	.word	0x20000068

08002d9c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b08a      	sub	sp, #40	; 0x28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002dae:	f7fe fbf5 	bl	800159c <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	4413      	add	r3, r2
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002dbe:	f7fe fbed 	bl	800159c <HAL_GetTick>
 8002dc2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	330c      	adds	r3, #12
 8002dca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002dcc:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	00da      	lsls	r2, r3, #3
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	0d1b      	lsrs	r3, r3, #20
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002de4:	e060      	b.n	8002ea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002dec:	d107      	bne.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0x62>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e04:	d050      	beq.n	8002ea8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e06:	f7fe fbc9 	bl	800159c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d902      	bls.n	8002e1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8002e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d13d      	bne.n	8002e98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e34:	d111      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e3e:	d004      	beq.n	8002e4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d107      	bne.n	8002e5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e62:	d10f      	bne.n	8002e84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e010      	b.n	8002eba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d101      	bne.n	8002ea2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d196      	bne.n	8002de6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000068 	.word	0x20000068

08002ec8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff ff5b 	bl	8002d9c <SPI_WaitFifoStateUntilTimeout>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e027      	b.n	8002f4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	9300      	str	r3, [sp, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff fec0 	bl	8002c8c <SPI_WaitFlagStateUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d007      	beq.n	8002f22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f16:	f043 0220 	orr.w	r2, r3, #32
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e014      	b.n	8002f4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	9300      	str	r3, [sp, #0]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7ff ff34 	bl	8002d9c <SPI_WaitFifoStateUntilTimeout>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d007      	beq.n	8002f4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002f46:	2303      	movs	r3, #3
 8002f48:	e000      	b.n	8002f4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <malloc>:
 8002f54:	4b02      	ldr	r3, [pc, #8]	; (8002f60 <malloc+0xc>)
 8002f56:	4601      	mov	r1, r0
 8002f58:	6818      	ldr	r0, [r3, #0]
 8002f5a:	f000 b823 	b.w	8002fa4 <_malloc_r>
 8002f5e:	bf00      	nop
 8002f60:	200000cc 	.word	0x200000cc

08002f64 <sbrk_aligned>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	4e0e      	ldr	r6, [pc, #56]	; (8002fa0 <sbrk_aligned+0x3c>)
 8002f68:	460c      	mov	r4, r1
 8002f6a:	6831      	ldr	r1, [r6, #0]
 8002f6c:	4605      	mov	r5, r0
 8002f6e:	b911      	cbnz	r1, 8002f76 <sbrk_aligned+0x12>
 8002f70:	f000 fa7e 	bl	8003470 <_sbrk_r>
 8002f74:	6030      	str	r0, [r6, #0]
 8002f76:	4621      	mov	r1, r4
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 fa79 	bl	8003470 <_sbrk_r>
 8002f7e:	1c43      	adds	r3, r0, #1
 8002f80:	d00a      	beq.n	8002f98 <sbrk_aligned+0x34>
 8002f82:	1cc4      	adds	r4, r0, #3
 8002f84:	f024 0403 	bic.w	r4, r4, #3
 8002f88:	42a0      	cmp	r0, r4
 8002f8a:	d007      	beq.n	8002f9c <sbrk_aligned+0x38>
 8002f8c:	1a21      	subs	r1, r4, r0
 8002f8e:	4628      	mov	r0, r5
 8002f90:	f000 fa6e 	bl	8003470 <_sbrk_r>
 8002f94:	3001      	adds	r0, #1
 8002f96:	d101      	bne.n	8002f9c <sbrk_aligned+0x38>
 8002f98:	f04f 34ff 	mov.w	r4, #4294967295
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bd70      	pop	{r4, r5, r6, pc}
 8002fa0:	20001318 	.word	0x20001318

08002fa4 <_malloc_r>:
 8002fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002fa8:	1ccd      	adds	r5, r1, #3
 8002faa:	f025 0503 	bic.w	r5, r5, #3
 8002fae:	3508      	adds	r5, #8
 8002fb0:	2d0c      	cmp	r5, #12
 8002fb2:	bf38      	it	cc
 8002fb4:	250c      	movcc	r5, #12
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	4607      	mov	r7, r0
 8002fba:	db01      	blt.n	8002fc0 <_malloc_r+0x1c>
 8002fbc:	42a9      	cmp	r1, r5
 8002fbe:	d905      	bls.n	8002fcc <_malloc_r+0x28>
 8002fc0:	230c      	movs	r3, #12
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	2600      	movs	r6, #0
 8002fc6:	4630      	mov	r0, r6
 8002fc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002fcc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80030a0 <_malloc_r+0xfc>
 8002fd0:	f000 f868 	bl	80030a4 <__malloc_lock>
 8002fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8002fd8:	461c      	mov	r4, r3
 8002fda:	bb5c      	cbnz	r4, 8003034 <_malloc_r+0x90>
 8002fdc:	4629      	mov	r1, r5
 8002fde:	4638      	mov	r0, r7
 8002fe0:	f7ff ffc0 	bl	8002f64 <sbrk_aligned>
 8002fe4:	1c43      	adds	r3, r0, #1
 8002fe6:	4604      	mov	r4, r0
 8002fe8:	d155      	bne.n	8003096 <_malloc_r+0xf2>
 8002fea:	f8d8 4000 	ldr.w	r4, [r8]
 8002fee:	4626      	mov	r6, r4
 8002ff0:	2e00      	cmp	r6, #0
 8002ff2:	d145      	bne.n	8003080 <_malloc_r+0xdc>
 8002ff4:	2c00      	cmp	r4, #0
 8002ff6:	d048      	beq.n	800308a <_malloc_r+0xe6>
 8002ff8:	6823      	ldr	r3, [r4, #0]
 8002ffa:	4631      	mov	r1, r6
 8002ffc:	4638      	mov	r0, r7
 8002ffe:	eb04 0903 	add.w	r9, r4, r3
 8003002:	f000 fa35 	bl	8003470 <_sbrk_r>
 8003006:	4581      	cmp	r9, r0
 8003008:	d13f      	bne.n	800308a <_malloc_r+0xe6>
 800300a:	6821      	ldr	r1, [r4, #0]
 800300c:	1a6d      	subs	r5, r5, r1
 800300e:	4629      	mov	r1, r5
 8003010:	4638      	mov	r0, r7
 8003012:	f7ff ffa7 	bl	8002f64 <sbrk_aligned>
 8003016:	3001      	adds	r0, #1
 8003018:	d037      	beq.n	800308a <_malloc_r+0xe6>
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	442b      	add	r3, r5
 800301e:	6023      	str	r3, [r4, #0]
 8003020:	f8d8 3000 	ldr.w	r3, [r8]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d038      	beq.n	800309a <_malloc_r+0xf6>
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	42a2      	cmp	r2, r4
 800302c:	d12b      	bne.n	8003086 <_malloc_r+0xe2>
 800302e:	2200      	movs	r2, #0
 8003030:	605a      	str	r2, [r3, #4]
 8003032:	e00f      	b.n	8003054 <_malloc_r+0xb0>
 8003034:	6822      	ldr	r2, [r4, #0]
 8003036:	1b52      	subs	r2, r2, r5
 8003038:	d41f      	bmi.n	800307a <_malloc_r+0xd6>
 800303a:	2a0b      	cmp	r2, #11
 800303c:	d917      	bls.n	800306e <_malloc_r+0xca>
 800303e:	1961      	adds	r1, r4, r5
 8003040:	42a3      	cmp	r3, r4
 8003042:	6025      	str	r5, [r4, #0]
 8003044:	bf18      	it	ne
 8003046:	6059      	strne	r1, [r3, #4]
 8003048:	6863      	ldr	r3, [r4, #4]
 800304a:	bf08      	it	eq
 800304c:	f8c8 1000 	streq.w	r1, [r8]
 8003050:	5162      	str	r2, [r4, r5]
 8003052:	604b      	str	r3, [r1, #4]
 8003054:	4638      	mov	r0, r7
 8003056:	f104 060b 	add.w	r6, r4, #11
 800305a:	f000 f829 	bl	80030b0 <__malloc_unlock>
 800305e:	f026 0607 	bic.w	r6, r6, #7
 8003062:	1d23      	adds	r3, r4, #4
 8003064:	1af2      	subs	r2, r6, r3
 8003066:	d0ae      	beq.n	8002fc6 <_malloc_r+0x22>
 8003068:	1b9b      	subs	r3, r3, r6
 800306a:	50a3      	str	r3, [r4, r2]
 800306c:	e7ab      	b.n	8002fc6 <_malloc_r+0x22>
 800306e:	42a3      	cmp	r3, r4
 8003070:	6862      	ldr	r2, [r4, #4]
 8003072:	d1dd      	bne.n	8003030 <_malloc_r+0x8c>
 8003074:	f8c8 2000 	str.w	r2, [r8]
 8003078:	e7ec      	b.n	8003054 <_malloc_r+0xb0>
 800307a:	4623      	mov	r3, r4
 800307c:	6864      	ldr	r4, [r4, #4]
 800307e:	e7ac      	b.n	8002fda <_malloc_r+0x36>
 8003080:	4634      	mov	r4, r6
 8003082:	6876      	ldr	r6, [r6, #4]
 8003084:	e7b4      	b.n	8002ff0 <_malloc_r+0x4c>
 8003086:	4613      	mov	r3, r2
 8003088:	e7cc      	b.n	8003024 <_malloc_r+0x80>
 800308a:	230c      	movs	r3, #12
 800308c:	603b      	str	r3, [r7, #0]
 800308e:	4638      	mov	r0, r7
 8003090:	f000 f80e 	bl	80030b0 <__malloc_unlock>
 8003094:	e797      	b.n	8002fc6 <_malloc_r+0x22>
 8003096:	6025      	str	r5, [r4, #0]
 8003098:	e7dc      	b.n	8003054 <_malloc_r+0xb0>
 800309a:	605b      	str	r3, [r3, #4]
 800309c:	deff      	udf	#255	; 0xff
 800309e:	bf00      	nop
 80030a0:	20001314 	.word	0x20001314

080030a4 <__malloc_lock>:
 80030a4:	4801      	ldr	r0, [pc, #4]	; (80030ac <__malloc_lock+0x8>)
 80030a6:	f000 ba30 	b.w	800350a <__retarget_lock_acquire_recursive>
 80030aa:	bf00      	nop
 80030ac:	2000145c 	.word	0x2000145c

080030b0 <__malloc_unlock>:
 80030b0:	4801      	ldr	r0, [pc, #4]	; (80030b8 <__malloc_unlock+0x8>)
 80030b2:	f000 ba2b 	b.w	800350c <__retarget_lock_release_recursive>
 80030b6:	bf00      	nop
 80030b8:	2000145c 	.word	0x2000145c

080030bc <srand>:
 80030bc:	b538      	push	{r3, r4, r5, lr}
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <srand+0x44>)
 80030c0:	681d      	ldr	r5, [r3, #0]
 80030c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030c4:	4604      	mov	r4, r0
 80030c6:	b9b3      	cbnz	r3, 80030f6 <srand+0x3a>
 80030c8:	2018      	movs	r0, #24
 80030ca:	f7ff ff43 	bl	8002f54 <malloc>
 80030ce:	4602      	mov	r2, r0
 80030d0:	6328      	str	r0, [r5, #48]	; 0x30
 80030d2:	b920      	cbnz	r0, 80030de <srand+0x22>
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <srand+0x48>)
 80030d6:	480c      	ldr	r0, [pc, #48]	; (8003108 <srand+0x4c>)
 80030d8:	2146      	movs	r1, #70	; 0x46
 80030da:	f000 fa19 	bl	8003510 <__assert_func>
 80030de:	490b      	ldr	r1, [pc, #44]	; (800310c <srand+0x50>)
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <srand+0x54>)
 80030e2:	e9c0 1300 	strd	r1, r3, [r0]
 80030e6:	4b0b      	ldr	r3, [pc, #44]	; (8003114 <srand+0x58>)
 80030e8:	6083      	str	r3, [r0, #8]
 80030ea:	230b      	movs	r3, #11
 80030ec:	8183      	strh	r3, [r0, #12]
 80030ee:	2100      	movs	r1, #0
 80030f0:	2001      	movs	r0, #1
 80030f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80030f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80030f8:	2200      	movs	r2, #0
 80030fa:	611c      	str	r4, [r3, #16]
 80030fc:	615a      	str	r2, [r3, #20]
 80030fe:	bd38      	pop	{r3, r4, r5, pc}
 8003100:	200000cc 	.word	0x200000cc
 8003104:	0800415c 	.word	0x0800415c
 8003108:	08004173 	.word	0x08004173
 800310c:	abcd330e 	.word	0xabcd330e
 8003110:	e66d1234 	.word	0xe66d1234
 8003114:	0005deec 	.word	0x0005deec

08003118 <rand>:
 8003118:	4b16      	ldr	r3, [pc, #88]	; (8003174 <rand+0x5c>)
 800311a:	b510      	push	{r4, lr}
 800311c:	681c      	ldr	r4, [r3, #0]
 800311e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003120:	b9b3      	cbnz	r3, 8003150 <rand+0x38>
 8003122:	2018      	movs	r0, #24
 8003124:	f7ff ff16 	bl	8002f54 <malloc>
 8003128:	4602      	mov	r2, r0
 800312a:	6320      	str	r0, [r4, #48]	; 0x30
 800312c:	b920      	cbnz	r0, 8003138 <rand+0x20>
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <rand+0x60>)
 8003130:	4812      	ldr	r0, [pc, #72]	; (800317c <rand+0x64>)
 8003132:	2152      	movs	r1, #82	; 0x52
 8003134:	f000 f9ec 	bl	8003510 <__assert_func>
 8003138:	4911      	ldr	r1, [pc, #68]	; (8003180 <rand+0x68>)
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <rand+0x6c>)
 800313c:	e9c0 1300 	strd	r1, r3, [r0]
 8003140:	4b11      	ldr	r3, [pc, #68]	; (8003188 <rand+0x70>)
 8003142:	6083      	str	r3, [r0, #8]
 8003144:	230b      	movs	r3, #11
 8003146:	8183      	strh	r3, [r0, #12]
 8003148:	2100      	movs	r1, #0
 800314a:	2001      	movs	r0, #1
 800314c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8003150:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003152:	480e      	ldr	r0, [pc, #56]	; (800318c <rand+0x74>)
 8003154:	690b      	ldr	r3, [r1, #16]
 8003156:	694c      	ldr	r4, [r1, #20]
 8003158:	4a0d      	ldr	r2, [pc, #52]	; (8003190 <rand+0x78>)
 800315a:	4358      	muls	r0, r3
 800315c:	fb02 0004 	mla	r0, r2, r4, r0
 8003160:	fba3 3202 	umull	r3, r2, r3, r2
 8003164:	3301      	adds	r3, #1
 8003166:	eb40 0002 	adc.w	r0, r0, r2
 800316a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800316e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003172:	bd10      	pop	{r4, pc}
 8003174:	200000cc 	.word	0x200000cc
 8003178:	0800415c 	.word	0x0800415c
 800317c:	08004173 	.word	0x08004173
 8003180:	abcd330e 	.word	0xabcd330e
 8003184:	e66d1234 	.word	0xe66d1234
 8003188:	0005deec 	.word	0x0005deec
 800318c:	5851f42d 	.word	0x5851f42d
 8003190:	4c957f2d 	.word	0x4c957f2d

08003194 <std>:
 8003194:	2300      	movs	r3, #0
 8003196:	b510      	push	{r4, lr}
 8003198:	4604      	mov	r4, r0
 800319a:	e9c0 3300 	strd	r3, r3, [r0]
 800319e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80031a2:	6083      	str	r3, [r0, #8]
 80031a4:	8181      	strh	r1, [r0, #12]
 80031a6:	6643      	str	r3, [r0, #100]	; 0x64
 80031a8:	81c2      	strh	r2, [r0, #14]
 80031aa:	6183      	str	r3, [r0, #24]
 80031ac:	4619      	mov	r1, r3
 80031ae:	2208      	movs	r2, #8
 80031b0:	305c      	adds	r0, #92	; 0x5c
 80031b2:	f000 f8f4 	bl	800339e <memset>
 80031b6:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <std+0x58>)
 80031b8:	6263      	str	r3, [r4, #36]	; 0x24
 80031ba:	4b0d      	ldr	r3, [pc, #52]	; (80031f0 <std+0x5c>)
 80031bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <std+0x60>)
 80031c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031c2:	4b0d      	ldr	r3, [pc, #52]	; (80031f8 <std+0x64>)
 80031c4:	6323      	str	r3, [r4, #48]	; 0x30
 80031c6:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <std+0x68>)
 80031c8:	6224      	str	r4, [r4, #32]
 80031ca:	429c      	cmp	r4, r3
 80031cc:	d006      	beq.n	80031dc <std+0x48>
 80031ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80031d2:	4294      	cmp	r4, r2
 80031d4:	d002      	beq.n	80031dc <std+0x48>
 80031d6:	33d0      	adds	r3, #208	; 0xd0
 80031d8:	429c      	cmp	r4, r3
 80031da:	d105      	bne.n	80031e8 <std+0x54>
 80031dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80031e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031e4:	f000 b990 	b.w	8003508 <__retarget_lock_init_recursive>
 80031e8:	bd10      	pop	{r4, pc}
 80031ea:	bf00      	nop
 80031ec:	08003319 	.word	0x08003319
 80031f0:	0800333b 	.word	0x0800333b
 80031f4:	08003373 	.word	0x08003373
 80031f8:	08003397 	.word	0x08003397
 80031fc:	2000131c 	.word	0x2000131c

08003200 <stdio_exit_handler>:
 8003200:	4a02      	ldr	r2, [pc, #8]	; (800320c <stdio_exit_handler+0xc>)
 8003202:	4903      	ldr	r1, [pc, #12]	; (8003210 <stdio_exit_handler+0x10>)
 8003204:	4803      	ldr	r0, [pc, #12]	; (8003214 <stdio_exit_handler+0x14>)
 8003206:	f000 b869 	b.w	80032dc <_fwalk_sglue>
 800320a:	bf00      	nop
 800320c:	20000074 	.word	0x20000074
 8003210:	080036f1 	.word	0x080036f1
 8003214:	20000080 	.word	0x20000080

08003218 <cleanup_stdio>:
 8003218:	6841      	ldr	r1, [r0, #4]
 800321a:	4b0c      	ldr	r3, [pc, #48]	; (800324c <cleanup_stdio+0x34>)
 800321c:	4299      	cmp	r1, r3
 800321e:	b510      	push	{r4, lr}
 8003220:	4604      	mov	r4, r0
 8003222:	d001      	beq.n	8003228 <cleanup_stdio+0x10>
 8003224:	f000 fa64 	bl	80036f0 <_fflush_r>
 8003228:	68a1      	ldr	r1, [r4, #8]
 800322a:	4b09      	ldr	r3, [pc, #36]	; (8003250 <cleanup_stdio+0x38>)
 800322c:	4299      	cmp	r1, r3
 800322e:	d002      	beq.n	8003236 <cleanup_stdio+0x1e>
 8003230:	4620      	mov	r0, r4
 8003232:	f000 fa5d 	bl	80036f0 <_fflush_r>
 8003236:	68e1      	ldr	r1, [r4, #12]
 8003238:	4b06      	ldr	r3, [pc, #24]	; (8003254 <cleanup_stdio+0x3c>)
 800323a:	4299      	cmp	r1, r3
 800323c:	d004      	beq.n	8003248 <cleanup_stdio+0x30>
 800323e:	4620      	mov	r0, r4
 8003240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003244:	f000 ba54 	b.w	80036f0 <_fflush_r>
 8003248:	bd10      	pop	{r4, pc}
 800324a:	bf00      	nop
 800324c:	2000131c 	.word	0x2000131c
 8003250:	20001384 	.word	0x20001384
 8003254:	200013ec 	.word	0x200013ec

08003258 <global_stdio_init.part.0>:
 8003258:	b510      	push	{r4, lr}
 800325a:	4b0b      	ldr	r3, [pc, #44]	; (8003288 <global_stdio_init.part.0+0x30>)
 800325c:	4c0b      	ldr	r4, [pc, #44]	; (800328c <global_stdio_init.part.0+0x34>)
 800325e:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <global_stdio_init.part.0+0x38>)
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	4620      	mov	r0, r4
 8003264:	2200      	movs	r2, #0
 8003266:	2104      	movs	r1, #4
 8003268:	f7ff ff94 	bl	8003194 <std>
 800326c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003270:	2201      	movs	r2, #1
 8003272:	2109      	movs	r1, #9
 8003274:	f7ff ff8e 	bl	8003194 <std>
 8003278:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800327c:	2202      	movs	r2, #2
 800327e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003282:	2112      	movs	r1, #18
 8003284:	f7ff bf86 	b.w	8003194 <std>
 8003288:	20001454 	.word	0x20001454
 800328c:	2000131c 	.word	0x2000131c
 8003290:	08003201 	.word	0x08003201

08003294 <__sfp_lock_acquire>:
 8003294:	4801      	ldr	r0, [pc, #4]	; (800329c <__sfp_lock_acquire+0x8>)
 8003296:	f000 b938 	b.w	800350a <__retarget_lock_acquire_recursive>
 800329a:	bf00      	nop
 800329c:	2000145d 	.word	0x2000145d

080032a0 <__sfp_lock_release>:
 80032a0:	4801      	ldr	r0, [pc, #4]	; (80032a8 <__sfp_lock_release+0x8>)
 80032a2:	f000 b933 	b.w	800350c <__retarget_lock_release_recursive>
 80032a6:	bf00      	nop
 80032a8:	2000145d 	.word	0x2000145d

080032ac <__sinit>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	f7ff fff0 	bl	8003294 <__sfp_lock_acquire>
 80032b4:	6a23      	ldr	r3, [r4, #32]
 80032b6:	b11b      	cbz	r3, 80032c0 <__sinit+0x14>
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032bc:	f7ff bff0 	b.w	80032a0 <__sfp_lock_release>
 80032c0:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <__sinit+0x28>)
 80032c2:	6223      	str	r3, [r4, #32]
 80032c4:	4b04      	ldr	r3, [pc, #16]	; (80032d8 <__sinit+0x2c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f5      	bne.n	80032b8 <__sinit+0xc>
 80032cc:	f7ff ffc4 	bl	8003258 <global_stdio_init.part.0>
 80032d0:	e7f2      	b.n	80032b8 <__sinit+0xc>
 80032d2:	bf00      	nop
 80032d4:	08003219 	.word	0x08003219
 80032d8:	20001454 	.word	0x20001454

080032dc <_fwalk_sglue>:
 80032dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032e0:	4607      	mov	r7, r0
 80032e2:	4688      	mov	r8, r1
 80032e4:	4614      	mov	r4, r2
 80032e6:	2600      	movs	r6, #0
 80032e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032ec:	f1b9 0901 	subs.w	r9, r9, #1
 80032f0:	d505      	bpl.n	80032fe <_fwalk_sglue+0x22>
 80032f2:	6824      	ldr	r4, [r4, #0]
 80032f4:	2c00      	cmp	r4, #0
 80032f6:	d1f7      	bne.n	80032e8 <_fwalk_sglue+0xc>
 80032f8:	4630      	mov	r0, r6
 80032fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032fe:	89ab      	ldrh	r3, [r5, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d907      	bls.n	8003314 <_fwalk_sglue+0x38>
 8003304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003308:	3301      	adds	r3, #1
 800330a:	d003      	beq.n	8003314 <_fwalk_sglue+0x38>
 800330c:	4629      	mov	r1, r5
 800330e:	4638      	mov	r0, r7
 8003310:	47c0      	blx	r8
 8003312:	4306      	orrs	r6, r0
 8003314:	3568      	adds	r5, #104	; 0x68
 8003316:	e7e9      	b.n	80032ec <_fwalk_sglue+0x10>

08003318 <__sread>:
 8003318:	b510      	push	{r4, lr}
 800331a:	460c      	mov	r4, r1
 800331c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003320:	f000 f894 	bl	800344c <_read_r>
 8003324:	2800      	cmp	r0, #0
 8003326:	bfab      	itete	ge
 8003328:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800332a:	89a3      	ldrhlt	r3, [r4, #12]
 800332c:	181b      	addge	r3, r3, r0
 800332e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003332:	bfac      	ite	ge
 8003334:	6563      	strge	r3, [r4, #84]	; 0x54
 8003336:	81a3      	strhlt	r3, [r4, #12]
 8003338:	bd10      	pop	{r4, pc}

0800333a <__swrite>:
 800333a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333e:	461f      	mov	r7, r3
 8003340:	898b      	ldrh	r3, [r1, #12]
 8003342:	05db      	lsls	r3, r3, #23
 8003344:	4605      	mov	r5, r0
 8003346:	460c      	mov	r4, r1
 8003348:	4616      	mov	r6, r2
 800334a:	d505      	bpl.n	8003358 <__swrite+0x1e>
 800334c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003350:	2302      	movs	r3, #2
 8003352:	2200      	movs	r2, #0
 8003354:	f000 f868 	bl	8003428 <_lseek_r>
 8003358:	89a3      	ldrh	r3, [r4, #12]
 800335a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800335e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003362:	81a3      	strh	r3, [r4, #12]
 8003364:	4632      	mov	r2, r6
 8003366:	463b      	mov	r3, r7
 8003368:	4628      	mov	r0, r5
 800336a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800336e:	f000 b88f 	b.w	8003490 <_write_r>

08003372 <__sseek>:
 8003372:	b510      	push	{r4, lr}
 8003374:	460c      	mov	r4, r1
 8003376:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800337a:	f000 f855 	bl	8003428 <_lseek_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	89a3      	ldrh	r3, [r4, #12]
 8003382:	bf15      	itete	ne
 8003384:	6560      	strne	r0, [r4, #84]	; 0x54
 8003386:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800338a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800338e:	81a3      	strheq	r3, [r4, #12]
 8003390:	bf18      	it	ne
 8003392:	81a3      	strhne	r3, [r4, #12]
 8003394:	bd10      	pop	{r4, pc}

08003396 <__sclose>:
 8003396:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800339a:	f000 b823 	b.w	80033e4 <_close_r>

0800339e <memset>:
 800339e:	4402      	add	r2, r0
 80033a0:	4603      	mov	r3, r0
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d100      	bne.n	80033a8 <memset+0xa>
 80033a6:	4770      	bx	lr
 80033a8:	f803 1b01 	strb.w	r1, [r3], #1
 80033ac:	e7f9      	b.n	80033a2 <memset+0x4>
	...

080033b0 <time>:
 80033b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80033b2:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <time+0x30>)
 80033b4:	2200      	movs	r2, #0
 80033b6:	4669      	mov	r1, sp
 80033b8:	4604      	mov	r4, r0
 80033ba:	6818      	ldr	r0, [r3, #0]
 80033bc:	f000 f822 	bl	8003404 <_gettimeofday_r>
 80033c0:	2800      	cmp	r0, #0
 80033c2:	bfbe      	ittt	lt
 80033c4:	f04f 32ff 	movlt.w	r2, #4294967295
 80033c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80033cc:	e9cd 2300 	strdlt	r2, r3, [sp]
 80033d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80033d4:	b10c      	cbz	r4, 80033da <time+0x2a>
 80033d6:	e9c4 0100 	strd	r0, r1, [r4]
 80033da:	b004      	add	sp, #16
 80033dc:	bd10      	pop	{r4, pc}
 80033de:	bf00      	nop
 80033e0:	200000cc 	.word	0x200000cc

080033e4 <_close_r>:
 80033e4:	b538      	push	{r3, r4, r5, lr}
 80033e6:	4d06      	ldr	r5, [pc, #24]	; (8003400 <_close_r+0x1c>)
 80033e8:	2300      	movs	r3, #0
 80033ea:	4604      	mov	r4, r0
 80033ec:	4608      	mov	r0, r1
 80033ee:	602b      	str	r3, [r5, #0]
 80033f0:	f7fd ffbe 	bl	8001370 <_close>
 80033f4:	1c43      	adds	r3, r0, #1
 80033f6:	d102      	bne.n	80033fe <_close_r+0x1a>
 80033f8:	682b      	ldr	r3, [r5, #0]
 80033fa:	b103      	cbz	r3, 80033fe <_close_r+0x1a>
 80033fc:	6023      	str	r3, [r4, #0]
 80033fe:	bd38      	pop	{r3, r4, r5, pc}
 8003400:	20001458 	.word	0x20001458

08003404 <_gettimeofday_r>:
 8003404:	b538      	push	{r3, r4, r5, lr}
 8003406:	4d07      	ldr	r5, [pc, #28]	; (8003424 <_gettimeofday_r+0x20>)
 8003408:	2300      	movs	r3, #0
 800340a:	4604      	mov	r4, r0
 800340c:	4608      	mov	r0, r1
 800340e:	4611      	mov	r1, r2
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	f000 fddf 	bl	8003fd4 <_gettimeofday>
 8003416:	1c43      	adds	r3, r0, #1
 8003418:	d102      	bne.n	8003420 <_gettimeofday_r+0x1c>
 800341a:	682b      	ldr	r3, [r5, #0]
 800341c:	b103      	cbz	r3, 8003420 <_gettimeofday_r+0x1c>
 800341e:	6023      	str	r3, [r4, #0]
 8003420:	bd38      	pop	{r3, r4, r5, pc}
 8003422:	bf00      	nop
 8003424:	20001458 	.word	0x20001458

08003428 <_lseek_r>:
 8003428:	b538      	push	{r3, r4, r5, lr}
 800342a:	4d07      	ldr	r5, [pc, #28]	; (8003448 <_lseek_r+0x20>)
 800342c:	4604      	mov	r4, r0
 800342e:	4608      	mov	r0, r1
 8003430:	4611      	mov	r1, r2
 8003432:	2200      	movs	r2, #0
 8003434:	602a      	str	r2, [r5, #0]
 8003436:	461a      	mov	r2, r3
 8003438:	f7fd ffc1 	bl	80013be <_lseek>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_lseek_r+0x1e>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_lseek_r+0x1e>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20001458 	.word	0x20001458

0800344c <_read_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4d07      	ldr	r5, [pc, #28]	; (800346c <_read_r+0x20>)
 8003450:	4604      	mov	r4, r0
 8003452:	4608      	mov	r0, r1
 8003454:	4611      	mov	r1, r2
 8003456:	2200      	movs	r2, #0
 8003458:	602a      	str	r2, [r5, #0]
 800345a:	461a      	mov	r2, r3
 800345c:	f7fd ff4f 	bl	80012fe <_read>
 8003460:	1c43      	adds	r3, r0, #1
 8003462:	d102      	bne.n	800346a <_read_r+0x1e>
 8003464:	682b      	ldr	r3, [r5, #0]
 8003466:	b103      	cbz	r3, 800346a <_read_r+0x1e>
 8003468:	6023      	str	r3, [r4, #0]
 800346a:	bd38      	pop	{r3, r4, r5, pc}
 800346c:	20001458 	.word	0x20001458

08003470 <_sbrk_r>:
 8003470:	b538      	push	{r3, r4, r5, lr}
 8003472:	4d06      	ldr	r5, [pc, #24]	; (800348c <_sbrk_r+0x1c>)
 8003474:	2300      	movs	r3, #0
 8003476:	4604      	mov	r4, r0
 8003478:	4608      	mov	r0, r1
 800347a:	602b      	str	r3, [r5, #0]
 800347c:	f7fd ffac 	bl	80013d8 <_sbrk>
 8003480:	1c43      	adds	r3, r0, #1
 8003482:	d102      	bne.n	800348a <_sbrk_r+0x1a>
 8003484:	682b      	ldr	r3, [r5, #0]
 8003486:	b103      	cbz	r3, 800348a <_sbrk_r+0x1a>
 8003488:	6023      	str	r3, [r4, #0]
 800348a:	bd38      	pop	{r3, r4, r5, pc}
 800348c:	20001458 	.word	0x20001458

08003490 <_write_r>:
 8003490:	b538      	push	{r3, r4, r5, lr}
 8003492:	4d07      	ldr	r5, [pc, #28]	; (80034b0 <_write_r+0x20>)
 8003494:	4604      	mov	r4, r0
 8003496:	4608      	mov	r0, r1
 8003498:	4611      	mov	r1, r2
 800349a:	2200      	movs	r2, #0
 800349c:	602a      	str	r2, [r5, #0]
 800349e:	461a      	mov	r2, r3
 80034a0:	f7fd ff4a 	bl	8001338 <_write>
 80034a4:	1c43      	adds	r3, r0, #1
 80034a6:	d102      	bne.n	80034ae <_write_r+0x1e>
 80034a8:	682b      	ldr	r3, [r5, #0]
 80034aa:	b103      	cbz	r3, 80034ae <_write_r+0x1e>
 80034ac:	6023      	str	r3, [r4, #0]
 80034ae:	bd38      	pop	{r3, r4, r5, pc}
 80034b0:	20001458 	.word	0x20001458

080034b4 <__errno>:
 80034b4:	4b01      	ldr	r3, [pc, #4]	; (80034bc <__errno+0x8>)
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	200000cc 	.word	0x200000cc

080034c0 <__libc_init_array>:
 80034c0:	b570      	push	{r4, r5, r6, lr}
 80034c2:	4d0d      	ldr	r5, [pc, #52]	; (80034f8 <__libc_init_array+0x38>)
 80034c4:	4c0d      	ldr	r4, [pc, #52]	; (80034fc <__libc_init_array+0x3c>)
 80034c6:	1b64      	subs	r4, r4, r5
 80034c8:	10a4      	asrs	r4, r4, #2
 80034ca:	2600      	movs	r6, #0
 80034cc:	42a6      	cmp	r6, r4
 80034ce:	d109      	bne.n	80034e4 <__libc_init_array+0x24>
 80034d0:	4d0b      	ldr	r5, [pc, #44]	; (8003500 <__libc_init_array+0x40>)
 80034d2:	4c0c      	ldr	r4, [pc, #48]	; (8003504 <__libc_init_array+0x44>)
 80034d4:	f000 fd86 	bl	8003fe4 <_init>
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	2600      	movs	r6, #0
 80034de:	42a6      	cmp	r6, r4
 80034e0:	d105      	bne.n	80034ee <__libc_init_array+0x2e>
 80034e2:	bd70      	pop	{r4, r5, r6, pc}
 80034e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034e8:	4798      	blx	r3
 80034ea:	3601      	adds	r6, #1
 80034ec:	e7ee      	b.n	80034cc <__libc_init_array+0xc>
 80034ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f2:	4798      	blx	r3
 80034f4:	3601      	adds	r6, #1
 80034f6:	e7f2      	b.n	80034de <__libc_init_array+0x1e>
 80034f8:	0800423c 	.word	0x0800423c
 80034fc:	0800423c 	.word	0x0800423c
 8003500:	0800423c 	.word	0x0800423c
 8003504:	08004240 	.word	0x08004240

08003508 <__retarget_lock_init_recursive>:
 8003508:	4770      	bx	lr

0800350a <__retarget_lock_acquire_recursive>:
 800350a:	4770      	bx	lr

0800350c <__retarget_lock_release_recursive>:
 800350c:	4770      	bx	lr
	...

08003510 <__assert_func>:
 8003510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003512:	4614      	mov	r4, r2
 8003514:	461a      	mov	r2, r3
 8003516:	4b09      	ldr	r3, [pc, #36]	; (800353c <__assert_func+0x2c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4605      	mov	r5, r0
 800351c:	68d8      	ldr	r0, [r3, #12]
 800351e:	b14c      	cbz	r4, 8003534 <__assert_func+0x24>
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <__assert_func+0x30>)
 8003522:	9100      	str	r1, [sp, #0]
 8003524:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003528:	4906      	ldr	r1, [pc, #24]	; (8003544 <__assert_func+0x34>)
 800352a:	462b      	mov	r3, r5
 800352c:	f000 f908 	bl	8003740 <fiprintf>
 8003530:	f000 f918 	bl	8003764 <abort>
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <__assert_func+0x38>)
 8003536:	461c      	mov	r4, r3
 8003538:	e7f3      	b.n	8003522 <__assert_func+0x12>
 800353a:	bf00      	nop
 800353c:	200000cc 	.word	0x200000cc
 8003540:	080041cb 	.word	0x080041cb
 8003544:	080041d8 	.word	0x080041d8
 8003548:	08004206 	.word	0x08004206

0800354c <_free_r>:
 800354c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800354e:	2900      	cmp	r1, #0
 8003550:	d044      	beq.n	80035dc <_free_r+0x90>
 8003552:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003556:	9001      	str	r0, [sp, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	f1a1 0404 	sub.w	r4, r1, #4
 800355e:	bfb8      	it	lt
 8003560:	18e4      	addlt	r4, r4, r3
 8003562:	f7ff fd9f 	bl	80030a4 <__malloc_lock>
 8003566:	4a1e      	ldr	r2, [pc, #120]	; (80035e0 <_free_r+0x94>)
 8003568:	9801      	ldr	r0, [sp, #4]
 800356a:	6813      	ldr	r3, [r2, #0]
 800356c:	b933      	cbnz	r3, 800357c <_free_r+0x30>
 800356e:	6063      	str	r3, [r4, #4]
 8003570:	6014      	str	r4, [r2, #0]
 8003572:	b003      	add	sp, #12
 8003574:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003578:	f7ff bd9a 	b.w	80030b0 <__malloc_unlock>
 800357c:	42a3      	cmp	r3, r4
 800357e:	d908      	bls.n	8003592 <_free_r+0x46>
 8003580:	6825      	ldr	r5, [r4, #0]
 8003582:	1961      	adds	r1, r4, r5
 8003584:	428b      	cmp	r3, r1
 8003586:	bf01      	itttt	eq
 8003588:	6819      	ldreq	r1, [r3, #0]
 800358a:	685b      	ldreq	r3, [r3, #4]
 800358c:	1949      	addeq	r1, r1, r5
 800358e:	6021      	streq	r1, [r4, #0]
 8003590:	e7ed      	b.n	800356e <_free_r+0x22>
 8003592:	461a      	mov	r2, r3
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	b10b      	cbz	r3, 800359c <_free_r+0x50>
 8003598:	42a3      	cmp	r3, r4
 800359a:	d9fa      	bls.n	8003592 <_free_r+0x46>
 800359c:	6811      	ldr	r1, [r2, #0]
 800359e:	1855      	adds	r5, r2, r1
 80035a0:	42a5      	cmp	r5, r4
 80035a2:	d10b      	bne.n	80035bc <_free_r+0x70>
 80035a4:	6824      	ldr	r4, [r4, #0]
 80035a6:	4421      	add	r1, r4
 80035a8:	1854      	adds	r4, r2, r1
 80035aa:	42a3      	cmp	r3, r4
 80035ac:	6011      	str	r1, [r2, #0]
 80035ae:	d1e0      	bne.n	8003572 <_free_r+0x26>
 80035b0:	681c      	ldr	r4, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	6053      	str	r3, [r2, #4]
 80035b6:	440c      	add	r4, r1
 80035b8:	6014      	str	r4, [r2, #0]
 80035ba:	e7da      	b.n	8003572 <_free_r+0x26>
 80035bc:	d902      	bls.n	80035c4 <_free_r+0x78>
 80035be:	230c      	movs	r3, #12
 80035c0:	6003      	str	r3, [r0, #0]
 80035c2:	e7d6      	b.n	8003572 <_free_r+0x26>
 80035c4:	6825      	ldr	r5, [r4, #0]
 80035c6:	1961      	adds	r1, r4, r5
 80035c8:	428b      	cmp	r3, r1
 80035ca:	bf04      	itt	eq
 80035cc:	6819      	ldreq	r1, [r3, #0]
 80035ce:	685b      	ldreq	r3, [r3, #4]
 80035d0:	6063      	str	r3, [r4, #4]
 80035d2:	bf04      	itt	eq
 80035d4:	1949      	addeq	r1, r1, r5
 80035d6:	6021      	streq	r1, [r4, #0]
 80035d8:	6054      	str	r4, [r2, #4]
 80035da:	e7ca      	b.n	8003572 <_free_r+0x26>
 80035dc:	b003      	add	sp, #12
 80035de:	bd30      	pop	{r4, r5, pc}
 80035e0:	20001314 	.word	0x20001314

080035e4 <__sflush_r>:
 80035e4:	898a      	ldrh	r2, [r1, #12]
 80035e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035ea:	4605      	mov	r5, r0
 80035ec:	0710      	lsls	r0, r2, #28
 80035ee:	460c      	mov	r4, r1
 80035f0:	d458      	bmi.n	80036a4 <__sflush_r+0xc0>
 80035f2:	684b      	ldr	r3, [r1, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dc05      	bgt.n	8003604 <__sflush_r+0x20>
 80035f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	dc02      	bgt.n	8003604 <__sflush_r+0x20>
 80035fe:	2000      	movs	r0, #0
 8003600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003606:	2e00      	cmp	r6, #0
 8003608:	d0f9      	beq.n	80035fe <__sflush_r+0x1a>
 800360a:	2300      	movs	r3, #0
 800360c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003610:	682f      	ldr	r7, [r5, #0]
 8003612:	6a21      	ldr	r1, [r4, #32]
 8003614:	602b      	str	r3, [r5, #0]
 8003616:	d032      	beq.n	800367e <__sflush_r+0x9a>
 8003618:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800361a:	89a3      	ldrh	r3, [r4, #12]
 800361c:	075a      	lsls	r2, r3, #29
 800361e:	d505      	bpl.n	800362c <__sflush_r+0x48>
 8003620:	6863      	ldr	r3, [r4, #4]
 8003622:	1ac0      	subs	r0, r0, r3
 8003624:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003626:	b10b      	cbz	r3, 800362c <__sflush_r+0x48>
 8003628:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800362a:	1ac0      	subs	r0, r0, r3
 800362c:	2300      	movs	r3, #0
 800362e:	4602      	mov	r2, r0
 8003630:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003632:	6a21      	ldr	r1, [r4, #32]
 8003634:	4628      	mov	r0, r5
 8003636:	47b0      	blx	r6
 8003638:	1c43      	adds	r3, r0, #1
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	d106      	bne.n	800364c <__sflush_r+0x68>
 800363e:	6829      	ldr	r1, [r5, #0]
 8003640:	291d      	cmp	r1, #29
 8003642:	d82b      	bhi.n	800369c <__sflush_r+0xb8>
 8003644:	4a29      	ldr	r2, [pc, #164]	; (80036ec <__sflush_r+0x108>)
 8003646:	410a      	asrs	r2, r1
 8003648:	07d6      	lsls	r6, r2, #31
 800364a:	d427      	bmi.n	800369c <__sflush_r+0xb8>
 800364c:	2200      	movs	r2, #0
 800364e:	6062      	str	r2, [r4, #4]
 8003650:	04d9      	lsls	r1, r3, #19
 8003652:	6922      	ldr	r2, [r4, #16]
 8003654:	6022      	str	r2, [r4, #0]
 8003656:	d504      	bpl.n	8003662 <__sflush_r+0x7e>
 8003658:	1c42      	adds	r2, r0, #1
 800365a:	d101      	bne.n	8003660 <__sflush_r+0x7c>
 800365c:	682b      	ldr	r3, [r5, #0]
 800365e:	b903      	cbnz	r3, 8003662 <__sflush_r+0x7e>
 8003660:	6560      	str	r0, [r4, #84]	; 0x54
 8003662:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003664:	602f      	str	r7, [r5, #0]
 8003666:	2900      	cmp	r1, #0
 8003668:	d0c9      	beq.n	80035fe <__sflush_r+0x1a>
 800366a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800366e:	4299      	cmp	r1, r3
 8003670:	d002      	beq.n	8003678 <__sflush_r+0x94>
 8003672:	4628      	mov	r0, r5
 8003674:	f7ff ff6a 	bl	800354c <_free_r>
 8003678:	2000      	movs	r0, #0
 800367a:	6360      	str	r0, [r4, #52]	; 0x34
 800367c:	e7c0      	b.n	8003600 <__sflush_r+0x1c>
 800367e:	2301      	movs	r3, #1
 8003680:	4628      	mov	r0, r5
 8003682:	47b0      	blx	r6
 8003684:	1c41      	adds	r1, r0, #1
 8003686:	d1c8      	bne.n	800361a <__sflush_r+0x36>
 8003688:	682b      	ldr	r3, [r5, #0]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d0c5      	beq.n	800361a <__sflush_r+0x36>
 800368e:	2b1d      	cmp	r3, #29
 8003690:	d001      	beq.n	8003696 <__sflush_r+0xb2>
 8003692:	2b16      	cmp	r3, #22
 8003694:	d101      	bne.n	800369a <__sflush_r+0xb6>
 8003696:	602f      	str	r7, [r5, #0]
 8003698:	e7b1      	b.n	80035fe <__sflush_r+0x1a>
 800369a:	89a3      	ldrh	r3, [r4, #12]
 800369c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a0:	81a3      	strh	r3, [r4, #12]
 80036a2:	e7ad      	b.n	8003600 <__sflush_r+0x1c>
 80036a4:	690f      	ldr	r7, [r1, #16]
 80036a6:	2f00      	cmp	r7, #0
 80036a8:	d0a9      	beq.n	80035fe <__sflush_r+0x1a>
 80036aa:	0793      	lsls	r3, r2, #30
 80036ac:	680e      	ldr	r6, [r1, #0]
 80036ae:	bf08      	it	eq
 80036b0:	694b      	ldreq	r3, [r1, #20]
 80036b2:	600f      	str	r7, [r1, #0]
 80036b4:	bf18      	it	ne
 80036b6:	2300      	movne	r3, #0
 80036b8:	eba6 0807 	sub.w	r8, r6, r7
 80036bc:	608b      	str	r3, [r1, #8]
 80036be:	f1b8 0f00 	cmp.w	r8, #0
 80036c2:	dd9c      	ble.n	80035fe <__sflush_r+0x1a>
 80036c4:	6a21      	ldr	r1, [r4, #32]
 80036c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80036c8:	4643      	mov	r3, r8
 80036ca:	463a      	mov	r2, r7
 80036cc:	4628      	mov	r0, r5
 80036ce:	47b0      	blx	r6
 80036d0:	2800      	cmp	r0, #0
 80036d2:	dc06      	bgt.n	80036e2 <__sflush_r+0xfe>
 80036d4:	89a3      	ldrh	r3, [r4, #12]
 80036d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036da:	81a3      	strh	r3, [r4, #12]
 80036dc:	f04f 30ff 	mov.w	r0, #4294967295
 80036e0:	e78e      	b.n	8003600 <__sflush_r+0x1c>
 80036e2:	4407      	add	r7, r0
 80036e4:	eba8 0800 	sub.w	r8, r8, r0
 80036e8:	e7e9      	b.n	80036be <__sflush_r+0xda>
 80036ea:	bf00      	nop
 80036ec:	dfbffffe 	.word	0xdfbffffe

080036f0 <_fflush_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	690b      	ldr	r3, [r1, #16]
 80036f4:	4605      	mov	r5, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	b913      	cbnz	r3, 8003700 <_fflush_r+0x10>
 80036fa:	2500      	movs	r5, #0
 80036fc:	4628      	mov	r0, r5
 80036fe:	bd38      	pop	{r3, r4, r5, pc}
 8003700:	b118      	cbz	r0, 800370a <_fflush_r+0x1a>
 8003702:	6a03      	ldr	r3, [r0, #32]
 8003704:	b90b      	cbnz	r3, 800370a <_fflush_r+0x1a>
 8003706:	f7ff fdd1 	bl	80032ac <__sinit>
 800370a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f3      	beq.n	80036fa <_fflush_r+0xa>
 8003712:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003714:	07d0      	lsls	r0, r2, #31
 8003716:	d404      	bmi.n	8003722 <_fflush_r+0x32>
 8003718:	0599      	lsls	r1, r3, #22
 800371a:	d402      	bmi.n	8003722 <_fflush_r+0x32>
 800371c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800371e:	f7ff fef4 	bl	800350a <__retarget_lock_acquire_recursive>
 8003722:	4628      	mov	r0, r5
 8003724:	4621      	mov	r1, r4
 8003726:	f7ff ff5d 	bl	80035e4 <__sflush_r>
 800372a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800372c:	07da      	lsls	r2, r3, #31
 800372e:	4605      	mov	r5, r0
 8003730:	d4e4      	bmi.n	80036fc <_fflush_r+0xc>
 8003732:	89a3      	ldrh	r3, [r4, #12]
 8003734:	059b      	lsls	r3, r3, #22
 8003736:	d4e1      	bmi.n	80036fc <_fflush_r+0xc>
 8003738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800373a:	f7ff fee7 	bl	800350c <__retarget_lock_release_recursive>
 800373e:	e7dd      	b.n	80036fc <_fflush_r+0xc>

08003740 <fiprintf>:
 8003740:	b40e      	push	{r1, r2, r3}
 8003742:	b503      	push	{r0, r1, lr}
 8003744:	4601      	mov	r1, r0
 8003746:	ab03      	add	r3, sp, #12
 8003748:	4805      	ldr	r0, [pc, #20]	; (8003760 <fiprintf+0x20>)
 800374a:	f853 2b04 	ldr.w	r2, [r3], #4
 800374e:	6800      	ldr	r0, [r0, #0]
 8003750:	9301      	str	r3, [sp, #4]
 8003752:	f000 f837 	bl	80037c4 <_vfiprintf_r>
 8003756:	b002      	add	sp, #8
 8003758:	f85d eb04 	ldr.w	lr, [sp], #4
 800375c:	b003      	add	sp, #12
 800375e:	4770      	bx	lr
 8003760:	200000cc 	.word	0x200000cc

08003764 <abort>:
 8003764:	b508      	push	{r3, lr}
 8003766:	2006      	movs	r0, #6
 8003768:	f000 fb94 	bl	8003e94 <raise>
 800376c:	2001      	movs	r0, #1
 800376e:	f7fd fdbc 	bl	80012ea <_exit>

08003772 <__sfputc_r>:
 8003772:	6893      	ldr	r3, [r2, #8]
 8003774:	3b01      	subs	r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	b410      	push	{r4}
 800377a:	6093      	str	r3, [r2, #8]
 800377c:	da08      	bge.n	8003790 <__sfputc_r+0x1e>
 800377e:	6994      	ldr	r4, [r2, #24]
 8003780:	42a3      	cmp	r3, r4
 8003782:	db01      	blt.n	8003788 <__sfputc_r+0x16>
 8003784:	290a      	cmp	r1, #10
 8003786:	d103      	bne.n	8003790 <__sfputc_r+0x1e>
 8003788:	f85d 4b04 	ldr.w	r4, [sp], #4
 800378c:	f000 bac4 	b.w	8003d18 <__swbuf_r>
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	1c58      	adds	r0, r3, #1
 8003794:	6010      	str	r0, [r2, #0]
 8003796:	7019      	strb	r1, [r3, #0]
 8003798:	4608      	mov	r0, r1
 800379a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <__sfputs_r>:
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	4606      	mov	r6, r0
 80037a4:	460f      	mov	r7, r1
 80037a6:	4614      	mov	r4, r2
 80037a8:	18d5      	adds	r5, r2, r3
 80037aa:	42ac      	cmp	r4, r5
 80037ac:	d101      	bne.n	80037b2 <__sfputs_r+0x12>
 80037ae:	2000      	movs	r0, #0
 80037b0:	e007      	b.n	80037c2 <__sfputs_r+0x22>
 80037b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037b6:	463a      	mov	r2, r7
 80037b8:	4630      	mov	r0, r6
 80037ba:	f7ff ffda 	bl	8003772 <__sfputc_r>
 80037be:	1c43      	adds	r3, r0, #1
 80037c0:	d1f3      	bne.n	80037aa <__sfputs_r+0xa>
 80037c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080037c4 <_vfiprintf_r>:
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	460d      	mov	r5, r1
 80037ca:	b09d      	sub	sp, #116	; 0x74
 80037cc:	4614      	mov	r4, r2
 80037ce:	4698      	mov	r8, r3
 80037d0:	4606      	mov	r6, r0
 80037d2:	b118      	cbz	r0, 80037dc <_vfiprintf_r+0x18>
 80037d4:	6a03      	ldr	r3, [r0, #32]
 80037d6:	b90b      	cbnz	r3, 80037dc <_vfiprintf_r+0x18>
 80037d8:	f7ff fd68 	bl	80032ac <__sinit>
 80037dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80037de:	07d9      	lsls	r1, r3, #31
 80037e0:	d405      	bmi.n	80037ee <_vfiprintf_r+0x2a>
 80037e2:	89ab      	ldrh	r3, [r5, #12]
 80037e4:	059a      	lsls	r2, r3, #22
 80037e6:	d402      	bmi.n	80037ee <_vfiprintf_r+0x2a>
 80037e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80037ea:	f7ff fe8e 	bl	800350a <__retarget_lock_acquire_recursive>
 80037ee:	89ab      	ldrh	r3, [r5, #12]
 80037f0:	071b      	lsls	r3, r3, #28
 80037f2:	d501      	bpl.n	80037f8 <_vfiprintf_r+0x34>
 80037f4:	692b      	ldr	r3, [r5, #16]
 80037f6:	b99b      	cbnz	r3, 8003820 <_vfiprintf_r+0x5c>
 80037f8:	4629      	mov	r1, r5
 80037fa:	4630      	mov	r0, r6
 80037fc:	f000 faca 	bl	8003d94 <__swsetup_r>
 8003800:	b170      	cbz	r0, 8003820 <_vfiprintf_r+0x5c>
 8003802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003804:	07dc      	lsls	r4, r3, #31
 8003806:	d504      	bpl.n	8003812 <_vfiprintf_r+0x4e>
 8003808:	f04f 30ff 	mov.w	r0, #4294967295
 800380c:	b01d      	add	sp, #116	; 0x74
 800380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003812:	89ab      	ldrh	r3, [r5, #12]
 8003814:	0598      	lsls	r0, r3, #22
 8003816:	d4f7      	bmi.n	8003808 <_vfiprintf_r+0x44>
 8003818:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800381a:	f7ff fe77 	bl	800350c <__retarget_lock_release_recursive>
 800381e:	e7f3      	b.n	8003808 <_vfiprintf_r+0x44>
 8003820:	2300      	movs	r3, #0
 8003822:	9309      	str	r3, [sp, #36]	; 0x24
 8003824:	2320      	movs	r3, #32
 8003826:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800382a:	f8cd 800c 	str.w	r8, [sp, #12]
 800382e:	2330      	movs	r3, #48	; 0x30
 8003830:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80039e4 <_vfiprintf_r+0x220>
 8003834:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003838:	f04f 0901 	mov.w	r9, #1
 800383c:	4623      	mov	r3, r4
 800383e:	469a      	mov	sl, r3
 8003840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003844:	b10a      	cbz	r2, 800384a <_vfiprintf_r+0x86>
 8003846:	2a25      	cmp	r2, #37	; 0x25
 8003848:	d1f9      	bne.n	800383e <_vfiprintf_r+0x7a>
 800384a:	ebba 0b04 	subs.w	fp, sl, r4
 800384e:	d00b      	beq.n	8003868 <_vfiprintf_r+0xa4>
 8003850:	465b      	mov	r3, fp
 8003852:	4622      	mov	r2, r4
 8003854:	4629      	mov	r1, r5
 8003856:	4630      	mov	r0, r6
 8003858:	f7ff ffa2 	bl	80037a0 <__sfputs_r>
 800385c:	3001      	adds	r0, #1
 800385e:	f000 80a9 	beq.w	80039b4 <_vfiprintf_r+0x1f0>
 8003862:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003864:	445a      	add	r2, fp
 8003866:	9209      	str	r2, [sp, #36]	; 0x24
 8003868:	f89a 3000 	ldrb.w	r3, [sl]
 800386c:	2b00      	cmp	r3, #0
 800386e:	f000 80a1 	beq.w	80039b4 <_vfiprintf_r+0x1f0>
 8003872:	2300      	movs	r3, #0
 8003874:	f04f 32ff 	mov.w	r2, #4294967295
 8003878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800387c:	f10a 0a01 	add.w	sl, sl, #1
 8003880:	9304      	str	r3, [sp, #16]
 8003882:	9307      	str	r3, [sp, #28]
 8003884:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003888:	931a      	str	r3, [sp, #104]	; 0x68
 800388a:	4654      	mov	r4, sl
 800388c:	2205      	movs	r2, #5
 800388e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003892:	4854      	ldr	r0, [pc, #336]	; (80039e4 <_vfiprintf_r+0x220>)
 8003894:	f7fc fcac 	bl	80001f0 <memchr>
 8003898:	9a04      	ldr	r2, [sp, #16]
 800389a:	b9d8      	cbnz	r0, 80038d4 <_vfiprintf_r+0x110>
 800389c:	06d1      	lsls	r1, r2, #27
 800389e:	bf44      	itt	mi
 80038a0:	2320      	movmi	r3, #32
 80038a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038a6:	0713      	lsls	r3, r2, #28
 80038a8:	bf44      	itt	mi
 80038aa:	232b      	movmi	r3, #43	; 0x2b
 80038ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038b0:	f89a 3000 	ldrb.w	r3, [sl]
 80038b4:	2b2a      	cmp	r3, #42	; 0x2a
 80038b6:	d015      	beq.n	80038e4 <_vfiprintf_r+0x120>
 80038b8:	9a07      	ldr	r2, [sp, #28]
 80038ba:	4654      	mov	r4, sl
 80038bc:	2000      	movs	r0, #0
 80038be:	f04f 0c0a 	mov.w	ip, #10
 80038c2:	4621      	mov	r1, r4
 80038c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038c8:	3b30      	subs	r3, #48	; 0x30
 80038ca:	2b09      	cmp	r3, #9
 80038cc:	d94d      	bls.n	800396a <_vfiprintf_r+0x1a6>
 80038ce:	b1b0      	cbz	r0, 80038fe <_vfiprintf_r+0x13a>
 80038d0:	9207      	str	r2, [sp, #28]
 80038d2:	e014      	b.n	80038fe <_vfiprintf_r+0x13a>
 80038d4:	eba0 0308 	sub.w	r3, r0, r8
 80038d8:	fa09 f303 	lsl.w	r3, r9, r3
 80038dc:	4313      	orrs	r3, r2
 80038de:	9304      	str	r3, [sp, #16]
 80038e0:	46a2      	mov	sl, r4
 80038e2:	e7d2      	b.n	800388a <_vfiprintf_r+0xc6>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	1d19      	adds	r1, r3, #4
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	9103      	str	r1, [sp, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	bfbb      	ittet	lt
 80038f0:	425b      	neglt	r3, r3
 80038f2:	f042 0202 	orrlt.w	r2, r2, #2
 80038f6:	9307      	strge	r3, [sp, #28]
 80038f8:	9307      	strlt	r3, [sp, #28]
 80038fa:	bfb8      	it	lt
 80038fc:	9204      	strlt	r2, [sp, #16]
 80038fe:	7823      	ldrb	r3, [r4, #0]
 8003900:	2b2e      	cmp	r3, #46	; 0x2e
 8003902:	d10c      	bne.n	800391e <_vfiprintf_r+0x15a>
 8003904:	7863      	ldrb	r3, [r4, #1]
 8003906:	2b2a      	cmp	r3, #42	; 0x2a
 8003908:	d134      	bne.n	8003974 <_vfiprintf_r+0x1b0>
 800390a:	9b03      	ldr	r3, [sp, #12]
 800390c:	1d1a      	adds	r2, r3, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	9203      	str	r2, [sp, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	bfb8      	it	lt
 8003916:	f04f 33ff 	movlt.w	r3, #4294967295
 800391a:	3402      	adds	r4, #2
 800391c:	9305      	str	r3, [sp, #20]
 800391e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80039f4 <_vfiprintf_r+0x230>
 8003922:	7821      	ldrb	r1, [r4, #0]
 8003924:	2203      	movs	r2, #3
 8003926:	4650      	mov	r0, sl
 8003928:	f7fc fc62 	bl	80001f0 <memchr>
 800392c:	b138      	cbz	r0, 800393e <_vfiprintf_r+0x17a>
 800392e:	9b04      	ldr	r3, [sp, #16]
 8003930:	eba0 000a 	sub.w	r0, r0, sl
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	4082      	lsls	r2, r0
 8003938:	4313      	orrs	r3, r2
 800393a:	3401      	adds	r4, #1
 800393c:	9304      	str	r3, [sp, #16]
 800393e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003942:	4829      	ldr	r0, [pc, #164]	; (80039e8 <_vfiprintf_r+0x224>)
 8003944:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003948:	2206      	movs	r2, #6
 800394a:	f7fc fc51 	bl	80001f0 <memchr>
 800394e:	2800      	cmp	r0, #0
 8003950:	d03f      	beq.n	80039d2 <_vfiprintf_r+0x20e>
 8003952:	4b26      	ldr	r3, [pc, #152]	; (80039ec <_vfiprintf_r+0x228>)
 8003954:	bb1b      	cbnz	r3, 800399e <_vfiprintf_r+0x1da>
 8003956:	9b03      	ldr	r3, [sp, #12]
 8003958:	3307      	adds	r3, #7
 800395a:	f023 0307 	bic.w	r3, r3, #7
 800395e:	3308      	adds	r3, #8
 8003960:	9303      	str	r3, [sp, #12]
 8003962:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003964:	443b      	add	r3, r7
 8003966:	9309      	str	r3, [sp, #36]	; 0x24
 8003968:	e768      	b.n	800383c <_vfiprintf_r+0x78>
 800396a:	fb0c 3202 	mla	r2, ip, r2, r3
 800396e:	460c      	mov	r4, r1
 8003970:	2001      	movs	r0, #1
 8003972:	e7a6      	b.n	80038c2 <_vfiprintf_r+0xfe>
 8003974:	2300      	movs	r3, #0
 8003976:	3401      	adds	r4, #1
 8003978:	9305      	str	r3, [sp, #20]
 800397a:	4619      	mov	r1, r3
 800397c:	f04f 0c0a 	mov.w	ip, #10
 8003980:	4620      	mov	r0, r4
 8003982:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003986:	3a30      	subs	r2, #48	; 0x30
 8003988:	2a09      	cmp	r2, #9
 800398a:	d903      	bls.n	8003994 <_vfiprintf_r+0x1d0>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0c6      	beq.n	800391e <_vfiprintf_r+0x15a>
 8003990:	9105      	str	r1, [sp, #20]
 8003992:	e7c4      	b.n	800391e <_vfiprintf_r+0x15a>
 8003994:	fb0c 2101 	mla	r1, ip, r1, r2
 8003998:	4604      	mov	r4, r0
 800399a:	2301      	movs	r3, #1
 800399c:	e7f0      	b.n	8003980 <_vfiprintf_r+0x1bc>
 800399e:	ab03      	add	r3, sp, #12
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	462a      	mov	r2, r5
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <_vfiprintf_r+0x22c>)
 80039a6:	a904      	add	r1, sp, #16
 80039a8:	4630      	mov	r0, r6
 80039aa:	f3af 8000 	nop.w
 80039ae:	4607      	mov	r7, r0
 80039b0:	1c78      	adds	r0, r7, #1
 80039b2:	d1d6      	bne.n	8003962 <_vfiprintf_r+0x19e>
 80039b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039b6:	07d9      	lsls	r1, r3, #31
 80039b8:	d405      	bmi.n	80039c6 <_vfiprintf_r+0x202>
 80039ba:	89ab      	ldrh	r3, [r5, #12]
 80039bc:	059a      	lsls	r2, r3, #22
 80039be:	d402      	bmi.n	80039c6 <_vfiprintf_r+0x202>
 80039c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039c2:	f7ff fda3 	bl	800350c <__retarget_lock_release_recursive>
 80039c6:	89ab      	ldrh	r3, [r5, #12]
 80039c8:	065b      	lsls	r3, r3, #25
 80039ca:	f53f af1d 	bmi.w	8003808 <_vfiprintf_r+0x44>
 80039ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80039d0:	e71c      	b.n	800380c <_vfiprintf_r+0x48>
 80039d2:	ab03      	add	r3, sp, #12
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	462a      	mov	r2, r5
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <_vfiprintf_r+0x22c>)
 80039da:	a904      	add	r1, sp, #16
 80039dc:	4630      	mov	r0, r6
 80039de:	f000 f879 	bl	8003ad4 <_printf_i>
 80039e2:	e7e4      	b.n	80039ae <_vfiprintf_r+0x1ea>
 80039e4:	08004207 	.word	0x08004207
 80039e8:	08004211 	.word	0x08004211
 80039ec:	00000000 	.word	0x00000000
 80039f0:	080037a1 	.word	0x080037a1
 80039f4:	0800420d 	.word	0x0800420d

080039f8 <_printf_common>:
 80039f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039fc:	4616      	mov	r6, r2
 80039fe:	4699      	mov	r9, r3
 8003a00:	688a      	ldr	r2, [r1, #8]
 8003a02:	690b      	ldr	r3, [r1, #16]
 8003a04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	bfb8      	it	lt
 8003a0c:	4613      	movlt	r3, r2
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a14:	4607      	mov	r7, r0
 8003a16:	460c      	mov	r4, r1
 8003a18:	b10a      	cbz	r2, 8003a1e <_printf_common+0x26>
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	6033      	str	r3, [r6, #0]
 8003a1e:	6823      	ldr	r3, [r4, #0]
 8003a20:	0699      	lsls	r1, r3, #26
 8003a22:	bf42      	ittt	mi
 8003a24:	6833      	ldrmi	r3, [r6, #0]
 8003a26:	3302      	addmi	r3, #2
 8003a28:	6033      	strmi	r3, [r6, #0]
 8003a2a:	6825      	ldr	r5, [r4, #0]
 8003a2c:	f015 0506 	ands.w	r5, r5, #6
 8003a30:	d106      	bne.n	8003a40 <_printf_common+0x48>
 8003a32:	f104 0a19 	add.w	sl, r4, #25
 8003a36:	68e3      	ldr	r3, [r4, #12]
 8003a38:	6832      	ldr	r2, [r6, #0]
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	42ab      	cmp	r3, r5
 8003a3e:	dc26      	bgt.n	8003a8e <_printf_common+0x96>
 8003a40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a44:	1e13      	subs	r3, r2, #0
 8003a46:	6822      	ldr	r2, [r4, #0]
 8003a48:	bf18      	it	ne
 8003a4a:	2301      	movne	r3, #1
 8003a4c:	0692      	lsls	r2, r2, #26
 8003a4e:	d42b      	bmi.n	8003aa8 <_printf_common+0xb0>
 8003a50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a54:	4649      	mov	r1, r9
 8003a56:	4638      	mov	r0, r7
 8003a58:	47c0      	blx	r8
 8003a5a:	3001      	adds	r0, #1
 8003a5c:	d01e      	beq.n	8003a9c <_printf_common+0xa4>
 8003a5e:	6823      	ldr	r3, [r4, #0]
 8003a60:	6922      	ldr	r2, [r4, #16]
 8003a62:	f003 0306 	and.w	r3, r3, #6
 8003a66:	2b04      	cmp	r3, #4
 8003a68:	bf02      	ittt	eq
 8003a6a:	68e5      	ldreq	r5, [r4, #12]
 8003a6c:	6833      	ldreq	r3, [r6, #0]
 8003a6e:	1aed      	subeq	r5, r5, r3
 8003a70:	68a3      	ldr	r3, [r4, #8]
 8003a72:	bf0c      	ite	eq
 8003a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a78:	2500      	movne	r5, #0
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	bfc4      	itt	gt
 8003a7e:	1a9b      	subgt	r3, r3, r2
 8003a80:	18ed      	addgt	r5, r5, r3
 8003a82:	2600      	movs	r6, #0
 8003a84:	341a      	adds	r4, #26
 8003a86:	42b5      	cmp	r5, r6
 8003a88:	d11a      	bne.n	8003ac0 <_printf_common+0xc8>
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e008      	b.n	8003aa0 <_printf_common+0xa8>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4652      	mov	r2, sl
 8003a92:	4649      	mov	r1, r9
 8003a94:	4638      	mov	r0, r7
 8003a96:	47c0      	blx	r8
 8003a98:	3001      	adds	r0, #1
 8003a9a:	d103      	bne.n	8003aa4 <_printf_common+0xac>
 8003a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa4:	3501      	adds	r5, #1
 8003aa6:	e7c6      	b.n	8003a36 <_printf_common+0x3e>
 8003aa8:	18e1      	adds	r1, r4, r3
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	2030      	movs	r0, #48	; 0x30
 8003aae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ab2:	4422      	add	r2, r4
 8003ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ab8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003abc:	3302      	adds	r3, #2
 8003abe:	e7c7      	b.n	8003a50 <_printf_common+0x58>
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	4622      	mov	r2, r4
 8003ac4:	4649      	mov	r1, r9
 8003ac6:	4638      	mov	r0, r7
 8003ac8:	47c0      	blx	r8
 8003aca:	3001      	adds	r0, #1
 8003acc:	d0e6      	beq.n	8003a9c <_printf_common+0xa4>
 8003ace:	3601      	adds	r6, #1
 8003ad0:	e7d9      	b.n	8003a86 <_printf_common+0x8e>
	...

08003ad4 <_printf_i>:
 8003ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ad8:	7e0f      	ldrb	r7, [r1, #24]
 8003ada:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003adc:	2f78      	cmp	r7, #120	; 0x78
 8003ade:	4691      	mov	r9, r2
 8003ae0:	4680      	mov	r8, r0
 8003ae2:	460c      	mov	r4, r1
 8003ae4:	469a      	mov	sl, r3
 8003ae6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003aea:	d807      	bhi.n	8003afc <_printf_i+0x28>
 8003aec:	2f62      	cmp	r7, #98	; 0x62
 8003aee:	d80a      	bhi.n	8003b06 <_printf_i+0x32>
 8003af0:	2f00      	cmp	r7, #0
 8003af2:	f000 80d4 	beq.w	8003c9e <_printf_i+0x1ca>
 8003af6:	2f58      	cmp	r7, #88	; 0x58
 8003af8:	f000 80c0 	beq.w	8003c7c <_printf_i+0x1a8>
 8003afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b04:	e03a      	b.n	8003b7c <_printf_i+0xa8>
 8003b06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b0a:	2b15      	cmp	r3, #21
 8003b0c:	d8f6      	bhi.n	8003afc <_printf_i+0x28>
 8003b0e:	a101      	add	r1, pc, #4	; (adr r1, 8003b14 <_printf_i+0x40>)
 8003b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b14:	08003b6d 	.word	0x08003b6d
 8003b18:	08003b81 	.word	0x08003b81
 8003b1c:	08003afd 	.word	0x08003afd
 8003b20:	08003afd 	.word	0x08003afd
 8003b24:	08003afd 	.word	0x08003afd
 8003b28:	08003afd 	.word	0x08003afd
 8003b2c:	08003b81 	.word	0x08003b81
 8003b30:	08003afd 	.word	0x08003afd
 8003b34:	08003afd 	.word	0x08003afd
 8003b38:	08003afd 	.word	0x08003afd
 8003b3c:	08003afd 	.word	0x08003afd
 8003b40:	08003c85 	.word	0x08003c85
 8003b44:	08003bad 	.word	0x08003bad
 8003b48:	08003c3f 	.word	0x08003c3f
 8003b4c:	08003afd 	.word	0x08003afd
 8003b50:	08003afd 	.word	0x08003afd
 8003b54:	08003ca7 	.word	0x08003ca7
 8003b58:	08003afd 	.word	0x08003afd
 8003b5c:	08003bad 	.word	0x08003bad
 8003b60:	08003afd 	.word	0x08003afd
 8003b64:	08003afd 	.word	0x08003afd
 8003b68:	08003c47 	.word	0x08003c47
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	1d1a      	adds	r2, r3, #4
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	602a      	str	r2, [r5, #0]
 8003b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e09f      	b.n	8003cc0 <_printf_i+0x1ec>
 8003b80:	6820      	ldr	r0, [r4, #0]
 8003b82:	682b      	ldr	r3, [r5, #0]
 8003b84:	0607      	lsls	r7, r0, #24
 8003b86:	f103 0104 	add.w	r1, r3, #4
 8003b8a:	6029      	str	r1, [r5, #0]
 8003b8c:	d501      	bpl.n	8003b92 <_printf_i+0xbe>
 8003b8e:	681e      	ldr	r6, [r3, #0]
 8003b90:	e003      	b.n	8003b9a <_printf_i+0xc6>
 8003b92:	0646      	lsls	r6, r0, #25
 8003b94:	d5fb      	bpl.n	8003b8e <_printf_i+0xba>
 8003b96:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003b9a:	2e00      	cmp	r6, #0
 8003b9c:	da03      	bge.n	8003ba6 <_printf_i+0xd2>
 8003b9e:	232d      	movs	r3, #45	; 0x2d
 8003ba0:	4276      	negs	r6, r6
 8003ba2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ba6:	485a      	ldr	r0, [pc, #360]	; (8003d10 <_printf_i+0x23c>)
 8003ba8:	230a      	movs	r3, #10
 8003baa:	e012      	b.n	8003bd2 <_printf_i+0xfe>
 8003bac:	682b      	ldr	r3, [r5, #0]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	1d19      	adds	r1, r3, #4
 8003bb2:	6029      	str	r1, [r5, #0]
 8003bb4:	0605      	lsls	r5, r0, #24
 8003bb6:	d501      	bpl.n	8003bbc <_printf_i+0xe8>
 8003bb8:	681e      	ldr	r6, [r3, #0]
 8003bba:	e002      	b.n	8003bc2 <_printf_i+0xee>
 8003bbc:	0641      	lsls	r1, r0, #25
 8003bbe:	d5fb      	bpl.n	8003bb8 <_printf_i+0xe4>
 8003bc0:	881e      	ldrh	r6, [r3, #0]
 8003bc2:	4853      	ldr	r0, [pc, #332]	; (8003d10 <_printf_i+0x23c>)
 8003bc4:	2f6f      	cmp	r7, #111	; 0x6f
 8003bc6:	bf0c      	ite	eq
 8003bc8:	2308      	moveq	r3, #8
 8003bca:	230a      	movne	r3, #10
 8003bcc:	2100      	movs	r1, #0
 8003bce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003bd2:	6865      	ldr	r5, [r4, #4]
 8003bd4:	60a5      	str	r5, [r4, #8]
 8003bd6:	2d00      	cmp	r5, #0
 8003bd8:	bfa2      	ittt	ge
 8003bda:	6821      	ldrge	r1, [r4, #0]
 8003bdc:	f021 0104 	bicge.w	r1, r1, #4
 8003be0:	6021      	strge	r1, [r4, #0]
 8003be2:	b90e      	cbnz	r6, 8003be8 <_printf_i+0x114>
 8003be4:	2d00      	cmp	r5, #0
 8003be6:	d04b      	beq.n	8003c80 <_printf_i+0x1ac>
 8003be8:	4615      	mov	r5, r2
 8003bea:	fbb6 f1f3 	udiv	r1, r6, r3
 8003bee:	fb03 6711 	mls	r7, r3, r1, r6
 8003bf2:	5dc7      	ldrb	r7, [r0, r7]
 8003bf4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003bf8:	4637      	mov	r7, r6
 8003bfa:	42bb      	cmp	r3, r7
 8003bfc:	460e      	mov	r6, r1
 8003bfe:	d9f4      	bls.n	8003bea <_printf_i+0x116>
 8003c00:	2b08      	cmp	r3, #8
 8003c02:	d10b      	bne.n	8003c1c <_printf_i+0x148>
 8003c04:	6823      	ldr	r3, [r4, #0]
 8003c06:	07de      	lsls	r6, r3, #31
 8003c08:	d508      	bpl.n	8003c1c <_printf_i+0x148>
 8003c0a:	6923      	ldr	r3, [r4, #16]
 8003c0c:	6861      	ldr	r1, [r4, #4]
 8003c0e:	4299      	cmp	r1, r3
 8003c10:	bfde      	ittt	le
 8003c12:	2330      	movle	r3, #48	; 0x30
 8003c14:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c18:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c1c:	1b52      	subs	r2, r2, r5
 8003c1e:	6122      	str	r2, [r4, #16]
 8003c20:	f8cd a000 	str.w	sl, [sp]
 8003c24:	464b      	mov	r3, r9
 8003c26:	aa03      	add	r2, sp, #12
 8003c28:	4621      	mov	r1, r4
 8003c2a:	4640      	mov	r0, r8
 8003c2c:	f7ff fee4 	bl	80039f8 <_printf_common>
 8003c30:	3001      	adds	r0, #1
 8003c32:	d14a      	bne.n	8003cca <_printf_i+0x1f6>
 8003c34:	f04f 30ff 	mov.w	r0, #4294967295
 8003c38:	b004      	add	sp, #16
 8003c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f043 0320 	orr.w	r3, r3, #32
 8003c44:	6023      	str	r3, [r4, #0]
 8003c46:	4833      	ldr	r0, [pc, #204]	; (8003d14 <_printf_i+0x240>)
 8003c48:	2778      	movs	r7, #120	; 0x78
 8003c4a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c4e:	6823      	ldr	r3, [r4, #0]
 8003c50:	6829      	ldr	r1, [r5, #0]
 8003c52:	061f      	lsls	r7, r3, #24
 8003c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c58:	d402      	bmi.n	8003c60 <_printf_i+0x18c>
 8003c5a:	065f      	lsls	r7, r3, #25
 8003c5c:	bf48      	it	mi
 8003c5e:	b2b6      	uxthmi	r6, r6
 8003c60:	07df      	lsls	r7, r3, #31
 8003c62:	bf48      	it	mi
 8003c64:	f043 0320 	orrmi.w	r3, r3, #32
 8003c68:	6029      	str	r1, [r5, #0]
 8003c6a:	bf48      	it	mi
 8003c6c:	6023      	strmi	r3, [r4, #0]
 8003c6e:	b91e      	cbnz	r6, 8003c78 <_printf_i+0x1a4>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	f023 0320 	bic.w	r3, r3, #32
 8003c76:	6023      	str	r3, [r4, #0]
 8003c78:	2310      	movs	r3, #16
 8003c7a:	e7a7      	b.n	8003bcc <_printf_i+0xf8>
 8003c7c:	4824      	ldr	r0, [pc, #144]	; (8003d10 <_printf_i+0x23c>)
 8003c7e:	e7e4      	b.n	8003c4a <_printf_i+0x176>
 8003c80:	4615      	mov	r5, r2
 8003c82:	e7bd      	b.n	8003c00 <_printf_i+0x12c>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	6826      	ldr	r6, [r4, #0]
 8003c88:	6961      	ldr	r1, [r4, #20]
 8003c8a:	1d18      	adds	r0, r3, #4
 8003c8c:	6028      	str	r0, [r5, #0]
 8003c8e:	0635      	lsls	r5, r6, #24
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	d501      	bpl.n	8003c98 <_printf_i+0x1c4>
 8003c94:	6019      	str	r1, [r3, #0]
 8003c96:	e002      	b.n	8003c9e <_printf_i+0x1ca>
 8003c98:	0670      	lsls	r0, r6, #25
 8003c9a:	d5fb      	bpl.n	8003c94 <_printf_i+0x1c0>
 8003c9c:	8019      	strh	r1, [r3, #0]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	6123      	str	r3, [r4, #16]
 8003ca2:	4615      	mov	r5, r2
 8003ca4:	e7bc      	b.n	8003c20 <_printf_i+0x14c>
 8003ca6:	682b      	ldr	r3, [r5, #0]
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	602a      	str	r2, [r5, #0]
 8003cac:	681d      	ldr	r5, [r3, #0]
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	4628      	mov	r0, r5
 8003cb4:	f7fc fa9c 	bl	80001f0 <memchr>
 8003cb8:	b108      	cbz	r0, 8003cbe <_printf_i+0x1ea>
 8003cba:	1b40      	subs	r0, r0, r5
 8003cbc:	6060      	str	r0, [r4, #4]
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	6123      	str	r3, [r4, #16]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003cc8:	e7aa      	b.n	8003c20 <_printf_i+0x14c>
 8003cca:	6923      	ldr	r3, [r4, #16]
 8003ccc:	462a      	mov	r2, r5
 8003cce:	4649      	mov	r1, r9
 8003cd0:	4640      	mov	r0, r8
 8003cd2:	47d0      	blx	sl
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d0ad      	beq.n	8003c34 <_printf_i+0x160>
 8003cd8:	6823      	ldr	r3, [r4, #0]
 8003cda:	079b      	lsls	r3, r3, #30
 8003cdc:	d413      	bmi.n	8003d06 <_printf_i+0x232>
 8003cde:	68e0      	ldr	r0, [r4, #12]
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	4298      	cmp	r0, r3
 8003ce4:	bfb8      	it	lt
 8003ce6:	4618      	movlt	r0, r3
 8003ce8:	e7a6      	b.n	8003c38 <_printf_i+0x164>
 8003cea:	2301      	movs	r3, #1
 8003cec:	4632      	mov	r2, r6
 8003cee:	4649      	mov	r1, r9
 8003cf0:	4640      	mov	r0, r8
 8003cf2:	47d0      	blx	sl
 8003cf4:	3001      	adds	r0, #1
 8003cf6:	d09d      	beq.n	8003c34 <_printf_i+0x160>
 8003cf8:	3501      	adds	r5, #1
 8003cfa:	68e3      	ldr	r3, [r4, #12]
 8003cfc:	9903      	ldr	r1, [sp, #12]
 8003cfe:	1a5b      	subs	r3, r3, r1
 8003d00:	42ab      	cmp	r3, r5
 8003d02:	dcf2      	bgt.n	8003cea <_printf_i+0x216>
 8003d04:	e7eb      	b.n	8003cde <_printf_i+0x20a>
 8003d06:	2500      	movs	r5, #0
 8003d08:	f104 0619 	add.w	r6, r4, #25
 8003d0c:	e7f5      	b.n	8003cfa <_printf_i+0x226>
 8003d0e:	bf00      	nop
 8003d10:	08004218 	.word	0x08004218
 8003d14:	08004229 	.word	0x08004229

08003d18 <__swbuf_r>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	460e      	mov	r6, r1
 8003d1c:	4614      	mov	r4, r2
 8003d1e:	4605      	mov	r5, r0
 8003d20:	b118      	cbz	r0, 8003d2a <__swbuf_r+0x12>
 8003d22:	6a03      	ldr	r3, [r0, #32]
 8003d24:	b90b      	cbnz	r3, 8003d2a <__swbuf_r+0x12>
 8003d26:	f7ff fac1 	bl	80032ac <__sinit>
 8003d2a:	69a3      	ldr	r3, [r4, #24]
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	89a3      	ldrh	r3, [r4, #12]
 8003d30:	071a      	lsls	r2, r3, #28
 8003d32:	d525      	bpl.n	8003d80 <__swbuf_r+0x68>
 8003d34:	6923      	ldr	r3, [r4, #16]
 8003d36:	b31b      	cbz	r3, 8003d80 <__swbuf_r+0x68>
 8003d38:	6823      	ldr	r3, [r4, #0]
 8003d3a:	6922      	ldr	r2, [r4, #16]
 8003d3c:	1a98      	subs	r0, r3, r2
 8003d3e:	6963      	ldr	r3, [r4, #20]
 8003d40:	b2f6      	uxtb	r6, r6
 8003d42:	4283      	cmp	r3, r0
 8003d44:	4637      	mov	r7, r6
 8003d46:	dc04      	bgt.n	8003d52 <__swbuf_r+0x3a>
 8003d48:	4621      	mov	r1, r4
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f7ff fcd0 	bl	80036f0 <_fflush_r>
 8003d50:	b9e0      	cbnz	r0, 8003d8c <__swbuf_r+0x74>
 8003d52:	68a3      	ldr	r3, [r4, #8]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	60a3      	str	r3, [r4, #8]
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	6022      	str	r2, [r4, #0]
 8003d5e:	701e      	strb	r6, [r3, #0]
 8003d60:	6962      	ldr	r2, [r4, #20]
 8003d62:	1c43      	adds	r3, r0, #1
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d004      	beq.n	8003d72 <__swbuf_r+0x5a>
 8003d68:	89a3      	ldrh	r3, [r4, #12]
 8003d6a:	07db      	lsls	r3, r3, #31
 8003d6c:	d506      	bpl.n	8003d7c <__swbuf_r+0x64>
 8003d6e:	2e0a      	cmp	r6, #10
 8003d70:	d104      	bne.n	8003d7c <__swbuf_r+0x64>
 8003d72:	4621      	mov	r1, r4
 8003d74:	4628      	mov	r0, r5
 8003d76:	f7ff fcbb 	bl	80036f0 <_fflush_r>
 8003d7a:	b938      	cbnz	r0, 8003d8c <__swbuf_r+0x74>
 8003d7c:	4638      	mov	r0, r7
 8003d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d80:	4621      	mov	r1, r4
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f806 	bl	8003d94 <__swsetup_r>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d0d5      	beq.n	8003d38 <__swbuf_r+0x20>
 8003d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8003d90:	e7f4      	b.n	8003d7c <__swbuf_r+0x64>
	...

08003d94 <__swsetup_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4b2a      	ldr	r3, [pc, #168]	; (8003e40 <__swsetup_r+0xac>)
 8003d98:	4605      	mov	r5, r0
 8003d9a:	6818      	ldr	r0, [r3, #0]
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	b118      	cbz	r0, 8003da8 <__swsetup_r+0x14>
 8003da0:	6a03      	ldr	r3, [r0, #32]
 8003da2:	b90b      	cbnz	r3, 8003da8 <__swsetup_r+0x14>
 8003da4:	f7ff fa82 	bl	80032ac <__sinit>
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003dae:	0718      	lsls	r0, r3, #28
 8003db0:	d422      	bmi.n	8003df8 <__swsetup_r+0x64>
 8003db2:	06d9      	lsls	r1, r3, #27
 8003db4:	d407      	bmi.n	8003dc6 <__swsetup_r+0x32>
 8003db6:	2309      	movs	r3, #9
 8003db8:	602b      	str	r3, [r5, #0]
 8003dba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc4:	e034      	b.n	8003e30 <__swsetup_r+0x9c>
 8003dc6:	0758      	lsls	r0, r3, #29
 8003dc8:	d512      	bpl.n	8003df0 <__swsetup_r+0x5c>
 8003dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003dcc:	b141      	cbz	r1, 8003de0 <__swsetup_r+0x4c>
 8003dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dd2:	4299      	cmp	r1, r3
 8003dd4:	d002      	beq.n	8003ddc <__swsetup_r+0x48>
 8003dd6:	4628      	mov	r0, r5
 8003dd8:	f7ff fbb8 	bl	800354c <_free_r>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	6363      	str	r3, [r4, #52]	; 0x34
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003de6:	81a3      	strh	r3, [r4, #12]
 8003de8:	2300      	movs	r3, #0
 8003dea:	6063      	str	r3, [r4, #4]
 8003dec:	6923      	ldr	r3, [r4, #16]
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	89a3      	ldrh	r3, [r4, #12]
 8003df2:	f043 0308 	orr.w	r3, r3, #8
 8003df6:	81a3      	strh	r3, [r4, #12]
 8003df8:	6923      	ldr	r3, [r4, #16]
 8003dfa:	b94b      	cbnz	r3, 8003e10 <__swsetup_r+0x7c>
 8003dfc:	89a3      	ldrh	r3, [r4, #12]
 8003dfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e06:	d003      	beq.n	8003e10 <__swsetup_r+0x7c>
 8003e08:	4621      	mov	r1, r4
 8003e0a:	4628      	mov	r0, r5
 8003e0c:	f000 f884 	bl	8003f18 <__smakebuf_r>
 8003e10:	89a0      	ldrh	r0, [r4, #12]
 8003e12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e16:	f010 0301 	ands.w	r3, r0, #1
 8003e1a:	d00a      	beq.n	8003e32 <__swsetup_r+0x9e>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	6963      	ldr	r3, [r4, #20]
 8003e22:	425b      	negs	r3, r3
 8003e24:	61a3      	str	r3, [r4, #24]
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	b943      	cbnz	r3, 8003e3c <__swsetup_r+0xa8>
 8003e2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003e2e:	d1c4      	bne.n	8003dba <__swsetup_r+0x26>
 8003e30:	bd38      	pop	{r3, r4, r5, pc}
 8003e32:	0781      	lsls	r1, r0, #30
 8003e34:	bf58      	it	pl
 8003e36:	6963      	ldrpl	r3, [r4, #20]
 8003e38:	60a3      	str	r3, [r4, #8]
 8003e3a:	e7f4      	b.n	8003e26 <__swsetup_r+0x92>
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	e7f7      	b.n	8003e30 <__swsetup_r+0x9c>
 8003e40:	200000cc 	.word	0x200000cc

08003e44 <_raise_r>:
 8003e44:	291f      	cmp	r1, #31
 8003e46:	b538      	push	{r3, r4, r5, lr}
 8003e48:	4604      	mov	r4, r0
 8003e4a:	460d      	mov	r5, r1
 8003e4c:	d904      	bls.n	8003e58 <_raise_r+0x14>
 8003e4e:	2316      	movs	r3, #22
 8003e50:	6003      	str	r3, [r0, #0]
 8003e52:	f04f 30ff 	mov.w	r0, #4294967295
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003e5a:	b112      	cbz	r2, 8003e62 <_raise_r+0x1e>
 8003e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e60:	b94b      	cbnz	r3, 8003e76 <_raise_r+0x32>
 8003e62:	4620      	mov	r0, r4
 8003e64:	f000 f830 	bl	8003ec8 <_getpid_r>
 8003e68:	462a      	mov	r2, r5
 8003e6a:	4601      	mov	r1, r0
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e72:	f000 b817 	b.w	8003ea4 <_kill_r>
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d00a      	beq.n	8003e90 <_raise_r+0x4c>
 8003e7a:	1c59      	adds	r1, r3, #1
 8003e7c:	d103      	bne.n	8003e86 <_raise_r+0x42>
 8003e7e:	2316      	movs	r3, #22
 8003e80:	6003      	str	r3, [r0, #0]
 8003e82:	2001      	movs	r0, #1
 8003e84:	e7e7      	b.n	8003e56 <_raise_r+0x12>
 8003e86:	2400      	movs	r4, #0
 8003e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	4798      	blx	r3
 8003e90:	2000      	movs	r0, #0
 8003e92:	e7e0      	b.n	8003e56 <_raise_r+0x12>

08003e94 <raise>:
 8003e94:	4b02      	ldr	r3, [pc, #8]	; (8003ea0 <raise+0xc>)
 8003e96:	4601      	mov	r1, r0
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	f7ff bfd3 	b.w	8003e44 <_raise_r>
 8003e9e:	bf00      	nop
 8003ea0:	200000cc 	.word	0x200000cc

08003ea4 <_kill_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4d07      	ldr	r5, [pc, #28]	; (8003ec4 <_kill_r+0x20>)
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	4604      	mov	r4, r0
 8003eac:	4608      	mov	r0, r1
 8003eae:	4611      	mov	r1, r2
 8003eb0:	602b      	str	r3, [r5, #0]
 8003eb2:	f7fd fa0a 	bl	80012ca <_kill>
 8003eb6:	1c43      	adds	r3, r0, #1
 8003eb8:	d102      	bne.n	8003ec0 <_kill_r+0x1c>
 8003eba:	682b      	ldr	r3, [r5, #0]
 8003ebc:	b103      	cbz	r3, 8003ec0 <_kill_r+0x1c>
 8003ebe:	6023      	str	r3, [r4, #0]
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
 8003ec2:	bf00      	nop
 8003ec4:	20001458 	.word	0x20001458

08003ec8 <_getpid_r>:
 8003ec8:	f7fd b9f7 	b.w	80012ba <_getpid>

08003ecc <__swhatbuf_r>:
 8003ecc:	b570      	push	{r4, r5, r6, lr}
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed4:	2900      	cmp	r1, #0
 8003ed6:	b096      	sub	sp, #88	; 0x58
 8003ed8:	4615      	mov	r5, r2
 8003eda:	461e      	mov	r6, r3
 8003edc:	da0d      	bge.n	8003efa <__swhatbuf_r+0x2e>
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	bf0c      	ite	eq
 8003eea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003eee:	2340      	movne	r3, #64	; 0x40
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	6031      	str	r1, [r6, #0]
 8003ef4:	602b      	str	r3, [r5, #0]
 8003ef6:	b016      	add	sp, #88	; 0x58
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	466a      	mov	r2, sp
 8003efc:	f000 f848 	bl	8003f90 <_fstat_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	dbec      	blt.n	8003ede <__swhatbuf_r+0x12>
 8003f04:	9901      	ldr	r1, [sp, #4]
 8003f06:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003f0a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003f0e:	4259      	negs	r1, r3
 8003f10:	4159      	adcs	r1, r3
 8003f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f16:	e7eb      	b.n	8003ef0 <__swhatbuf_r+0x24>

08003f18 <__smakebuf_r>:
 8003f18:	898b      	ldrh	r3, [r1, #12]
 8003f1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f1c:	079d      	lsls	r5, r3, #30
 8003f1e:	4606      	mov	r6, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	d507      	bpl.n	8003f34 <__smakebuf_r+0x1c>
 8003f24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f28:	6023      	str	r3, [r4, #0]
 8003f2a:	6123      	str	r3, [r4, #16]
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	6163      	str	r3, [r4, #20]
 8003f30:	b002      	add	sp, #8
 8003f32:	bd70      	pop	{r4, r5, r6, pc}
 8003f34:	ab01      	add	r3, sp, #4
 8003f36:	466a      	mov	r2, sp
 8003f38:	f7ff ffc8 	bl	8003ecc <__swhatbuf_r>
 8003f3c:	9900      	ldr	r1, [sp, #0]
 8003f3e:	4605      	mov	r5, r0
 8003f40:	4630      	mov	r0, r6
 8003f42:	f7ff f82f 	bl	8002fa4 <_malloc_r>
 8003f46:	b948      	cbnz	r0, 8003f5c <__smakebuf_r+0x44>
 8003f48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f4c:	059a      	lsls	r2, r3, #22
 8003f4e:	d4ef      	bmi.n	8003f30 <__smakebuf_r+0x18>
 8003f50:	f023 0303 	bic.w	r3, r3, #3
 8003f54:	f043 0302 	orr.w	r3, r3, #2
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	e7e3      	b.n	8003f24 <__smakebuf_r+0xc>
 8003f5c:	89a3      	ldrh	r3, [r4, #12]
 8003f5e:	6020      	str	r0, [r4, #0]
 8003f60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f64:	81a3      	strh	r3, [r4, #12]
 8003f66:	9b00      	ldr	r3, [sp, #0]
 8003f68:	6163      	str	r3, [r4, #20]
 8003f6a:	9b01      	ldr	r3, [sp, #4]
 8003f6c:	6120      	str	r0, [r4, #16]
 8003f6e:	b15b      	cbz	r3, 8003f88 <__smakebuf_r+0x70>
 8003f70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f74:	4630      	mov	r0, r6
 8003f76:	f000 f81d 	bl	8003fb4 <_isatty_r>
 8003f7a:	b128      	cbz	r0, 8003f88 <__smakebuf_r+0x70>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f023 0303 	bic.w	r3, r3, #3
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	431d      	orrs	r5, r3
 8003f8c:	81a5      	strh	r5, [r4, #12]
 8003f8e:	e7cf      	b.n	8003f30 <__smakebuf_r+0x18>

08003f90 <_fstat_r>:
 8003f90:	b538      	push	{r3, r4, r5, lr}
 8003f92:	4d07      	ldr	r5, [pc, #28]	; (8003fb0 <_fstat_r+0x20>)
 8003f94:	2300      	movs	r3, #0
 8003f96:	4604      	mov	r4, r0
 8003f98:	4608      	mov	r0, r1
 8003f9a:	4611      	mov	r1, r2
 8003f9c:	602b      	str	r3, [r5, #0]
 8003f9e:	f7fd f9f3 	bl	8001388 <_fstat>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	d102      	bne.n	8003fac <_fstat_r+0x1c>
 8003fa6:	682b      	ldr	r3, [r5, #0]
 8003fa8:	b103      	cbz	r3, 8003fac <_fstat_r+0x1c>
 8003faa:	6023      	str	r3, [r4, #0]
 8003fac:	bd38      	pop	{r3, r4, r5, pc}
 8003fae:	bf00      	nop
 8003fb0:	20001458 	.word	0x20001458

08003fb4 <_isatty_r>:
 8003fb4:	b538      	push	{r3, r4, r5, lr}
 8003fb6:	4d06      	ldr	r5, [pc, #24]	; (8003fd0 <_isatty_r+0x1c>)
 8003fb8:	2300      	movs	r3, #0
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	602b      	str	r3, [r5, #0]
 8003fc0:	f7fd f9f2 	bl	80013a8 <_isatty>
 8003fc4:	1c43      	adds	r3, r0, #1
 8003fc6:	d102      	bne.n	8003fce <_isatty_r+0x1a>
 8003fc8:	682b      	ldr	r3, [r5, #0]
 8003fca:	b103      	cbz	r3, 8003fce <_isatty_r+0x1a>
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	bd38      	pop	{r3, r4, r5, pc}
 8003fd0:	20001458 	.word	0x20001458

08003fd4 <_gettimeofday>:
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <_gettimeofday+0xc>)
 8003fd6:	2258      	movs	r2, #88	; 0x58
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	f04f 30ff 	mov.w	r0, #4294967295
 8003fde:	4770      	bx	lr
 8003fe0:	20001458 	.word	0x20001458

08003fe4 <_init>:
 8003fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe6:	bf00      	nop
 8003fe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fea:	bc08      	pop	{r3}
 8003fec:	469e      	mov	lr, r3
 8003fee:	4770      	bx	lr

08003ff0 <_fini>:
 8003ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ff2:	bf00      	nop
 8003ff4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff6:	bc08      	pop	{r3}
 8003ff8:	469e      	mov	lr, r3
 8003ffa:	4770      	bx	lr
