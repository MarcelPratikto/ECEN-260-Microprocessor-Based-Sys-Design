/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <math.h>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define WIDTH 84
#define HEIGHT 48
#define NUM_BANKS 6
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
#define CE_PORT GPIOB // PB6 chip enable (aka slave select)
#define CE_PIN GPIO_PIN_6
#define DC_PORT GPIOA // PA0 data/control
#define DC_PIN GPIO_PIN_0
#define RESET_PORT GPIOA // PA1 reset
#define RESET_PIN GPIO_PIN_1
#define GLCD_WIDTH 84
#define GLCD_HEIGHT 48
#define NUM_BANKS 6
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
const char font_table[][6] = {
	{0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, // space						0
	{0x3E, 0x41, 0x41, 0x7F, 0x40, 0x20}, // 'A'						1
	{0x7F, 0x49, 0x49, 0x76, 0x40, 0x20}, // 'B'						2
	{0x3E, 0x41, 0x41, 0x41, 0x40, 0x20}, // 'C'						3
	{0x7F, 0x41, 0x41, 0x7E, 0x40, 0x20}, // 'D'						4
	{0x3E, 0x49, 0x49, 0x49, 0x40, 0x20}, // 'E'						5
	{0x7F, 0x09, 0x09, 0x09, 0x10, 0x20}, // 'F'						6
	{0x3E, 0x41, 0x49, 0x39, 0x10, 0x20}, // 'G'						7
	{0x7F, 0x08, 0x08, 0x7F, 0x40, 0x20}, // 'H'						8
	{0x41, 0x7F, 0x41, 0x41, 0x40, 0x20}, // 'I'						9
	{0x21, 0x51, 0x7F, 0x21, 0x20, 0x20}, // 'J'						10
	{0x7F, 0x0C, 0x12, 0x21, 0x40, 0x20}, // 'K'						11
	{0x04, 0x7E, 0x45, 0x42, 0x40, 0x20}, // 'L'						12
	{0x7F, 0x02, 0x04, 0x02, 0x7F, 0x20}, // 'M'						13
	{0x7F, 0x04, 0x08, 0x10, 0x7F, 0x20}, // 'N'						14
	{0x3E, 0x41, 0x41, 0x3E, 0x20, 0x20}, // 'O'						15
	{0x7E, 0x11, 0x11, 0x1E, 0x10, 0x20}, // 'P'						16
	{0x3E, 0x49, 0x51, 0x3E, 0x20, 0x20}, // 'Q'						17
	{0x7F, 0x19, 0x29, 0x46, 0x40, 0x20}, // 'R'						18
	{0x46, 0x49, 0x49, 0x71, 0x40, 0x20}, // 'S'						19
	{0x01, 0x01, 0x7F, 0x41, 0x41, 0x20}, // 'T'						20
	{0x3F, 0x40, 0x40, 0x3F, 0x20, 0x20}, // 'U'						21
	{0x7F, 0x20, 0x10, 0x1F, 0x10, 0x20}, // 'V'						22
	{0x7F, 0x20, 0x10, 0x20, 0x7F, 0x20}, // 'W'						23
	{0x41, 0x22, 0x1C, 0x24, 0x42, 0x20}, // 'X'						24
	{0x4F, 0x50, 0x50, 0x7F, 0x40, 0x20}, // 'Y'						25
	{0x71, 0x49, 0x45, 0x47, 0x40, 0x20}, // 'Z'						26
	{0x00, 0x00, 0x40, 0x00, 0x00, 0x00}, // period						27
	{0x00, 0x00, 0x5F, 0x00, 0x00, 0x00}, // !							28
	{0x00, 0x00, 0x7E, 0x81, 0xB5, 0xA1}, // left smiley face			29
	{0xA1, 0xB5, 0x81, 0x7E, 0x00, 0x00}, // right smiley face			30
};

// IMAGE is like the texture
char IMAGE[HEIGHT][WIDTH];

/* SCREEN is the converted image to an array type that we can display
 * {TOP, 2, 3, 4, 5, BOTTOM} LEFT
 *  ...
 * {TOP, 2, 3, 4, 5, BOTTOM} RIGHT
 *
 * {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF},
 * {0x01, 0x00, 0x00, 0x00, 0x00, 0x80},
 * {0x01, 0x00, 0x00, 0x00, 0x00, 0x80},
 * {0x01, 0x00, 0x00, 0x00, 0x00, 0x80}
 */
// 84x48 pixels, 48 separated to six 8-bit pixel lines
char SCREEN[WIDTH][NUM_BANKS];

// Player: stores position, model
struct Actor{
	int x;
	int y;
	int model_width;
	int model_height;
	int speed;
	char* name;
	char* model;
};
char player_model[] = {
	"   x   "
	"  xxx  "
	" xxxxx "
	"xxxxxxx"
};
char O_model[] = {
	"  xxx  "
	" xxxxx "
	"xxxxxxx"
	" xxxxx "
	"  xxx  "
};
char X_model[] = {
	"xx   xx"
	" xx xx "
	"  xxx  "
	" xx xx "
	"xx   xx"
};

// Keeps track of the key that was pressed
char KEY = 0;

// Keeps track if the user wins or lose
char WIN = 0;
char LOSE = 0;

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */
void SPI_write(unsigned char data);
void GLCD_data_write(unsigned char data);
void GLCD_command_write(unsigned char data);
void GLCD_init(void);
void GLCD_setCursor(unsigned char x, unsigned char y);
void GLCD_clear(void);
void GLCD_putchar(int font_table_row);
unsigned char keypad_decode();
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/*
 * clears the image so that it is filled with empty spaces
 */
void clearImage(){
	for (int y = 0; y < HEIGHT; ++y)
	{
		for (int x = 0; x < WIDTH; ++x)
		{
			IMAGE[y][x] = ' ';
		}
	}
}

/*
 * Takes data of all actors, such as their position and texture,
 * then converts it to an IMAGE array
 * that represents each pixel on the display/screen.
 * PARAMETER 1: array of address of actors
 * PARAMETER 2: number of actors
 */
void convertToImage(struct Actor* actors[], int num_actors)
{
	for (int i = 0; i < num_actors; ++i)
	{
		// create IMAGE
		int model_pos = 0;
		for (int y = 0; y < HEIGHT; ++y)
		{
			for (int x = 0; x < WIDTH; ++x)
			{
				if (x >= actors[i]->x && x < actors[i]->x+actors[i]->model_width && y >= actors[i]->y && y < actors[i]->y+actors[i]->model_height)
				{
					if (model_pos < actors[i]->model_height * actors[i]->model_width)
					{
						IMAGE[y][x] = actors[i]->model[model_pos];
						++model_pos;
					}
				}
			}
		}
	}
}

/*
 * Converts image to format that the screen can accept.
 */
void convertToScreen()
{
	// convert IMAGE to SCREEN
	for (int x = 0; x < WIDTH; ++x)
	{
        int bank = 0;
        int pixel = 0;
        char binary = 0b00000000;
        for (int y = 0; y < HEIGHT; ++y)
        {
            if (IMAGE[y][x] == 'x')
            {
                binary |= (1 << pixel);
            }
            ++pixel;
            if (pixel == 8)
            {
                SCREEN[x][bank] = binary;
                ++bank;
                pixel = 0;
                binary = 0b00000000;
            }
        }
	}
}

/*
 * draw image on screen by column from left to right
 * works by filling six vertical banks (1 bank = 8 pixels vertically)
 */
void drawScreen()
{
	for (int y=0; y<6; ++y)
	{
		for (int x=0; x<84; ++x)
		{
		  GLCD_data_write(SCREEN[x][y]);
		}
	}
	//HAL_Delay(5000);
	//GLCD_clear();
}

/*
 * Player controls.
 * PARAMETER 1: pointer to player
 */
void controls(struct Actor* player)
{
	// Keypad
	  switch(KEY)
	  {
	  case 2:		// UP
		  player->y -= 2;
		  KEY = 0;
		  break;
	  case 8:		// DOWN
		  player->y += 2;
		  KEY = 0;
		  break;
	  case 4:		// LEFT
		  player->x -= 5;
		  KEY = 0;
		  break;
	  case 11:		// RIGHT
		  player->x += 5;
		  KEY = 0;
		  break;
	  default:
		  KEY = 0;
		  break;
	  }
}

/*
 * check if a collision happened between player and other Actors
 * PARAMETER 1:	pointer to player
 * PARAMETER 2:	array of Actors
 * RETURN:		int collision_type
 * 					0: nothing
 * 					1: win
 * 					2: lose
 */
int checkCollisions(struct Actor* player, struct Actor* actors[], int sizeOfActors)
{
	int player_left = player->x;
	//int player_right = player->x + player->model_width;
	int player_top = player->y;
	//int player_bottom = player->y + player->model_height;
	for (int i = 0; i < sizeOfActors; ++i)
	{
		if (strcmp(player->name, actors[i]->name) != 0)
		{
			int actor_left = actors[i]->x;
			//int actor_right = actors[i]->x + actors[i]->model_width;
			int actor_top = actors[i]->y;
			//int actor_bottom = actors[i]->y + actors[i]->model_height;

			if (
					(abs(actor_left - player_left) <= player->model_width) &&
					(abs(actor_top - player_top) <= player->model_height)
				)
			{
				if (strcmp(actors[i]->name, "O") == 0)
					return 1;
				if (strcmp(actors[i]->name, "X") == 0)
					return 2;
			}
		}
	}
	return 0;
}

// random number generation
// return int in range [lower, upper]
int randomINT(int lower, int upper)
{
	return (rand() % (upper + 1)) + lower;
}

// animate actors
void animateActors(struct Actor* player, struct Actor* actors[], int sizeOfActors)
{
	int defaultX = -10;
	int defaultY = -10;
	int minSpeed = 1;
	int maxSpeed = 3;
	int minX = 0;
	int maxX = 80;
	int minY = -5;
	int maxY = 55;
	for (int i = 0; i < sizeOfActors; ++i)
	{
		if (strcmp(player->name, actors[i]->name) != 0)
		{
			// if location is at the starting default of (-10,-10)
			// draw it at a random location at the top of the screen
			// with random x position in range [0,80]
			// with random speed in range [1,5]
			if ((actors[i]->x == defaultX) && (actors[i]->y == defaultY))
			{
				actors[i]->y = minY;
				actors[i]->x = randomINT(minX,maxX);
				actors[i]->speed = randomINT(minSpeed,maxSpeed);
			}
			// if actor goes over the bottom of the screen,
			// redraw on top of screen with a different x position
			// with a different speed
			if (actors[i]->y > maxY)
			{
				actors[i]->y = minY;
				actors[i]->x = randomINT(minX,maxX);
				actors[i]->speed = randomINT(minSpeed,maxSpeed);
			}
			else
			{
				// make sure that an object's speed is never zero
				// so that it keeps falling
				if (actors[i]->speed == 0)
					actors[i]->speed = randomINT(minSpeed,maxSpeed);
				actors[i]->y += actors[i]->speed;
			}
		}
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  GLCD_init(); // initialize the screen
  GLCD_clear(); // clear the screen

  // WIN screen
  int win_screen[] = {
		  25,15,21,0,23,9,14,28,29,30
  };

  // LOSE screen
  int lose_screen[] = {
		  25,15,21,0,12,15,19,5,27,27,27
  };

  // player initialization
  struct Actor player;
  player.model = player_model;
  player.model_width = 7;
  player.model_height = 4;
  player.x = 84/2 - player.model_width/2;
  player.y = 48-player.model_height;
  player.name = "player";
  player.speed = 0; // we move the player, so its speed is 0

  // 3 X, 1 O, 1 player
  int num_X = 2;
  int num_O = 1;
  int num_player = 1;
  int num_Actors = num_X + num_O + num_player;
  // array of the address of each actor
  struct Actor* actors[num_Actors];
  for (int i = 0; i < num_Actors; ++i)
  {
	  if (i < num_X)
	  {
		actors[i] = (struct Actor*)malloc(sizeof(struct Actor));

		actors[i]->model = X_model;
		actors[i]->model_width = 7;
		actors[i]->model_height = 5;
		actors[i]->x = -10;
		actors[i]->y = -10;
		actors[i]->name = "X";
		actors[i]->speed = 0;
	  }
	  else if (i < num_X + num_O)
	  {
		// O initialization
		struct Actor O;
		O.model = O_model;
		O.model_width = 7;
		O.model_height = 5;
		O.x = -10;
		O.y = -10;
		O.name = "O";
		O.speed = 0;

		actors[i] = &O;
	  }
	  else
	  {
		  actors[i] = &player;
	  }
  }

  // use current time as seed for random number generator
  time_t t;
  srand((unsigned)time(&t));
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (WIN)
	  {
		  GLCD_clear();
		  int size = sizeof(win_screen)/sizeof(win_screen[0]);
		  for (int i=0; i < size; ++i)
		  {
			  GLCD_putchar(win_screen[i]);
			  if (i < size - 2)
				  HAL_Delay(500);
		  }
		  HAL_Delay(5000);
	  }
	  else if (LOSE)
	  {
		  GLCD_clear();
		  int size = sizeof(lose_screen)/sizeof(lose_screen[0]);
		  for (int i=0; i < size; ++i)
		  {
			  GLCD_putchar(lose_screen[i]);
			  HAL_Delay(500);
		  }
		  HAL_Delay(5000);
	  }
	  else
	  {
		  // create image with actors combined
		  // then renders the screen
		  clearImage();
		  convertToImage(actors, num_Actors);
		  convertToScreen();
		  drawScreen();

		  // Handles controls
		  controls(&player);

		  // Handles collisions
		  int collision_type = checkCollisions(&player, actors, num_Actors);
		  // 0 : nothing
		  // 1 : win
		  // 2 : lose
		  if (collision_type == 1)
			  WIN = 1;
		  else if (collision_type == 2)
			  LOSE = 1;

		  // moves position of actors
		  animateActors(&player, actors, num_Actors);
		  HAL_Delay(300);
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : DA_Pin */
  GPIO_InitStruct.Pin = DA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(DA_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : D0_Pin D1_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void SPI_write(unsigned char data)
{
	// Chip Enable (low is asserted)
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_RESET);
	// Send data over SPI1
	HAL_SPI_Transmit(&hspi1, (uint8_t*) &data, 1, HAL_MAX_DELAY);
	// Chip Disable
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
}

void GLCD_data_write(unsigned char data)
{
	// Switch to "data" mode (D/C pin high)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
	// Send data over SPI
	SPI_write(data);
}

void GLCD_command_write(unsigned char data)
{
	// Switch to "command" mode (D/C pin low)
	HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
	// Send data over SPI
	SPI_write(data);
}

void GLCD_init(void)
{
	// Keep CE high when not transmitting
	HAL_GPIO_WritePin(CE_PORT, CE_PIN, GPIO_PIN_SET);
	// Reset the screen (low pulse - down & up)
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_RESET);
	HAL_GPIO_WritePin(RESET_PORT, RESET_PIN, GPIO_PIN_SET);
	// Configure the screen (according to the datasheet)
	GLCD_command_write(0x21); // enter extended command mode
	GLCD_command_write(0xB0); // set LCD Vop for contrast (this may be adjusted)
	GLCD_command_write(0x04); // set temp coefficient
	GLCD_command_write(0x15); // set LCD bias mode (this may be adjusted)
	GLCD_command_write(0x20); // return to normal command mode
	GLCD_command_write(0x0C); // set display mode normal
}

void GLCD_setCursor(unsigned char x, unsigned char y)
{
	GLCD_command_write(0x80 | x); // column
	GLCD_command_write(0x40 | y); // bank
}

void GLCD_clear(void)
{
	int i;
	for(i = 0; i < (GLCD_WIDTH * NUM_BANKS); i++)
	{
		GLCD_data_write(0x00); // write zeros
	}
	GLCD_setCursor(0,0); // return cursor to top left
}

void GLCD_putchar(int font_table_row)
{
	// go through each value in order to print the character
	int i;
	for (i=0; i<6; i++){
		GLCD_data_write(font_table[font_table_row][i]);
	}
}

// decode the keypad according to what we need each keys to be
unsigned char keypad_decode(){
  unsigned char key = 0x0;
  unsigned char data = 0b0000;

  // read the data pins and combine into the 4-bit value: D3_D2_D1_D0
  if (HAL_GPIO_ReadPin(D0_GPIO_Port, D0_Pin))
    data |= bit(0);
  if (HAL_GPIO_ReadPin(D1_GPIO_Port, D1_Pin))
    data |= bit(1);
  if (HAL_GPIO_ReadPin(D2_GPIO_Port, D2_Pin))
    data |= bit(2);
  if (HAL_GPIO_ReadPin(D3_GPIO_Port, D3_Pin))
    data |= bit(3);

  // The key encoder gives the following "data" values:
  // 0 1 2 3
  // 4 5 6 7
  // 8 9 A B
  // C D E F

  // The following switch statement re-maps it to these "key" names:
  // 1 2 3 A
  // 4 5 6 B
  // 7 8 9 C
  // E 0 F D, where E is * and F is #

  switch(data){
    case 0x0: key = 0x1; break; // fill out the missing key values (?) in this switch statement
    case 0x1: key = 0x2; break;
    case 0x2: key = 0x3; break;
    case 0x3: key = 0xA; break;
    case 0x4: key = 0x4; break;
    case 0x5: key = 0x5; break;
    case 0x6: key = 0x6; break;
    case 0x7: key = 0xB; break;
    case 0x8: key = 0x7; break;
    case 0x9: key = 0x8; break;
    case 0xA: key = 0x9; break;
    case 0xB: key = 0xC; break;
    case 0xC: key = 0xE; break;
    case 0xD: key = 0x0; break;
    case 0xE: key = 0xF; break;
    case 0xF: key = 0xD; break;
  }

  return key;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	if(GPIO_Pin == DA_Pin)
	{
		// Read data
		unsigned char key = keypad_decode();  // determine which key was pressed
		// RETURNS KEY
		switch (key){
		case 0x1:
			KEY = 1;
			break;
		case 0x2:
			KEY = 2;
			break;
		case 0x3:
			KEY = 3;
			break;
		case 0x4:
			KEY = 4;
			break;
		case 0x5:
			KEY = 5;
			break;
		case 0x6:
			KEY = 6;
			break;
		case 0x7:
			KEY = 7;
			break;
		case 0x8:
			KEY = 8;
			break;
		case 0x9:
			KEY = 9;
			break;
		case 0xA:
			KEY = 10;
			break;
		case 0xB:
			KEY = 11;
			break;
		case 0xC:
			KEY = 12;
			break;
		case 0xD:
			KEY = 13;
			break;
		case 0xE:
			KEY = 14;
			break;
		case 0xF:
			KEY = 15;
			break;
		}
	}
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
