
lab-06.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000043c  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005c0  080005c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005c0  080005c0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080005c0  080005c0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005c0  080005c0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c4  080005c4  000105c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080005c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000001c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000002c  2000002c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000328  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000146  00000000  00000000  000203ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000098  00000000  00000000  000204f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000069  00000000  00000000  00020590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000b26  00000000  00000000  000205f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000027c  00000000  00000000  0002111f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003039  00000000  00000000  0002139b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000001d4  00000000  00000000  000243d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000245a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000010 	.word	0x20000010
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080005a8 	.word	0x080005a8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000014 	.word	0x20000014
 80001c0:	080005a8 	.word	0x080005a8

080001c4 <GPIOA_enable_clock>:
Port* GPIOA = (Port*) 0x48000000; // base address of GPIOA
Port* GPIOB = (Port*) 0x48000400; // base address of GPIOB
Port* GPIOC = (Port*) 0x48000800; // base address of GPIOC

// enable clock for each ports
void GPIOA_enable_clock(){*AHB2ENR |= bit(0);}
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0
 80001c8:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <GPIOA_enable_clock+0x20>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	681a      	ldr	r2, [r3, #0]
 80001ce:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <GPIOA_enable_clock+0x20>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	f042 0201 	orr.w	r2, r2, #1
 80001d6:	601a      	str	r2, [r3, #0]
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000000 	.word	0x20000000

080001e8 <GPIOB_enable_clock>:
void GPIOB_enable_clock(){*AHB2ENR |= bit(1);}
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <GPIOB_enable_clock+0x20>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	681a      	ldr	r2, [r3, #0]
 80001f2:	4b05      	ldr	r3, [pc, #20]	; (8000208 <GPIOB_enable_clock+0x20>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	f042 0202 	orr.w	r2, r2, #2
 80001fa:	601a      	str	r2, [r3, #0]
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	20000000 	.word	0x20000000

0800020c <GPIOC_enable_clock>:
void GPIOC_enable_clock(){*AHB2ENR |= bit(2);}
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <GPIOC_enable_clock+0x20>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	681a      	ldr	r2, [r3, #0]
 8000216:	4b05      	ldr	r3, [pc, #20]	; (800022c <GPIOC_enable_clock+0x20>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	f042 0204 	orr.w	r2, r2, #4
 800021e:	601a      	str	r2, [r3, #0]
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	20000000 	.word	0x20000000

08000230 <GPIO_configure_input_mode>:

// This function configures a pin in the port specified by GPIOx as an input device
void GPIO_configure_input_mode(Port* GPIOx, unsigned int pin)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]
	// MODER input: 0b00
	// takes the MODER (Mode register)
	unsigned int mode = GPIOx->MODER;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	60fb      	str	r3, [r7, #12]
	// reset the pin to 0b00
	mode &= ~bitpair(pin);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	005b      	lsls	r3, r3, #1
 8000244:	2203      	movs	r2, #3
 8000246:	fa02 f303 	lsl.w	r3, r2, r3
 800024a:	43db      	mvns	r3, r3
 800024c:	461a      	mov	r2, r3
 800024e:	68fb      	ldr	r3, [r7, #12]
 8000250:	4013      	ands	r3, r2
 8000252:	60fb      	str	r3, [r7, #12]
	// store
	GPIOx->MODER = mode;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	68fa      	ldr	r2, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	3714      	adds	r7, #20
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr

08000266 <GPIO_configure_output_mode>:

// This function configures a pin in the port specified by GPIOx as an output device
void GPIO_configure_output_mode(Port* GPIOx, unsigned int pin)
{
 8000266:	b480      	push	{r7}
 8000268:	b085      	sub	sp, #20
 800026a:	af00      	add	r7, sp, #0
 800026c:	6078      	str	r0, [r7, #4]
 800026e:	6039      	str	r1, [r7, #0]
	// MODER output: 0b01
	// takes the MODER (Mode Register)
	unsigned int mode = GPIOx->MODER;
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	60fb      	str	r3, [r7, #12]
	// reset the pin to 0b00
	mode &= ~bitpair(pin);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	005b      	lsls	r3, r3, #1
 800027a:	2203      	movs	r2, #3
 800027c:	fa02 f303 	lsl.w	r3, r2, r3
 8000280:	43db      	mvns	r3, r3
 8000282:	461a      	mov	r2, r3
 8000284:	68fb      	ldr	r3, [r7, #12]
 8000286:	4013      	ands	r3, r2
 8000288:	60fb      	str	r3, [r7, #12]
	// set to 0b01
	mode |= lbit(pin);
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	005b      	lsls	r3, r3, #1
 800028e:	2201      	movs	r2, #1
 8000290:	fa02 f303 	lsl.w	r3, r2, r3
 8000294:	461a      	mov	r2, r3
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	4313      	orrs	r3, r2
 800029a:	60fb      	str	r3, [r7, #12]
	// store
	GPIOx->MODER = mode;
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	601a      	str	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <GPIO_enable_pull_up_resistor>:

// this function enables the pull-up resistor for a pin in the port specified by GPIOx
void GPIO_enable_pull_up_resistor(Port* GPIOx, unsigned int pin)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b085      	sub	sp, #20
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
	// PUPDR pull-up enable: 0b01
	// takes the PUPDR (Pull-Up Pull-Down Register)
	unsigned int resistor = GPIOx->PUPDR;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	60fb      	str	r3, [r7, #12]
	// reset the pin to 0b00
	resistor &= ~bitpair(pin);
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	005b      	lsls	r3, r3, #1
 80002c2:	2203      	movs	r2, #3
 80002c4:	fa02 f303 	lsl.w	r3, r2, r3
 80002c8:	43db      	mvns	r3, r3
 80002ca:	461a      	mov	r2, r3
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	4013      	ands	r3, r2
 80002d0:	60fb      	str	r3, [r7, #12]
	// set the pin to 0b01
	resistor |= lbit(pin);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	2201      	movs	r2, #1
 80002d8:	fa02 f303 	lsl.w	r3, r2, r3
 80002dc:	461a      	mov	r2, r3
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	60fb      	str	r3, [r7, #12]
	// store
	GPIOx->PUPDR = resistor;
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	68fa      	ldr	r2, [r7, #12]
 80002e8:	60da      	str	r2, [r3, #12]
}
 80002ea:	bf00      	nop
 80002ec:	3714      	adds	r7, #20
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr

080002f6 <GPIO_read_pin>:
 * return: int
 * 0 if not read
 * 1 if read
 */
unsigned int GPIO_read_pin(Port* GPIOx, unsigned int pin)
{
 80002f6:	b480      	push	{r7}
 80002f8:	b085      	sub	sp, #20
 80002fa:	af00      	add	r7, sp, #0
 80002fc:	6078      	str	r0, [r7, #4]
 80002fe:	6039      	str	r1, [r7, #0]
	// reads the value of the pin in the IDR (Input Data Register)
	unsigned int read = GPIOx->IDR & bit(pin);
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	691b      	ldr	r3, [r3, #16]
 8000304:	2101      	movs	r1, #1
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	fa01 f202 	lsl.w	r2, r1, r2
 800030c:	4013      	ands	r3, r2
 800030e:	60fb      	str	r3, [r7, #12]
	return read;
 8000310:	68fb      	ldr	r3, [r7, #12]
}
 8000312:	4618      	mov	r0, r3
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr

0800031e <GPIO_write_pin>:

// this function writes a state to a pin in a port specified by GPIOx
void GPIO_write_pin(Port* GPIOx, unsigned int pin, unsigned int state)
{
 800031e:	b480      	push	{r7}
 8000320:	b087      	sub	sp, #28
 8000322:	af00      	add	r7, sp, #0
 8000324:	60f8      	str	r0, [r7, #12]
 8000326:	60b9      	str	r1, [r7, #8]
 8000328:	607a      	str	r2, [r7, #4]
	// takes the value from the ODR (Output Data Register)
	unsigned int write = GPIOx->ODR;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	695b      	ldr	r3, [r3, #20]
 800032e:	617b      	str	r3, [r7, #20]
	// if state is off or 0b0
	if (!state)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d10c      	bne.n	8000350 <GPIO_write_pin+0x32>
	{
		// reset pin to 0b0
		write &= ~bit(pin);
 8000336:	2201      	movs	r2, #1
 8000338:	68bb      	ldr	r3, [r7, #8]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	461a      	mov	r2, r3
 8000342:	697b      	ldr	r3, [r7, #20]
 8000344:	4013      	ands	r3, r2
 8000346:	617b      	str	r3, [r7, #20]
		GPIOx->ODR = write;
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	697a      	ldr	r2, [r7, #20]
 800034c:	615a      	str	r2, [r3, #20]
	{
		// set pin to 0b1
		write |= bit(pin);
		GPIOx->ODR = write;
	}
}
 800034e:	e00a      	b.n	8000366 <GPIO_write_pin+0x48>
		write |= bit(pin);
 8000350:	2201      	movs	r2, #1
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	fa02 f303 	lsl.w	r3, r2, r3
 8000358:	461a      	mov	r2, r3
 800035a:	697b      	ldr	r3, [r7, #20]
 800035c:	4313      	orrs	r3, r2
 800035e:	617b      	str	r3, [r7, #20]
		GPIOx->ODR = write;
 8000360:	68fb      	ldr	r3, [r7, #12]
 8000362:	697a      	ldr	r2, [r7, #20]
 8000364:	615a      	str	r2, [r3, #20]
}
 8000366:	bf00      	nop
 8000368:	371c      	adds	r7, #28
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
	...

08000374 <main>:
#define FrontAlarmPin 6		// PA6
#define BackAlarmPin 7		// PA7
#define WindowAlarmPin 6	// PB6

int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
	// enable clock
	GPIOA_enable_clock();
 800037a:	f7ff ff23 	bl	80001c4 <GPIOA_enable_clock>
	GPIOB_enable_clock();
 800037e:	f7ff ff33 	bl	80001e8 <GPIOB_enable_clock>
	GPIOC_enable_clock();
 8000382:	f7ff ff43 	bl	800020c <GPIOC_enable_clock>

	// configure inputs
	GPIO_configure_input_mode(GPIOC, ArmButtonPin);
 8000386:	4b5e      	ldr	r3, [pc, #376]	; (8000500 <main+0x18c>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	210d      	movs	r1, #13
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff ff4f 	bl	8000230 <GPIO_configure_input_mode>
	GPIO_configure_input_mode(GPIOC, DisarmButtonPin);
 8000392:	4b5b      	ldr	r3, [pc, #364]	; (8000500 <main+0x18c>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	2108      	movs	r1, #8
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ff49 	bl	8000230 <GPIO_configure_input_mode>
	GPIO_configure_input_mode(GPIOA, FrontSensorPin);
 800039e:	4b59      	ldr	r3, [pc, #356]	; (8000504 <main+0x190>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	2100      	movs	r1, #0
 80003a4:	4618      	mov	r0, r3
 80003a6:	f7ff ff43 	bl	8000230 <GPIO_configure_input_mode>
	GPIO_configure_input_mode(GPIOA, BackSensorPin);
 80003aa:	4b56      	ldr	r3, [pc, #344]	; (8000504 <main+0x190>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	2101      	movs	r1, #1
 80003b0:	4618      	mov	r0, r3
 80003b2:	f7ff ff3d 	bl	8000230 <GPIO_configure_input_mode>
	GPIO_configure_input_mode(GPIOA, WindowSensorPin);
 80003b6:	4b53      	ldr	r3, [pc, #332]	; (8000504 <main+0x190>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2104      	movs	r1, #4
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ff37 	bl	8000230 <GPIO_configure_input_mode>

	// enable resistors
	//GPIO_enable_pull_up_resistor(GPIOC, ArmButtonPin);
	GPIO_enable_pull_up_resistor(GPIOC, DisarmButtonPin);
 80003c2:	4b4f      	ldr	r3, [pc, #316]	; (8000500 <main+0x18c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2108      	movs	r1, #8
 80003c8:	4618      	mov	r0, r3
 80003ca:	f7ff ff70 	bl	80002ae <GPIO_enable_pull_up_resistor>
	GPIO_enable_pull_up_resistor(GPIOA, FrontSensorPin);
 80003ce:	4b4d      	ldr	r3, [pc, #308]	; (8000504 <main+0x190>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	2100      	movs	r1, #0
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ff6a 	bl	80002ae <GPIO_enable_pull_up_resistor>
	GPIO_enable_pull_up_resistor(GPIOA, BackSensorPin);
 80003da:	4b4a      	ldr	r3, [pc, #296]	; (8000504 <main+0x190>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	2101      	movs	r1, #1
 80003e0:	4618      	mov	r0, r3
 80003e2:	f7ff ff64 	bl	80002ae <GPIO_enable_pull_up_resistor>
	GPIO_enable_pull_up_resistor(GPIOA, WindowSensorPin);
 80003e6:	4b47      	ldr	r3, [pc, #284]	; (8000504 <main+0x190>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2104      	movs	r1, #4
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff5e 	bl	80002ae <GPIO_enable_pull_up_resistor>

	// configure outputs
	GPIO_configure_output_mode(GPIOA, ArmStatusPin);
 80003f2:	4b44      	ldr	r3, [pc, #272]	; (8000504 <main+0x190>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2105      	movs	r1, #5
 80003f8:	4618      	mov	r0, r3
 80003fa:	f7ff ff34 	bl	8000266 <GPIO_configure_output_mode>
	GPIO_configure_output_mode(GPIOA, FrontAlarmPin);
 80003fe:	4b41      	ldr	r3, [pc, #260]	; (8000504 <main+0x190>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2106      	movs	r1, #6
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff2e 	bl	8000266 <GPIO_configure_output_mode>
	GPIO_configure_output_mode(GPIOA, BackAlarmPin);
 800040a:	4b3e      	ldr	r3, [pc, #248]	; (8000504 <main+0x190>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	2107      	movs	r1, #7
 8000410:	4618      	mov	r0, r3
 8000412:	f7ff ff28 	bl	8000266 <GPIO_configure_output_mode>
	GPIO_configure_output_mode(GPIOB, WindowAlarmPin);
 8000416:	4b3c      	ldr	r3, [pc, #240]	; (8000508 <main+0x194>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	2106      	movs	r1, #6
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff22 	bl	8000266 <GPIO_configure_output_mode>

	unsigned int armed = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	607b      	str	r3, [r7, #4]
	{
		// if ArmButton is pressed
		// NOTE: active-low button
		// 1 when not pushed (due to pull-up resistor to prevent floating inputs)
		// 0 when pushed
		if (GPIO_read_pin(GPIOC, ArmButtonPin) == 0)
 8000426:	4b36      	ldr	r3, [pc, #216]	; (8000500 <main+0x18c>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	210d      	movs	r1, #13
 800042c:	4618      	mov	r0, r3
 800042e:	f7ff ff62 	bl	80002f6 <GPIO_read_pin>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d108      	bne.n	800044a <main+0xd6>
		{
			// arm system
			armed = 1;
 8000438:	2301      	movs	r3, #1
 800043a:	607b      	str	r3, [r7, #4]
			// turn on ArmStatusPin (LED)
			GPIO_write_pin(GPIOA, ArmStatusPin, 1);
 800043c:	4b31      	ldr	r3, [pc, #196]	; (8000504 <main+0x190>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	2201      	movs	r2, #1
 8000442:	2105      	movs	r1, #5
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff6a 	bl	800031e <GPIO_write_pin>

		// if DisarmButton is pressed
		// NOTE: active-low button
		// 1 when not pushed (due to pull-up resistor to prevent floating inputs)
		// 0 when pushed
		if (GPIO_read_pin(GPIOC, DisarmButtonPin) == 0)
 800044a:	4b2d      	ldr	r3, [pc, #180]	; (8000500 <main+0x18c>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	2108      	movs	r1, #8
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff50 	bl	80002f6 <GPIO_read_pin>
 8000456:	4603      	mov	r3, r0
 8000458:	2b00      	cmp	r3, #0
 800045a:	d11d      	bne.n	8000498 <main+0x124>
		{
			// disarm system
			armed = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	607b      	str	r3, [r7, #4]
			// turn off all the LEDs
			GPIO_write_pin(GPIOA, ArmStatusPin, 0);
 8000460:	4b28      	ldr	r3, [pc, #160]	; (8000504 <main+0x190>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2200      	movs	r2, #0
 8000466:	2105      	movs	r1, #5
 8000468:	4618      	mov	r0, r3
 800046a:	f7ff ff58 	bl	800031e <GPIO_write_pin>
			GPIO_write_pin(GPIOA, FrontAlarmPin, 0);
 800046e:	4b25      	ldr	r3, [pc, #148]	; (8000504 <main+0x190>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	2200      	movs	r2, #0
 8000474:	2106      	movs	r1, #6
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff51 	bl	800031e <GPIO_write_pin>
			GPIO_write_pin(GPIOA, BackAlarmPin, 0);
 800047c:	4b21      	ldr	r3, [pc, #132]	; (8000504 <main+0x190>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	2200      	movs	r2, #0
 8000482:	2107      	movs	r1, #7
 8000484:	4618      	mov	r0, r3
 8000486:	f7ff ff4a 	bl	800031e <GPIO_write_pin>
			GPIO_write_pin(GPIOB, WindowAlarmPin, 0);
 800048a:	4b1f      	ldr	r3, [pc, #124]	; (8000508 <main+0x194>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	2200      	movs	r2, #0
 8000490:	2106      	movs	r1, #6
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff ff43 	bl	800031e <GPIO_write_pin>
		}

		// if system is armed, check sensors
		if (armed)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d0c3      	beq.n	8000426 <main+0xb2>
		{
			// check the FrontSensor
			if (GPIO_read_pin(GPIOA, FrontSensorPin)){
 800049e:	4b19      	ldr	r3, [pc, #100]	; (8000504 <main+0x190>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f7ff ff26 	bl	80002f6 <GPIO_read_pin>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d006      	beq.n	80004be <main+0x14a>
				// system armed & front door is open:
				GPIO_write_pin(GPIOA, FrontAlarmPin, 1); // turn on FrontAlarm LED
 80004b0:	4b14      	ldr	r3, [pc, #80]	; (8000504 <main+0x190>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	2201      	movs	r2, #1
 80004b6:	2106      	movs	r1, #6
 80004b8:	4618      	mov	r0, r3
 80004ba:	f7ff ff30 	bl	800031e <GPIO_write_pin>
			}
			// check the BackSensor
			if (GPIO_read_pin(GPIOA, BackSensorPin)){
 80004be:	4b11      	ldr	r3, [pc, #68]	; (8000504 <main+0x190>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2101      	movs	r1, #1
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff16 	bl	80002f6 <GPIO_read_pin>
 80004ca:	4603      	mov	r3, r0
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d006      	beq.n	80004de <main+0x16a>
				// system armed & back door is open:
				GPIO_write_pin(GPIOA, BackAlarmPin, 1); // turn on BackAlarm LED
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <main+0x190>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2201      	movs	r2, #1
 80004d6:	2107      	movs	r1, #7
 80004d8:	4618      	mov	r0, r3
 80004da:	f7ff ff20 	bl	800031e <GPIO_write_pin>
			}
			// check the WindowSensor
			if (GPIO_read_pin(GPIOA, WindowSensorPin)){
 80004de:	4b09      	ldr	r3, [pc, #36]	; (8000504 <main+0x190>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	2104      	movs	r1, #4
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ff06 	bl	80002f6 <GPIO_read_pin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d09a      	beq.n	8000426 <main+0xb2>
				// system armed & window is open:
				GPIO_write_pin(GPIOB, WindowAlarmPin, 1); // turn on WindowAlarm LED
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <main+0x194>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2201      	movs	r2, #1
 80004f6:	2106      	movs	r1, #6
 80004f8:	4618      	mov	r0, r3
 80004fa:	f7ff ff10 	bl	800031e <GPIO_write_pin>
		if (GPIO_read_pin(GPIOC, ArmButtonPin) == 0)
 80004fe:	e792      	b.n	8000426 <main+0xb2>
 8000500:	2000000c 	.word	0x2000000c
 8000504:	20000004 	.word	0x20000004
 8000508:	20000008 	.word	0x20000008

0800050c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800050c:	480d      	ldr	r0, [pc, #52]	; (8000544 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800050e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000510:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480c      	ldr	r0, [pc, #48]	; (8000548 <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490d      	ldr	r1, [pc, #52]	; (800054c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0d      	ldr	r2, [pc, #52]	; (8000550 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0a      	ldr	r4, [pc, #40]	; (8000558 <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053a:	f000 f811 	bl	8000560 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800053e:	f7ff ff19 	bl	8000374 <main>

08000542 <LoopForever>:

LoopForever:
  b LoopForever
 8000542:	e7fe      	b.n	8000542 <LoopForever>
  ldr   r0, =_estack
 8000544:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000548:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800054c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000550:	080005c8 	.word	0x080005c8
  ldr r2, =_sbss
 8000554:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000558:	2000002c 	.word	0x2000002c

0800055c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800055c:	e7fe      	b.n	800055c <ADC1_2_IRQHandler>
	...

08000560 <__libc_init_array>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	4d0d      	ldr	r5, [pc, #52]	; (8000598 <__libc_init_array+0x38>)
 8000564:	4c0d      	ldr	r4, [pc, #52]	; (800059c <__libc_init_array+0x3c>)
 8000566:	1b64      	subs	r4, r4, r5
 8000568:	10a4      	asrs	r4, r4, #2
 800056a:	2600      	movs	r6, #0
 800056c:	42a6      	cmp	r6, r4
 800056e:	d109      	bne.n	8000584 <__libc_init_array+0x24>
 8000570:	4d0b      	ldr	r5, [pc, #44]	; (80005a0 <__libc_init_array+0x40>)
 8000572:	4c0c      	ldr	r4, [pc, #48]	; (80005a4 <__libc_init_array+0x44>)
 8000574:	f000 f818 	bl	80005a8 <_init>
 8000578:	1b64      	subs	r4, r4, r5
 800057a:	10a4      	asrs	r4, r4, #2
 800057c:	2600      	movs	r6, #0
 800057e:	42a6      	cmp	r6, r4
 8000580:	d105      	bne.n	800058e <__libc_init_array+0x2e>
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f855 3b04 	ldr.w	r3, [r5], #4
 8000588:	4798      	blx	r3
 800058a:	3601      	adds	r6, #1
 800058c:	e7ee      	b.n	800056c <__libc_init_array+0xc>
 800058e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000592:	4798      	blx	r3
 8000594:	3601      	adds	r6, #1
 8000596:	e7f2      	b.n	800057e <__libc_init_array+0x1e>
 8000598:	080005c0 	.word	0x080005c0
 800059c:	080005c0 	.word	0x080005c0
 80005a0:	080005c0 	.word	0x080005c0
 80005a4:	080005c4 	.word	0x080005c4

080005a8 <_init>:
 80005a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005aa:	bf00      	nop
 80005ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ae:	bc08      	pop	{r3}
 80005b0:	469e      	mov	lr, r3
 80005b2:	4770      	bx	lr

080005b4 <_fini>:
 80005b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b6:	bf00      	nop
 80005b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ba:	bc08      	pop	{r3}
 80005bc:	469e      	mov	lr, r3
 80005be:	4770      	bx	lr
