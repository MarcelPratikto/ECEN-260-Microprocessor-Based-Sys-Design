
class-10-24-23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000274  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f8  080003f8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f8  080003f8  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  080003f8  080003f8  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f8  080003f8  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003fc  080003fc  000103fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          0000001c  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000034  20000034  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000687  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000001bf  00000000  00000000  00020712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000b0  00000000  00000000  000208d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000007b  00000000  00000000  00020988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000fab  00000000  00000000  00020a03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000067e  00000000  00000000  000219ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003ec3  00000000  00000000  0002202c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000238  00000000  00000000  00025ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00026128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000018 	.word	0x20000018
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080003e0 	.word	0x080003e0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	2000001c 	.word	0x2000001c
 80001c0:	080003e0 	.word	0x080003e0

080001c4 <GPIO_configure_input_mode>:

//void SysConfig_enable_clock(){} //TODO

// This function configures a pin in the port specified by GPIOx as an input device
void GPIO_configure_input_mode(Port* GPIOx, unsigned int pin)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b085      	sub	sp, #20
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
 80001cc:	6039      	str	r1, [r7, #0]
	// MODER input: 0b00
	// takes the MODER (Mode register)
	unsigned int mode = GPIOx->MODER;
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	60fb      	str	r3, [r7, #12]
	// reset the pin to 0b00
	mode &= ~bitpair(pin);
 80001d4:	683b      	ldr	r3, [r7, #0]
 80001d6:	005b      	lsls	r3, r3, #1
 80001d8:	2203      	movs	r2, #3
 80001da:	fa02 f303 	lsl.w	r3, r2, r3
 80001de:	43db      	mvns	r3, r3
 80001e0:	461a      	mov	r2, r3
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	4013      	ands	r3, r2
 80001e6:	60fb      	str	r3, [r7, #12]
	// store
	GPIOx->MODER = mode;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	68fa      	ldr	r2, [r7, #12]
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr

080001fa <GPIO_configure_output_mode>:

// This function configures a pin in the port specified by GPIOx as an output device
void GPIO_configure_output_mode(Port* GPIOx, unsigned int pin)
{
 80001fa:	b480      	push	{r7}
 80001fc:	b085      	sub	sp, #20
 80001fe:	af00      	add	r7, sp, #0
 8000200:	6078      	str	r0, [r7, #4]
 8000202:	6039      	str	r1, [r7, #0]
	// MODER output: 0b01
	// takes the MODER (Mode Register)
	unsigned int mode = GPIOx->MODER;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	60fb      	str	r3, [r7, #12]
	// reset the pin to 0b00
	mode &= ~bitpair(pin);
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	005b      	lsls	r3, r3, #1
 800020e:	2203      	movs	r2, #3
 8000210:	fa02 f303 	lsl.w	r3, r2, r3
 8000214:	43db      	mvns	r3, r3
 8000216:	461a      	mov	r2, r3
 8000218:	68fb      	ldr	r3, [r7, #12]
 800021a:	4013      	ands	r3, r2
 800021c:	60fb      	str	r3, [r7, #12]
	// set to 0b01
	mode |= lbit(pin);
 800021e:	683b      	ldr	r3, [r7, #0]
 8000220:	005b      	lsls	r3, r3, #1
 8000222:	2201      	movs	r2, #1
 8000224:	fa02 f303 	lsl.w	r3, r2, r3
 8000228:	461a      	mov	r2, r3
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	4313      	orrs	r3, r2
 800022e:	60fb      	str	r3, [r7, #12]
	// store
	GPIOx->MODER = mode;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68fa      	ldr	r2, [r7, #12]
 8000234:	601a      	str	r2, [r3, #0]
}
 8000236:	bf00      	nop
 8000238:	3714      	adds	r7, #20
 800023a:	46bd      	mov	sp, r7
 800023c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000240:	4770      	bx	lr
	...

08000244 <SysConfig_enable_clock>:

// Advanced Peripheral Bus 2 Enable Register
unsigned int* RCC_APB2ENR = (unsigned int*) 0x40021060;

// enables the System Configuration clock (for external interrupts)
void SysConfig_enable_clock(void){
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0

	// set bit 0 for the System Configuration Clock
	*RCC_APB2ENR |= 0b1;
 8000248:	4b06      	ldr	r3, [pc, #24]	; (8000264 <SysConfig_enable_clock+0x20>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SysConfig_enable_clock+0x20>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f042 0201 	orr.w	r2, r2, #1
 8000256:	601a      	str	r2, [r3, #0]
}
 8000258:	bf00      	nop
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	20000014 	.word	0x20000014

08000268 <GPIO_toggle_pin>:

// toggle a pin
void GPIO_toggle_pin(Port* GPIOx, unsigned int pin){
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	6039      	str	r1, [r7, #0]

	// flip the bit for pin (1->0, 0->1)
	GPIOx->ODR ^= bit(pin);
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	2101      	movs	r1, #1
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	fa01 f202 	lsl.w	r2, r1, r2
 800027e:	405a      	eors	r2, r3
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	615a      	str	r2, [r3, #20]

	return;
 8000284:	bf00      	nop
}
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <main>:
#define B1_Pin 13		// (no need to setup pull-up resistor for this button)
#define L2_Port GPIOA	// LED is PA5
#define L2_Pin 5		//

int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
	SysConfig_enable_clock();
 8000296:	f7ff ffd5 	bl	8000244 <SysConfig_enable_clock>
	GPIO_configure_input_mode(B1_Port, B1_Pin);		// onboard blue button as input
 800029a:	4b1a      	ldr	r3, [pc, #104]	; (8000304 <main+0x74>)
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	210d      	movs	r1, #13
 80002a0:	4618      	mov	r0, r3
 80002a2:	f7ff ff8f 	bl	80001c4 <GPIO_configure_input_mode>
	GPIO_configure_output_mode(L2_Port, L2_Pin);	// onboard green LED as output
 80002a6:	4b18      	ldr	r3, [pc, #96]	; (8000308 <main+0x78>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2105      	movs	r1, #5
 80002ac:	4618      	mov	r0, r3
 80002ae:	f7ff ffa4 	bl	80001fa <GPIO_configure_output_mode>
	 * EXTICR[0] holds the 4-bit groups for EXTI lines 0-3.
	 * EXTICR[1] holds the 4-bit groups for EXTI lines 4-7.
	 * EXTICR[2] holds the 4-bit groups for EXTI lines 8-11.
	 * EXTICR[3] holds the 4-bit groups for EXTI lines 12-15.
	 */
	unsigned int temp = SYSCFG->EXTICR[3];
 80002b2:	4b16      	ldr	r3, [pc, #88]	; (800030c <main+0x7c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	695b      	ldr	r3, [r3, #20]
 80002b8:	607b      	str	r3, [r7, #4]
	temp &= ~(0b1111 << 4);
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002c0:	607b      	str	r3, [r7, #4]
	temp |= (0b0010 << 4);
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	f043 0320 	orr.w	r3, r3, #32
 80002c8:	607b      	str	r3, [r7, #4]
	SYSCFG->EXTICR[3] = temp;
 80002ca:	4b10      	ldr	r3, [pc, #64]	; (800030c <main+0x7c>)
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	687a      	ldr	r2, [r7, #4]
 80002d0:	615a      	str	r2, [r3, #20]
	// I've now set option 2 [Port C] for Line 13 EXTI

	// TODO
	EXTI->IMR1 |= bit(B1_Pin);
 80002d2:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <main+0x80>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	681a      	ldr	r2, [r3, #0]
 80002d8:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <main+0x80>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80002e0:	601a      	str	r2, [r3, #0]
	EXTI->FTSR1 |= bit(B1_Pin);
 80002e2:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <main+0x80>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	68da      	ldr	r2, [r3, #12]
 80002e8:	4b09      	ldr	r3, [pc, #36]	; (8000310 <main+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80002f0:	60da      	str	r2, [r3, #12]
	NVIC->ISER[1] |= bit(8);
 80002f2:	4b08      	ldr	r3, [pc, #32]	; (8000314 <main+0x84>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	685a      	ldr	r2, [r3, #4]
 80002f8:	4b06      	ldr	r3, [pc, #24]	; (8000314 <main+0x84>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000300:	605a      	str	r2, [r3, #4]

    /* Loop forever */
	for(;;);
 8000302:	e7fe      	b.n	8000302 <main+0x72>
 8000304:	20000004 	.word	0x20000004
 8000308:	20000000 	.word	0x20000000
 800030c:	2000000c 	.word	0x2000000c
 8000310:	20000008 	.word	0x20000008
 8000314:	20000010 	.word	0x20000010

08000318 <EXTI15_10_IRQHandler>:
}

void EXTI15_10_IRQHandler(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	af00      	add	r7, sp, #0
	if (EXTI->PR1 & bit(B1_Pin))
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <EXTI15_10_IRQHandler+0x24>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000326:	2b00      	cmp	r3, #0
 8000328:	d005      	beq.n	8000336 <EXTI15_10_IRQHandler+0x1e>
	{
		GPIO_toggle_pin(L2_Port, L2_Pin);
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <EXTI15_10_IRQHandler+0x28>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2105      	movs	r1, #5
 8000330:	4618      	mov	r0, r3
 8000332:	f7ff ff99 	bl	8000268 <GPIO_toggle_pin>
	}
}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	20000008 	.word	0x20000008
 8000340:	20000000 	.word	0x20000000

08000344 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000346:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000348:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800034c:	480c      	ldr	r0, [pc, #48]	; (8000380 <LoopForever+0x6>)
  ldr r1, =_edata
 800034e:	490d      	ldr	r1, [pc, #52]	; (8000384 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000350:	4a0d      	ldr	r2, [pc, #52]	; (8000388 <LoopForever+0xe>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000354:	e002      	b.n	800035c <LoopCopyDataInit>

08000356 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000356:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000358:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800035a:	3304      	adds	r3, #4

0800035c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800035c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800035e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000360:	d3f9      	bcc.n	8000356 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000362:	4a0a      	ldr	r2, [pc, #40]	; (800038c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000364:	4c0a      	ldr	r4, [pc, #40]	; (8000390 <LoopForever+0x16>)
  movs r3, #0
 8000366:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000368:	e001      	b.n	800036e <LoopFillZerobss>

0800036a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800036a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800036c:	3204      	adds	r2, #4

0800036e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800036e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000370:	d3fb      	bcc.n	800036a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000372:	f000 f811 	bl	8000398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000376:	f7ff ff8b 	bl	8000290 <main>

0800037a <LoopForever>:

LoopForever:
  b LoopForever
 800037a:	e7fe      	b.n	800037a <LoopForever>
  ldr   r0, =_estack
 800037c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000380:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000384:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000388:	08000400 	.word	0x08000400
  ldr r2, =_sbss
 800038c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000390:	20000034 	.word	0x20000034

08000394 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000394:	e7fe      	b.n	8000394 <ADC1_2_IRQHandler>
	...

08000398 <__libc_init_array>:
 8000398:	b570      	push	{r4, r5, r6, lr}
 800039a:	4d0d      	ldr	r5, [pc, #52]	; (80003d0 <__libc_init_array+0x38>)
 800039c:	4c0d      	ldr	r4, [pc, #52]	; (80003d4 <__libc_init_array+0x3c>)
 800039e:	1b64      	subs	r4, r4, r5
 80003a0:	10a4      	asrs	r4, r4, #2
 80003a2:	2600      	movs	r6, #0
 80003a4:	42a6      	cmp	r6, r4
 80003a6:	d109      	bne.n	80003bc <__libc_init_array+0x24>
 80003a8:	4d0b      	ldr	r5, [pc, #44]	; (80003d8 <__libc_init_array+0x40>)
 80003aa:	4c0c      	ldr	r4, [pc, #48]	; (80003dc <__libc_init_array+0x44>)
 80003ac:	f000 f818 	bl	80003e0 <_init>
 80003b0:	1b64      	subs	r4, r4, r5
 80003b2:	10a4      	asrs	r4, r4, #2
 80003b4:	2600      	movs	r6, #0
 80003b6:	42a6      	cmp	r6, r4
 80003b8:	d105      	bne.n	80003c6 <__libc_init_array+0x2e>
 80003ba:	bd70      	pop	{r4, r5, r6, pc}
 80003bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c0:	4798      	blx	r3
 80003c2:	3601      	adds	r6, #1
 80003c4:	e7ee      	b.n	80003a4 <__libc_init_array+0xc>
 80003c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ca:	4798      	blx	r3
 80003cc:	3601      	adds	r6, #1
 80003ce:	e7f2      	b.n	80003b6 <__libc_init_array+0x1e>
 80003d0:	080003f8 	.word	0x080003f8
 80003d4:	080003f8 	.word	0x080003f8
 80003d8:	080003f8 	.word	0x080003f8
 80003dc:	080003fc 	.word	0x080003fc

080003e0 <_init>:
 80003e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e2:	bf00      	nop
 80003e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003e6:	bc08      	pop	{r3}
 80003e8:	469e      	mov	lr, r3
 80003ea:	4770      	bx	lr

080003ec <_fini>:
 80003ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ee:	bf00      	nop
 80003f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003f2:	bc08      	pop	{r3}
 80003f4:	469e      	mov	lr, r3
 80003f6:	4770      	bx	lr
